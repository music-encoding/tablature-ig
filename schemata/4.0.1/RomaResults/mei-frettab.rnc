namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace ns1 = "http://www.w3.org/1999/xhtml"
default namespace ns2 = "http://www.music-encoding.org/ns/mei"
namespace ns3 = "http://www.w3.org/2000/svg"
namespace rng = "http://relaxng.org/ns/structure/1.0"
namespace sch = "http://purl.oclc.org/dsdl/schematron"
namespace tei = "http://www.tei-c.org/ns/1.0"
namespace teix = "http://www.tei-c.org/ns/Examples"
namespace xi = "http://www.w3.org/2001/XInclude"
namespace xlink = "http://www.w3.org/1999/xlink"

# Schema generated from ODD source 2022-07-29T12:48:22Z. .
# TEI Edition: Version 4.0.0
# TEI Edition Location: https://www.tei-c.org/Vault/P5//
#

#

sch:ns [ prefix = "tei" uri = "http://www.tei-c.org/ns/1.0" ]
data.ACCIDENTAL.WRITTEN =
  
  ## Sharp.
  "s"
  | 
    ## Flat.
    "f"
  | 
    ## Double sharp (written as 2 sharps).
    "ss"
  | 
    ## Double sharp (written using croix).
    "x"
  | 
    ## Double flat.
    "ff"
  | 
    ## Triple sharp (written as a croix followed by a sharp).
    "xs"
  | 
    ## Triple sharp (written as a sharp followed by a croix).
    "sx"
  | 
    ## Triple sharp (written as 3 sharps).
    "ts"
  | 
    ## Triple flat.
    "tf"
  | 
    ## Natural.
    "n"
  | 
    ## Natural + flat; used to cancel preceding double flat.
    "nf"
  | 
    ## Natural + sharp; used to cancel preceding double sharp.
    "ns"
  | 
    ## Sharp note raised by quarter tone (sharp modified by arrow).
    "su"
  | 
    ## Sharp note lowered by quarter tone (sharp modified by arrow).
    "sd"
  | 
    ## Flat note raised by quarter tone (flat modified by arrow).
    "fu"
  | 
    ## Flat note lowered by quarter tone (flat modified by arrow).
    "fd"
  | 
    ## Natural note raised by quarter tone (natural modified by arrow).
    "nu"
  | 
    ## Natural note lowered by quarter tone (natural modified by arrow).
    "nd"
  | 
    ## 1/4-tone flat accidental.
    "1qf"
  | 
    ## 3/4-tone flat accidental.
    "3qf"
  | 
    ## 1/4-tone sharp accidental.
    "1qs"
  | 
    ## 3/4-tone sharp accidental.
    "3qs"
data.ACCIDENTAL.GESTURAL =
  
  ## Sharp.
  "s"
  | 
    ## Flat.
    "f"
  | 
    ## Double sharp.
    "ss"
  | 
    ## Double flat.
    "ff"
  | 
    ## Natural.
    "n"
  | 
    ## Three quarter-tones sharp.
    "su"
  | 
    ## Quarter-tone sharp.
    "sd"
  | 
    ## Quarter-tone flat.
    "fu"
  | 
    ## Three quarter-tones flat.
    "fd"
data.ARTICULATION =
  
  ## Accent (Unicode 1D17B).
  "acc"
  | 
    ## Staccato (Unicode 1D17C).
    "stacc"
  | 
    ## Tenuto (Unicode 1D17D).
    "ten"
  | 
    ## Staccatissimo (Unicode 1D17E).
    "stacciss"
  | 
    ## Marcato (Unicode 1D17F).
    "marc"
  | 
    ## Spiccato.
    "spicc"
  | 
    ## Main note followed by short slide to higher, indeterminate pitch (Unicode 1D185).
    "doit"
  | 
    ## Main note preceded by short slide from lower, indeterminate pitch (Unicode 1D186).
    "scoop"
  | 
    ## Main note preceded by long slide from lower, often indeterminate pitch; also known as "squeeze".
    "rip"
  | 
    ## Main note preceded by "slide" from higher, indeterminate pitch.
    "plop"
  | 
    ## Main note followed by short "slide" to lower, indeterminate pitch.
    "fall"
  | 
    ## Main note followed by long "slide" to lower, indeterminate pitch.
    "longfall"
  | 
    ## "lip slur" to lower pitch, then return to written pitch.
    "bend"
  | 
    ## Main note followed by quick upward rise, then descent in pitch (Unicode 1D187).
    "flip"
  | 
    ## (Unicode 1D188).
    "smear"
  | 
    ## Alternation between written pitch and next highest overtone (brass instruments) or note minor third higher (woodwinds).
    "shake"
  | 
    ## Down bow (Unicode 1D1AA).
    "dnbow"
  | 
    ## Up bow (Unicode 1D1AB).
    "upbow"
  | 
    ## Harmonic (Unicode 1D1AC).
    "harm"
  | 
    ## Snap pizzicato (Unicode 1D1AD).
    "snap"
  | 
    ## Fingernail (Unicode 1D1B3).
    "fingernail"
  | 
    ## Stop harp string from sounding (Unicode 1D1B4).
    "damp"
  | 
    ## Stop all harp strings from sounding (Unicode 1D1B5).
    "dampall"
  | 
    ## Full (as opposed to stopped) tone.
    "open"
  | 
    ## "muffled" tone.
    "stop"
  | 
    ## Double tongue (Unicode 1D18A).
    "dbltongue"
  | 
    ## Triple tongue (Unicode 1D18B).
    "trpltongue"
  | 
    ## Use heel (organ pedal).
    "heel"
  | 
    ## Use toe (organ pedal).
    "toe"
  | 
    ## Percussive effect on guitar string(s).
    "tap"
  | 
    ## Left-hand pizzicato.
    "lhpizz"
  | 
    ## Uninterpreted dot.
    "dot"
  | 
    ## Uninterpreted stroke.
    "stroke"
data.AUGMENTDOT = xsd:nonNegativeInteger { maxInclusive = "4" }
data.BARMETHOD =
  
  ## Between staves only.
  "mensur"
  | 
    ## Between and across staves as necessary.
    "staff"
  | 
    ## Short bar line through a subset of staff lines.
    "takt"
data.BARRENDITION =
  
  ## Dashed line (Unicode 1D104).
  "dashed"
  | 
    ## Dotted line.
    "dotted"
  | 
    ## (Unicode 1D101).
    "dbl"
  | 
    ## Double dashed line.
    "dbldashed"
  | 
    ## Double dotted line.
    "dbldotted"
  | 
    ## (Unicode 1D102).
    "end"
  | 
    ## Bar line not rendered.
    "invis"
  | 
    ## Repeat start (Unicode 1D106).
    "rptstart"
  | 
    ## Repeat start and end.
    "rptboth"
  | 
    ## Repeat end (Unicode 1D107).
    "rptend"
  | 
    ## (Unicode 1D100).
    "single"
data.BEAM = xsd:token { pattern = "[i|m|t][1-6]" }
data.BEAMPLACE =
  
  ## The beam is above the material it affects.
  "above"
  | 
    ## The beam is below the material it affects.
    "below"
  | 
    ## The below is above and below the material it affects.
    "mixed"
data.BEAT = xsd:decimal { minInclusive = "0" }
data.BEATRPT.REND =
  xsd:positiveInteger { pattern = "1|2|3|4|5" }
  | xsd:token { pattern = "mixed" }
data.BEND.AMOUNT =
  xsd:decimal { pattern = "\.25|\.5|\.75" }
  | xsd:decimal { pattern = "[0-9](\.25|\.5|\.75)?" }
  | xsd:token { pattern = "full" }
data.BOOLEAN =
  
  ## True.
  "true"
  | 
    ## False.
    "false"
data.CERTAINTY =
  
  ## High certainty.
  "high"
  | 
    ## Medium certainty.
    "medium"
  | 
    ## Low certainty.
    "low"
  | 
    ## An unknown level of certainty.
    "unknown"
data.CLEFLINE = xsd:positiveInteger
data.CLEFSHAPE =
  
  ## G clef (Unicode 1D11E).
  "G"
  | 
    ## Double G clef.
    "GG"
  | 
    ## F clef (Unicode 1D122).
    "F"
  | 
    ## C clef (Unicode 1D121).
    "C"
  | 
    ## Drum clef (Unicode 1D125 or Unicode 1D126).
    "perc"
  | 
    ## Tablature "clef"; i.e. usually "TAB" rendered vertically.
    "TAB"
data.CLUSTER =
  
  ## White keys.
  "white"
  | 
    ## Black keys.
    "black"
  | 
    ## Mixed black and white keys.
    "chromatic"
data.CONFIDENCE = xsd:decimal { minInclusive = "0" maxInclusive = "1" }
data.COLORNAMES =
  
  ## Hex: #f0f8ff / RGB: 240,248,255
  "aliceblue"
  | 
    ## Hex: #faebd7 / RGB: 250,235,215
    "antiquewhite"
  | 
    ## Hex: #00ffff / RGB: 0,255,255
    "aqua"
  | 
    ## Hex: #7fffd4 / RGB: 127,255,212
    "aquamarine"
  | 
    ## Hex: #f0ffff / RGB: 240,255,255
    "azure"
  | 
    ## Hex: #f5f5dc / RGB: 245,245,220
    "beige"
  | 
    ## Hex: #ffe4c4 / RGB: 255,228,196
    "bisque"
  | 
    ## Hex: #000000 / RGB: 0,0,0
    "black"
  | 
    ## Hex: #ffebcd / RGB: 255,235,205
    "blanchedalmond"
  | 
    ## Hex: #0000ff / RGB: 0,0,255
    "blue"
  | 
    ## Hex: #8a2be2 / RGB: 138,43,226
    "blueviolet"
  | 
    ## Hex: #a52a2a / RGB: 165,42,42
    "brown"
  | 
    ## Hex: #deb887 / RGB: 222,184,135
    "burlywood"
  | 
    ## Hex: #5f9ea0 / RGB: 95,158,160
    "cadetblue"
  | 
    ## Hex: #7fff00 / RGB: 127,255,0
    "chartreuse"
  | 
    ## Hex: #d2691e / RGB: 210,105,30
    "chocolate"
  | 
    ## Hex: #ff7f50 / RGB: 255,127,80
    "coral"
  | 
    ## Hex: #6495ed / RGB: 100,149,237
    "cornflowerblue"
  | 
    ## Hex: #fff8dc / RGB: 255,248,220
    "cornsilk"
  | 
    ## Hex: #dc143c / RGB: 220,20,60
    "crimson"
  | 
    ## Hex: #00ffff / RGB: 0,255,255
    "cyan"
  | 
    ## Hex: #00008b / RGB: 0,0,139
    "darkblue"
  | 
    ## Hex: #008b8b / RGB: 0,139,139
    "darkcyan"
  | 
    ## Hex: #b8860b / RGB: 184,134,11
    "darkgoldenrod"
  | 
    ## Hex: #a9a9a9 / RGB: 169,169,169
    "darkgray"
  | 
    ## Hex: #006400 / RGB: 0,100,0
    "darkgreen"
  | 
    ## Hex: #a9a9a9 / RGB: 169,169,169
    "darkgrey"
  | 
    ## Hex: #bdb76b / RGB: 189,183,107
    "darkkhaki"
  | 
    ## Hex: #8b008b / RGB: 139,0,139
    "darkmagenta"
  | 
    ## Hex: #556b2f / RGB: 85,107,47
    "darkolivegreen"
  | 
    ## Hex: #ff8c00 / RGB: 255,140,0
    "darkorange"
  | 
    ## Hex: #9932cc / RGB: 153,50,204
    "darkorchid"
  | 
    ## Hex: #8b0000 / RGB: 139,0,0
    "darkred"
  | 
    ## Hex: #e9967a / RGB: 233,150,122
    "darksalmon"
  | 
    ## Hex: #8fbc8f / RGB: 143,188,143
    "darkseagreen"
  | 
    ## Hex: #483d8b / RGB: 72,61,139
    "darkslateblue"
  | 
    ## Hex: #2f4f4f / RGB: 47,79,79
    "darkslategray"
  | 
    ## Hex: #2f4f4f / RGB: 47,79,79
    "darkslategrey"
  | 
    ## Hex: #00ced1 / RGB: 0,206,209
    "darkturquoise"
  | 
    ## Hex: #9400d3 / RGB: 148,0,211
    "darkviolet"
  | 
    ## Hex: #ff1493 / RGB: 255,20,147
    "deeppink"
  | 
    ## Hex: #00bfff / RGB: 0,191,255
    "deepskyblue"
  | 
    ## Hex: #696969 / RGB: 105,105,105
    "dimgray"
  | 
    ## Hex: #696969 / RGB: 105,105,105
    "dimgrey"
  | 
    ## Hex: #1e90ff / RGB: 30,144,255
    "dodgerblue"
  | 
    ## Hex: #b22222 / RGB: 178,34,34
    "firebrick"
  | 
    ## Hex: #fffaf0 / RGB: 255,250,240
    "floralwhite"
  | 
    ## Hex: #228b22 / RGB: 34,139,34
    "forestgreen"
  | 
    ## Hex: #ff00ff / RGB: 255,0,255
    "fuchsia"
  | 
    ## Hex: #dcdcdc / RGB: 220,220,220
    "gainsboro"
  | 
    ## Hex: #f8f8ff / RGB: 248,248,255
    "ghostwhite"
  | 
    ## Hex: #ffd700 / RGB: 255,215,0
    "gold"
  | 
    ## Hex: #daa520 / RGB: 218,165,32
    "goldenrod"
  | 
    ## Hex: #808080 / RGB: 128,128,128
    "gray"
  | 
    ## Hex: #008000 / RGB: 0,128,0
    "green"
  | 
    ## Hex: #adff2f / RGB: 173,255,47
    "greenyellow"
  | 
    ## Hex: #808080 / RGB: 128,128,128
    "grey"
  | 
    ## Hex: #f0fff0 / RGB: 240,255,240
    "honeydew"
  | 
    ## Hex: #ff69b4 / RGB: 255,105,180
    "hotpink"
  | 
    ## Hex: #cd5c5c / RGB: 205,92,92
    "indianred"
  | 
    ## Hex: #4b0082 / RGB: 75,0,130
    "indigo"
  | 
    ## Hex: #fffff0 / RGB: 255,255,240
    "ivory"
  | 
    ## Hex: #f0e68c / RGB: 240,230,140
    "khaki"
  | 
    ## Hex: #e6e6fa / RGB: 230,230,250
    "lavender"
  | 
    ## Hex: #fff0f5 / RGB: 255,240,245
    "lavenderblush"
  | 
    ## Hex: #7cfc00 / RGB: 124,252,0
    "lawngreen"
  | 
    ## Hex: #fffacd / RGB: 255,250,205
    "lemonchiffon"
  | 
    ## Hex: #add8e6 / RGB: 173,216,230
    "lightblue"
  | 
    ## Hex: #f08080 / RGB: 240,128,128
    "lightcoral"
  | 
    ## Hex: #e0ffff / RGB: 224,255,255
    "lightcyan"
  | 
    ## Hex: #fafad2 / RGB: 250,250,210
    "lightgoldenrodyellow"
  | 
    ## Hex: #d3d3d3 / RGB: 211,211,211
    "lightgray"
  | 
    ## Hex: #90ee90 / RGB: 144,238,144
    "lightgreen"
  | 
    ## Hex: #d3d3d3 / RGB: 211,211,211
    "lightgrey"
  | 
    ## Hex: #ffb6c1 / RGB: 255,182,193
    "lightpink"
  | 
    ## Hex: #ffa07a / RGB: 255,160,122
    "lightsalmon"
  | 
    ## Hex: #20b2aa / RGB: 32,178,170
    "lightseagreen"
  | 
    ## Hex: #87cefa / RGB: 135,206,250
    "lightskyblue"
  | 
    ## Hex: #778899 / RGB: 119,136,153
    "lightslategray"
  | 
    ## Hex: #778899 / RGB: 119,136,153
    "lightslategrey"
  | 
    ## Hex: #b0c4de / RGB: 176,196,222
    "lightsteelblue"
  | 
    ## Hex: #ffffe0 / RGB: 255,255,224
    "lightyellow"
  | 
    ## Hex: #00ff00 / RGB: 0,255,0
    "lime"
  | 
    ## Hex: #32cd32 / RGB: 50,205,50
    "limegreen"
  | 
    ## Hex: #faf0e6 / RGB: 250,240,230
    "linen"
  | 
    ## Hex: #ff00ff / RGB: 255,0,255
    "magenta"
  | 
    ## Hex: #800000 / RGB: 128,0,0
    "maroon"
  | 
    ## Hex: #66cdaa / RGB: 102,205,170
    "mediumaquamarine"
  | 
    ## Hex: #0000cd / RGB: 0,0,205
    "mediumblue"
  | 
    ## Hex: #ba55d3 / RGB: 186,85,211
    "mediumorchid"
  | 
    ## Hex: #9370db / RGB: 147,112,219
    "mediumpurple"
  | 
    ## Hex: #3cb371 / RGB: 60,179,113
    "mediumseagreen"
  | 
    ## Hex: #7b68ee / RGB: 123,104,238
    "mediumslateblue"
  | 
    ## Hex: #00fa9a / RGB: 0,250,154
    "mediumspringgreen"
  | 
    ## Hex: #48d1cc / RGB: 72,209,204
    "mediumturquoise"
  | 
    ## Hex: #c71585 / RGB: 199,21,133
    "mediumvioletred"
  | 
    ## Hex: #191970 / RGB: 25,25,112
    "midnightblue"
  | 
    ## Hex: #f5fffa / RGB: 245,255,250
    "mintcream"
  | 
    ## Hex: #ffe4e1 / RGB: 255,228,225
    "mistyrose"
  | 
    ## Hex: #ffe4b5 / RGB: 255,228,181
    "moccasin"
  | 
    ## Hex: #ffdead / RGB: 255,222,173
    "navajowhite"
  | 
    ## Hex: #000080 / RGB: 0,0,128
    "navy"
  | 
    ## Hex: #fdf5e6 / RGB: 253,245,230
    "oldlace"
  | 
    ## Hex: #808000 / RGB: 128,128,0
    "olive"
  | 
    ## Hex: #6b8e23 / RGB: 107,142,35
    "olivedrab"
  | 
    ## Hex: #ffa500 / RGB: 255,165,0
    "orange"
  | 
    ## Hex: #ff4500 / RGB: 255,69,0
    "orangered"
  | 
    ## Hex: #da70d6 / RGB: 218,112,214
    "orchid"
  | 
    ## Hex: #eee8aa / RGB: 238,232,170
    "palegoldenrod"
  | 
    ## Hex: #98fb98 / RGB: 152,251,152
    "palegreen"
  | 
    ## Hex: #afeeee / RGB: 175,238,238
    "paleturquoise"
  | 
    ## Hex: #db7093 / RGB: 219,112,147
    "palevioletred"
  | 
    ## Hex: #ffefd5 / RGB: 255,239,213
    "papayawhip"
  | 
    ## Hex: #ffdab9 / RGB: 255,218,185
    "peachpuff"
  | 
    ## Hex: #cd853f / RGB: 205,133,63
    "peru"
  | 
    ## Hex: #ffc0cb / RGB: 255,192,203
    "pink"
  | 
    ## Hex: #dda0dd / RGB: 221,160,221
    "plum"
  | 
    ## Hex: #b0e0e6 / RGB: 176,224,230
    "powderblue"
  | 
    ## Hex: #800080 / RGB: 128,0,128
    "purple"
  | 
    ## Hex: #ff0000 / RGB: 255,0,0
    "red"
  | 
    ## Hex: #bc8f8f / RGB: 188,143,143
    "rosybrown"
  | 
    ## Hex: #4169e1 / RGB: 65,105,225
    "royalblue"
  | 
    ## Hex: #8b4513 / RGB: 139,69,19
    "saddlebrown"
  | 
    ## Hex: #fa8072 / RGB: 250,128,114
    "salmon"
  | 
    ## Hex: #f4a460 / RGB: 244,164,96
    "sandybrown"
  | 
    ## Hex: #2e8b57 / RGB: 46,139,87
    "seagreen"
  | 
    ## Hex: #fff5ee / RGB: 255,245,238
    "seashell"
  | 
    ## Hex: #a0522d / RGB: 160,82,45
    "sienna"
  | 
    ## Hex: #c0c0c0 / RGB: 192,192,192
    "silver"
  | 
    ## Hex: #87ceeb / RGB: 135,206,235
    "skyblue"
  | 
    ## Hex: #6a5acd / RGB: 106,90,205
    "slateblue"
  | 
    ## Hex: #708090 / RGB: 112,128,144
    "slategray"
  | 
    ## Hex: #708090 / RGB: 112,128,144
    "slategrey"
  | 
    ## Hex: #fffafa / RGB: 255,250,250
    "snow"
  | 
    ## Hex: #00ff7f / RGB: 0,255,127
    "springgreen"
  | 
    ## Hex: #4682b4 / RGB: 70,130,180
    "steelblue"
  | 
    ## Hex: #d2b48c / RGB: 210,180,140
    "tan"
  | 
    ## Hex: #008080 / RGB: 0,128,128
    "teal"
  | 
    ## Hex: #d8bfd8 / RGB: 216,191,216
    "thistle"
  | 
    ## Hex: #ff6347 / RGB: 255,99,71
    "tomato"
  | 
    ## Hex: #40e0d0 / RGB: 64,224,208
    "turquoise"
  | 
    ## Hex: #ee82ee / RGB: 238,130,238
    "violet"
  | 
    ## Hex: #f5deb3 / RGB: 245,222,179
    "wheat"
  | 
    ## Hex: #ffffff / RGB: 255,255,255
    "white"
  | 
    ## Hex: #f5f5f5 / RGB: 245,245,245
    "whitesmoke"
  | 
    ## Hex: #ffff00 / RGB: 255,255,0
    "yellow"
  | 
    ## Hex: #9acd32 / RGB: 154,205,50
    "yellowgreen"
data.COLORVALUES =
  xsd:token { pattern = "#[0-9A-Fa-f]{6,6}" }
  | xsd:token { pattern = "#[0-9A-Fa-f]{8,8}" }
  | xsd:token {
      pattern =
        "rgb\((\s*(([01]?[0-9]?[0-9])|2[0-4][0-9]|25[0-5])\s*,\s*){2}([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*\)"
    }
  | xsd:token {
      pattern =
        "rgba\(\s*(([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])\s*,\s*){3}(0(\.\d+)?|1(\.0+)?)\s*\)|rgba\(\s*(((\d{1,2})?%|100%)\s*,\s*){2}(\d{1,2}%|100%)\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)"
    }
  | xsd:token {
      pattern =
        "hsl\(\s*((\d{1,2})|[12]\d{2}|3[0-5]\d|360)\s*,\s*(\d{1,2}%|100%)\s*,\s*(\d{1,2}%|100%)\s*\)"
    }
  | xsd:token {
      pattern =
        "hsla\(\s*(\d{1,2}|[12]\d{2}|3[0-5]\d|360)\s*,\s*(\d{1,2}%|100%)\s*,\s*(\d{1,2}%|100%)\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)"
    }
data.COLOR = data.COLORNAMES | data.COLORVALUES
data.COMPASSDIRECTION =
  data.COMPASSDIRECTION.basic | data.COMPASSDIRECTION.extended
data.COMPASSDIRECTION.basic =
  
  ## In a northern direction.
  "n"
  | 
    ## In an eastern direction.
    "e"
  | 
    ## In a southern direction.
    "s"
  | 
    ## In a western direction.
    "w"
data.COMPASSDIRECTION.extended =
  
  ## In a north-eastern direction.
  "ne"
  | 
    ## In a north-western direction.
    "nw"
  | 
    ## In a south-eastern direction.
    "se"
  | 
    ## In a south-western direction.
    "sw"
data.DEGREES =
  xsd:decimal { maxInclusive = "360.0" minInclusive = "-360.0" }
data.DURATION = data.DURATION.cmn | data.DURATION.mensural
data.DURATION.gestural = data.DURATION.cmn | data.DURATION.mensural
data.ENCLOSURE =
  
  ## Parentheses: ( and ).
  "paren"
  | 
    ## Square brackets: [ and ].
    "brack"
data.EVENTREL = data.EVENTREL.basic | data.EVENTREL.extended
data.EVENTREL.basic =
  
  ## Above.
  "above"
  | 
    ## Below.
    "below"
  | 
    ## Left.
    "left"
  | 
    ## Right.
    "right"
data.EVENTREL.extended =
  
  ## Above and left; north-west.
  "above-left"
  | 
    ## Above and right; north-east.
    "above-right"
  | 
    ## Below and left; south-west.
    "below-left"
  | 
    ## Below and right; south-east.
    "below-right"
data.FILL =
  
  ## Unfilled
  "void"
  | 
    ## Filled
    "solid"
  | 
    ## Top half filled
    "top"
  | 
    ## Bottom half filled
    "bottom"
  | 
    ## Left half filled
    "left"
  | 
    ## Right half filled
    "right"
data.FINGER.FRET =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "4" }
  | xsd:token { pattern = "x|o|t" }
data.FONTFAMILY = xsd:token
data.FONTNAME = xsd:token
data.FONTSIZE = data.FONTSIZENUMERIC | data.FONTSIZETERM | data.PERCENT
data.FONTSIZENUMERIC =
  (xsd:token { pattern = "\d*(\.\d+)?(pt|vu)" }
  - ((xsd:token { pattern = "(pt|vu)" }
      | xsd:token { pattern = "0+(pt|vu)" }
      | xsd:token { pattern = "0+(\.0+)?(pt|vu)" }
      | xsd:token { pattern = "\.0+(pt|vu)" })))
data.FONTSIZESCALE =
  xsd:integer { minInclusive = "1" maxInclusive = "9" }
data.FONTSIZETERM =
  
  ## Smaller than x-small.
  "xx-small"
  | 
    ## Smaller than small, larger than xx-small.
    "x-small"
  | 
    ## Smaller than normal, larger than x-small.
    "small"
  | 
    ## Smaller than large, larger than small.
    "normal"
  | 
    ## Smaller than x-large, larger than normal.
    "large"
  | 
    ## Smaller than xx-large, larger than large.
    "x-large"
  | 
    ## Larger than x-large.
    "xx-large"
  | 
    ## One size smaller than the current size.
    "smaller"
  | 
    ## One size larger than the current size.
    "larger"
data.FONTSTYLE =
  
  ## Text slants to right.
  "italic"
  | 
    ## Unadorned.
    "normal"
  | 
    ## Text slants to the left.
    "oblique"
data.FONTWEIGHT =
  
  ## Bold or heavy.
  "bold"
  | 
    ## Not bold.
    "normal"
data.FRETNUMBER =
  xsd:token { pattern = "x" }
  | xsd:nonNegativeInteger
data.GLISSANDO =
  
  ## First note/chord in glissando.
  "i"
  | 
    ## Note/chord that's neither first nor last in glissando.
    "m"
  | 
    ## Last note in glissando.
    "t"
data.GRACE =
  
  ## Time "stolen" from following note.
  "acc"
  | 
    ## Time "stolen" from previous note.
    "unacc"
  | 
    ## No interpretation regarding performed value of grace note.
    "unknown"
data.HEADSHAPE = data.HEADSHAPE.list | data.HEXNUM | data.NMTOKEN
data.HEADSHAPE.list =
  
  ## Filled, rotated oval (Unicode 1D158).
  "quarter"
  | 
    ## Unfilled, rotated oval (Unicode 1D157).
    "half"
  | 
    ## Unfilled, rotated oval (Unicode 1D15D).
    "whole"
  | 
    ## Unfilled backslash (~ reflection of Unicode 1D10D).
    "backslash"
  | 
    ## Unfilled circle (Unicode 25CB).
    "circle"
  | 
    ## Plus sign (Unicode 1D144).
    "+"
  | 
    ## Unfilled diamond (Unicode 1D1B9).
    "diamond"
  | 
    ## Unfilled isosceles triangle (Unicode 1D148).
    "isotriangle"
  | 
    ## Unfilled, unrotated oval (Unicode 2B2D).
    "oval"
  | 
    ## Unfilled downward-pointing wedge (Unicode 1D154).
    "piewedge"
  | 
    ## Unfilled rectangle (Unicode 25AD).
    "rectangle"
  | 
    ## Unfilled right triangle (Unicode 1D14A).
    "rtriangle"
  | 
    ## Unfilled semi-circle (Unicode 1D152).
    "semicircle"
  | 
    ## Unfilled slash (~ Unicode 1D10D).
    "slash"
  | 
    ## Unfilled square (Unicode 1D146).
    "square"
  | 
    ## X (Unicode 1D143).
    "x"
data.HEXNUM = xsd:string { pattern = "(#x|U\+)[A-F0-9]+" }
data.HORIZONTALALIGNMENT =
  
  ## Left aligned.
  "left"
  | 
    ## Right aligned.
    "right"
  | 
    ## Centered.
    "center"
  | 
    ## Left and right aligned.
    "justify"
data.INTERVAL.HARMONIC = xsd:token { pattern = "[AdMmP][0-9]+" }
data.INTERVAL.MELODIC =
  xsd:token { pattern = "u|d|s|n|sd|su" }
  | xsd:token { pattern = "(\+|\-)?([AdMmP])?[0-9]+" }
  | xsd:token { pattern = "(\+|\-)?\d+(\.\d+)?hs" }
data.ISODATE =
  xsd:date
  | xsd:gYear
  | xsd:gMonth
  | xsd:gDay
  | xsd:gYearMonth
  | xsd:gMonthDay
  | xsd:time
  | xsd:dateTime
  | xsd:token { pattern = "[0-9.,DHMPRSTWYZ/:+\-]+" }
data.ISOTIME = xsd:time
data.KEYFIFTHS = xsd:token { pattern = "mixed|0|([1-9]|1[0-2])[f|s]" }
data.LAYERSCHEME =
  
  ## Single layer.
  "1"
  | 
    ## Two layers with opposing stems.
    "2o"
  | 
    ## Two layers with 'floating' stems.
    "2f"
  | 
    ## Three layers with opposing stems.
    "3o"
  | 
    ## Three layers with 'floating' stems.
    "3f"
data.LIGATUREFORM =
  
  ## Notes are "squeezed" together.
  "recta"
  | 
    ## Individual notes are replaced by an oblique figure.
    "obliqua"
data.LINEFORM =
  
  ## Dashed line.
  "dashed"
  | 
    ## Dotted line.
    "dotted"
  | 
    ## Straight, uninterrupted line.
    "solid"
  | 
    ## Undulating line.
    "wavy"
data.LINESTARTENDSYMBOL =
  
  ## 90 degree turn down (similar to Unicode 231D at end of line, 231C at start).
  "angledown"
  | 
    ## 90 degree turn up (similar to Unicode 231F at end of line, 231E at start).
    "angleup"
  | 
    ## 90 degree turn right (syntactic sugar for "angledown" for vertical or angled lines).
    "angleright"
  | 
    ## 90 degree turn left (syntactic sugar for "angleup" for vertical or angled lines).
    "angleleft"
  | 
    ## Filled, triangular arrowhead (similar to Unicode U+25C0 or SMuFL U+EB78).
    "arrow"
  | 
    ## Open triangular arrowhead (similar to Unicode U+02C3 or SMuFL U+EB8A).
    "arrowopen"
  | 
    ## Unfilled, triangular arrowhead (similar to Unicode U+25C1 or SMuFL U+EB82).
    "arrowwhite"
  | 
    ## Harpoon-shaped arrowhead left of line (similar to arrowhead of Unicode U+21BD).
    "harpoonleft"
  | 
    ## Harpoon-shaped arrowhead right of line (similar to arrowhead of Unicode U+21BC).
    "harpoonright"
  | 
    ## Hauptstimme (Unicode U+1D1A6 or SMuFL U+E860).
    "H"
  | 
    ## Nebenstimme (Unicode U+1D1A7 or SMuFL U+E861).
    "N"
  | 
    ## Theme (SMuFL U+E864).
    "Th"
  | 
    ## Theme, retrograde (SMuFL U+E865).
    "ThRetro"
  | 
    ## Theme, retrograde inversion (SMuFL U+E866).
    "ThRetroInv"
  | 
    ## Theme, inverted (SMuFL U+E867).
    "ThInv"
  | 
    ## Theme (SMuFL U+E868).
    "T"
  | 
    ## Theme, inverted (SMuFL U+E869).
    "TInv"
  | 
    ## Choralemelodie (SMuFL U+E86A).
    "CH"
  | 
    ## Hauptrhythmus (SMuFL U+E86B).
    "RH"
  | 
    ## No start/end symbol.
    "none"
data.LINEWIDTH = data.LINEWIDTHTERM | data.MEASUREMENTABS
data.LINEWIDTHTERM =
  
  ## Default line width.
  "narrow"
  | 
    ## Twice as wide as narrow.
    "medium"
  | 
    ## Twice as wide as medium.
    "wide"
data.MEASUREBEAT =
  xsd:token { pattern = "([0-9]+m\s*\+\s*)?[0-9]+(\.?[0-9]*)?" }
data.MEASUREBEATOFFSET =
  xsd:token { pattern = "(\+|-)?[0-9]+m\+[0-9]+(\.[0-9]*)?" }
data.MEASUREMENTABS =
  xsd:token { pattern = "(\+)?\d+(\.\d+)?(cm|mm|in|pt|pc|px|vu)?" }
data.MEASUREMENTREL =
  xsd:token { pattern = "(\+|-)?\d+(\.\d+)?(cm|mm|in|pt|pc|px|vu)?" }
data.MELODICFUNCTION =
  
  ## Accented lower neighbor.
  "aln"
  | 
    ## Anticipation.
    "ant"
  | 
    ## Appogiatura.
    "app"
  | 
    ## Accented passing tone.
    "apt"
  | 
    ## Arpeggio tone (chordal tone).
    "arp"
  | 
    ## Arpeggio tone (7th added to the chord).
    "arp7"
  | 
    ## Accented upper neighbor.
    "aun"
  | 
    ## Changing tone.
    "chg"
  | 
    ## Chromatic lower neighbor.
    "cln"
  | 
    ## Chord tone (i.e., not an embellishment).
    "ct"
  | 
    ## Chord tone (7th added to the chord).
    "ct7"
  | 
    ## Chromatic upper neighbor.
    "cun"
  | 
    ## Chromatic unaccented passing tone.
    "cup"
  | 
    ## Escape tone.
    "et"
  | 
    ## Lower neighbor.
    "ln"
  | 
    ## Pedal tone.
    "ped"
  | 
    ## Repeated tone.
    "rep"
  | 
    ## Retardation.
    "ret"
  | 
    ## 2-3 retardation.
    "23ret"
  | 
    ## 7-8 retardation.
    "78ret"
  | 
    ## Suspension.
    "sus"
  | 
    ## 4-3 suspension.
    "43sus"
  | 
    ## 9-8 suspension.
    "98sus"
  | 
    ## 7-6 suspension.
    "76sus"
  | 
    ## Upper neighbor.
    "un"
  | 
    ## Upper neighbor (7th added to the chord).
    "un7"
  | 
    ## Unaccented passing tone.
    "upt"
  | 
    ## Unaccented passing tone (7th added to the chord).
    "upt7"
data.MENSURATIONSIGN =
  
  ## Tempus imperfectum.
  "C"
  | 
    ## Tempus perfectum.
    "O"
data.METERSIGN =
  
  ## Common time; i.e. 4/4.
  "common"
  | 
    ## Cut time; i.e. 2/2.
    "cut"
data.MIDICHANNEL = xsd:token { pattern = "0|([1-9]|1[0-5])o?|16o" }
data.MIDIBPM = xsd:positiveInteger
data.MIDIMSPB = xsd:positiveInteger
data.MIDINAMES =
  
  ## Program #0.
  "Acoustic Grand Piano"
  | 
    ## Program #1.
    "Bright Acoustic Piano"
  | 
    ## Program #2.
    "Electric Grand Piano"
  | 
    ## Program #3.
    "Honky-tonk Piano"
  | 
    ## Program #4.
    "Electric Piano 1"
  | 
    ## Program #5.
    "Electric Piano 2"
  | 
    ## Program #6.
    "Harpsichord"
  | 
    ## Program #7.
    "Clavi"
  | 
    ## Program #8.
    "Celesta"
  | 
    ## Program #9.
    "Glockenspiel"
  | 
    ## Program #10.
    "Music_Box"
  | 
    ## Program #11.
    "Vibraphone"
  | 
    ## Program #12.
    "Marimba"
  | 
    ## Program #13.
    "Xylophone"
  | 
    ## Program #14.
    "Tubular Bells"
  | 
    ## Program #15.
    "Dulcimer"
  | 
    ## Program #16.
    "Drawbar Organ"
  | 
    ## Program #17.
    "Percussive Organ"
  | 
    ## Program #18.
    "Rock Organ"
  | 
    ## Program #19.
    "Church Organ"
  | 
    ## Program #20.
    "Reed Organ"
  | 
    ## Program #21.
    "Accordion"
  | 
    ## Program #22.
    "Harmonica"
  | 
    ## Program #23.
    "Tango Accordion"
  | 
    ## Program #24.
    "Acoustic Guitar (nylon)"
  | 
    ## Program #25.
    "Acoustic Guitar (steel)"
  | 
    ## Program #26.
    "Electric Guitar (jazz)"
  | 
    ## Program #27.
    "Electric Guitar (clean)"
  | 
    ## Program #28.
    "Electric Guitar (muted)"
  | 
    ## Program #29.
    "Overdriven Guitar"
  | 
    ## Program #30.
    "Distortion Guitar"
  | 
    ## Program #31.
    "Guitar harmonics"
  | 
    ## Program #32.
    "Acoustic Bass"
  | 
    ## Program #33.
    "Electric Bass (finger)"
  | 
    ## Program #34.
    "Electric Bass (pick)"
  | 
    ## Program #35.
    "Fretless Bass"
  | 
    ## Program #36.
    "Slap Bass 1"
  | 
    ## Program #37.
    "Slap Bass 2"
  | 
    ## Program #38.
    "Synth Bass 1"
  | 
    ## Program #39.
    "Synth Bass 2"
  | 
    ## Program #40.
    "Violin"
  | 
    ## Program #41.
    "Viola"
  | 
    ## Program #42.
    "Cello"
  | 
    ## Program #43.
    "Contrabass"
  | 
    ## Program #44.
    "Tremolo Strings"
  | 
    ## Program #45.
    "Pizzicato Strings"
  | 
    ## Program #46.
    "Orchestral Harp"
  | 
    ## Program #47.
    "Timpani"
  | 
    ## Program #48.
    "String Ensemble 1"
  | 
    ## Program #49.
    "String Ensemble 2"
  | 
    ## Program #50.
    "SynthStrings 1"
  | 
    ## Program #51.
    "SynthStrings 2"
  | 
    ## Program #52.
    "Choir Aahs"
  | 
    ## Program #53.
    "Voice Oohs"
  | 
    ## Program #54.
    "Synth Voice"
  | 
    ## Program #55.
    "Orchestra Hit"
  | 
    ## Program #56.
    "Trumpet"
  | 
    ## Program #57.
    "Trombone"
  | 
    ## Program #58.
    "Tuba"
  | 
    ## Program #59.
    "Muted Trumpet"
  | 
    ## Program #60.
    "French Horn"
  | 
    ## Program #61.
    "Brass Section"
  | 
    ## Program #62.
    "SynthBrass 1"
  | 
    ## Program #63.
    "SynthBrass 2"
  | 
    ## Program #64.
    "Soprano Sax"
  | 
    ## Program #65.
    "Alto Sax"
  | 
    ## Program #66.
    "Tenor Sax"
  | 
    ## Program #67.
    "Baritone Sax"
  | 
    ## Program #68.
    "Oboe"
  | 
    ## Program #69.
    "English Horn"
  | 
    ## Program #70.
    "Bassoon"
  | 
    ## Program #71.
    "Clarinet"
  | 
    ## Program #72.
    "Piccolo"
  | 
    ## Program #73.
    "Flute"
  | 
    ## Program #74.
    "Recorder"
  | 
    ## Program #75.
    "Pan Flute"
  | 
    ## Program #76.
    "Blown Bottle"
  | 
    ## Program #77.
    "Shakuhachi"
  | 
    ## Program #78.
    "Whistle"
  | 
    ## Program #79.
    "Ocarina"
  | 
    ## Program #80.
    "Lead 1 (square)"
  | 
    ## Program #81.
    "Lead 2 (sawtooth)"
  | 
    ## Program #82.
    "Lead 3 (calliope)"
  | 
    ## Program #83.
    "Lead 4 (chiff)"
  | 
    ## Program #84.
    "Lead 5 (charang)"
  | 
    ## Program #85.
    "Lead 6 (voice)"
  | 
    ## Program #86.
    "Lead 7 (fifths)"
  | 
    ## Program #87.
    "Lead 8 (bass + lead)"
  | 
    ## Program #88.
    "Pad 1 (new age)"
  | 
    ## Program #89.
    "Pad 2 (warm)"
  | 
    ## Program #90.
    "Pad 3 (polysynth)"
  | 
    ## Program #91.
    "Pad 4 (choir)"
  | 
    ## Program #92.
    "Pad 5 (bowed)"
  | 
    ## Program #93.
    "Pad 6 (metallic)"
  | 
    ## Program #94.
    "Pad 7 (halo)"
  | 
    ## Program #95.
    "Pad 8 (sweep)"
  | 
    ## Program #96.
    "FX 1 (rain)"
  | 
    ## Program #97.
    "FX 2 (soundtrack)"
  | 
    ## Program #98.
    "FX 3 (crystal)"
  | 
    ## Program #99.
    "FX 4 (atmosphere)"
  | 
    ## Program #100.
    "FX 5 (brightness)"
  | 
    ## Program #101.
    "FX 6 (goblins)"
  | 
    ## Program #102.
    "FX 7 (echoes)"
  | 
    ## Program #103.
    "FX 8 (sci-fi)"
  | 
    ## Program #104.
    "Sitar"
  | 
    ## Program #105.
    "Banjo"
  | 
    ## Program #106.
    "Shamisen"
  | 
    ## Program #107.
    "Koto"
  | 
    ## Program #108.
    "Kalimba"
  | 
    ## Program #109.
    "Bagpipe"
  | 
    ## Program #110.
    "Fiddle"
  | 
    ## Program #111.
    "Shanai"
  | 
    ## Program #112.
    "Tinkle Bell"
  | 
    ## Program #113.
    "Agogo"
  | 
    ## Program #114.
    "Steel Drums"
  | 
    ## Program #115.
    "Woodblock"
  | 
    ## Program #116.
    "Taiko Drum"
  | 
    ## Program #117.
    "Melodic Tom"
  | 
    ## Program #118.
    "Synth Drum"
  | 
    ## Program #119.
    "Reverse Cymbal"
  | 
    ## Program #120.
    "Guitar Fret Noise"
  | 
    ## Program #121.
    "Breath Noise"
  | 
    ## Program #122.
    "Seashore"
  | 
    ## Program #123.
    "Bird Tweet"
  | 
    ## Program #124.
    "Telephone Ring"
  | 
    ## Program #125.
    "Helicopter"
  | 
    ## Program #126.
    "Applause"
  | 
    ## Program #127.
    "Gunshot"
  | 
    ## Key #35.
    "Acoustic Bass Drum"
  | 
    ## Key #36.
    "Bass Drum 1"
  | 
    ## Key #37.
    "Side Stick"
  | 
    ## Key #38.
    "Acoustic Snare"
  | 
    ## Key #39.
    "Hand Clap"
  | 
    ## Key #40.
    "Electric Snare"
  | 
    ## Key #41.
    "Low Floor Tom"
  | 
    ## Key #42.
    "Closed Hi Hat"
  | 
    ## Key #43.
    "High Floor Tom"
  | 
    ## Key #44.
    "Pedal Hi-Hat"
  | 
    ## Key #45.
    "Low Tom"
  | 
    ## Key #46.
    "Open Hi-Hat"
  | 
    ## Key #47.
    "Low-Mid Tom"
  | 
    ## Key #48.
    "Hi-Mid Tom"
  | 
    ## Key #49.
    "Crash Cymbal 1"
  | 
    ## Key #50.
    "High Tom"
  | 
    ## Key #51.
    "Ride Cymbal 1"
  | 
    ## Key #52.
    "Chinese Cymbal"
  | 
    ## Key #53.
    "Ride Bell"
  | 
    ## Key #54.
    "Tambourine"
  | 
    ## Key #55.
    "Splash Cymbal"
  | 
    ## Key #56.
    "Cowbell"
  | 
    ## Key #57.
    "Crash Cymbal 2"
  | 
    ## Key #58.
    "Vibraslap"
  | 
    ## Key #59.
    "Ride Cymbal 2"
  | 
    ## Key #60.
    "Hi Bongo"
  | 
    ## Key #61.
    "Low Bongo"
  | 
    ## Key #62.
    "Mute Hi Conga"
  | 
    ## Key #63.
    "Open Hi Conga"
  | 
    ## Key #64.
    "Low Conga"
  | 
    ## Key #65.
    "High Timbale"
  | 
    ## Key #66.
    "Low Timbale"
  | 
    ## Key #67.
    "High Agogo"
  | 
    ## Key #68.
    "Low Agogo"
  | 
    ## Key #69.
    "Cabasa"
  | 
    ## Key #70.
    "Maracas"
  | 
    ## Key #71.
    "Short Whistle"
  | 
    ## Key #72.
    "Long Whistle"
  | 
    ## Key #73.
    "Short Guiro"
  | 
    ## Key #74.
    "Long Guiro"
  | 
    ## Key #75.
    "Claves"
  | 
    ## Key #76.
    "Hi Wood Block"
  | 
    ## Key #77.
    "Low Wood Block"
  | 
    ## Key #78.
    "Mute Cuica"
  | 
    ## Key #79.
    "Open Cuica"
  | 
    ## Key #80.
    "Mute Triangle"
  | 
    ## Key #81.
    "Open Triangle"
data.MIDIVALUE =
  xsd:token {
    pattern = "0|([1-9]|[1-9][0-9]|1([0-1][0-9]|2[0-7]))o?|128o"
  }
data.MIDIVALUE_NAME = data.MIDIVALUE | data.NCNAME
data.MIDIVALUE_PAN = data.MIDIVALUE | data.PERCENT.LIMITED.SIGNED
data.MODE =
  
  ## Major mode.
  "major"
  | 
    ## Minor mode.
    "minor"
  | 
    ## Dorian mode.
    "dorian"
  | 
    ## Phrygian mode.
    "phrygian"
  | 
    ## Lydian mode.
    "lydian"
  | 
    ## Mixolydian mode.
    "mixolydian"
  | 
    ## Aeolian mode.
    "aeolian"
  | 
    ## Locrian mode.
    "locrian"
data.MODSRELATIONSHIP =
  
  ## Temporal predecessor of the resource.
  "preceding"
  | 
    ## Temporal successor to the resource.
    "succeeding"
  | 
    ## Original form of the resource.
    "original"
  | 
    ## Parent containing the resource.
    "host"
  | 
    ## Intellectual or physical component of the resource.
    "constituent"
  | 
    ## Version of the resource's intellectual content not changed enough to be a different work.
    "otherVersion"
  | 
    ## Version of the resource in a different physical format.
    "otherFormat"
  | 
    ## Published bibliographic description, review, abstract, or index of the resource's content.
    "isReferencedBy"
  | 
    ## Cited or referred to in the resource.
    "references"
data.MODUSMAIOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.MODUSMINOR =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.MUSICFONT = xsd:token
data.NCNAME = xsd:NCName
data.NMTOKEN = xsd:NMTOKEN
data.NONSTAFFPLACE =
  
  ## At the foot of the page.
  "botmar"
  | 
    ## At the top of the page.
    "topmar"
  | 
    ## At the left of the page.
    "leftmar"
  | 
    ## At the right of the page.
    "rightmar"
  | 
    ## On the opposite, i.e. facing, page.
    "facing"
  | 
    ## On the other side of the leaf.
    "overleaf"
  | 
    ## At the end of this division; e.g., chapter, volume, etc.
    "end"
  | 
    ## Within a line text; i.e., an insertion.
    "inter"
  | 
    ## Between the lines of text, less exact than "sub" or "super".
    "intra"
  | 
    ## Above a line of text, more exact than "intra(linear)". Do not confuse with superscript rendition.
    "super"
  | 
    ## Below a line of text, more exact than "intra(linear)". Do not confuse with subscript rendition.
    "sub"
  | 
    ## In a predefined space; i.e., that left by an earlier scribe.
    "inspace"
  | 
    ## Obscures original text; e.g., via overstrike, addition of new writing surface material, etc.
    "superimposed"
data.NOTATIONTYPE =
  
  ## Common Music Notation.
  "cmn"
  | 
    ## Mensural notation.
    "mensural"
  | 
    ## Black mensural notation.
    "mensural.black"
  | 
    ## White mensural notation.
    "mensural.white"
  | 
    ## Neumatic notation.
    "neume"
  | 
    ## Tablature notation.
    "tab"
  | 
    ## French lute tablature notation.
    "tab.lute.french"
  | 
    ## German lute tablature notation.
    "tab.lute.german"
  | 
    ## Italian lute tablature notation.
    "tab.lute.italian"
  | 
    ## Guitar tablature notation. Also used for Spanish lute tablature.
    "tab.guitar"
data.NOTEHEADMODIFIER =
  data.NOTEHEADMODIFIER.list | data.NOTEHEADMODIFIER.pat
data.NOTEHEADMODIFIER.list =
  
  ## Slash (upper right to lower left).
  "slash"
  | 
    ## Backslash (upper left to lower right).
    "backslash"
  | 
    ## Vertical line.
    "vline"
  | 
    ## Horizontal line.
    "hline"
  | 
    ## Center dot.
    "centerdot"
  | 
    ## Enclosing parentheses.
    "paren"
  | 
    ## Enclosing square brackets.
    "brack"
  | 
    ## Enclosing box.
    "box"
  | 
    ## Enclosing circle.
    "circle"
  | 
    ## Enclosing "fences".
    "dblwhole"
data.NOTEHEADMODIFIER.pat =
  xsd:string { pattern = "centertext\((A|B|C|D|E|F|G)(f|♭|n|♮|s|♯)?\)" }
  | xsd:string { pattern = "centertext\(H(s|♯)?\)" }
data.OCTAVE = xsd:nonNegativeInteger { maxInclusive = "9" }
data.OCTAVE.DIS = xsd:positiveInteger { pattern = "8|15|22" }
data.ORIENTATION = xsd:token { pattern = "reversed|90CW|90CCW" }
data.OTHERSTAFF =
  
  ## The staff immediately above.
  "above"
  | 
    ## The staff immediately below.
    "below"
data.PAGE.PANELS =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "2" }
data.PERCENT = xsd:token { pattern = "[0-9]+(\.?[0-9]*)?%" }
data.PERCENT.LIMITED =
  xsd:token { pattern = "(([0-9]|[1-9][0-9])(\.[0-9]+)?|100)%" }
data.PERCENT.LIMITED.SIGNED =
  xsd:token { pattern = "(\+|-)?(([0-9]|[1-9][0-9])(\.[0-9]+)?|100)%" }
data.PGSCALE = data.PERCENT
data.PITCHCLASS = xsd:nonNegativeInteger { maxInclusive = "11" }
data.PITCHNAME = xsd:token { pattern = "[a-g]" }
data.PITCHNAME.GES = xsd:token { pattern = "[a-g]|none" }
data.PITCHNUMBER = xsd:nonNegativeInteger
data.PLACEMENT = data.STAFFREL | data.NONSTAFFPLACE | data.NMTOKEN
data.PROLATIO =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.RELATIONSHIP =
  data.FRBRRELATIONSHIP | data.MODSRELATIONSHIP | data.NMTOKEN
data.ROTATION = data.DEGREES | data.ROTATIONDIRECTION
data.ROTATIONDIRECTION =
  
  ## No rotation.
  "none"
  | 
    ## Rotated 180 degrees.
    "down"
  | 
    ## Rotated 270 degrees clockwise.
    "left"
  | 
    ## Rotated 45 degrees clockwise.
    "ne"
  | 
    ## Rotated 315 degrees clockwise.
    "nw"
  | 
    ## Rotated 135 degrees clockwise.
    "se"
  | 
    ## Rotated 225 degrees clockwise.
    "sw"
data.SCALEDEGREE = xsd:token { pattern = "(\^|v)?[1-7](\+|\-)?" }
data.SLASH =
  xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" }
data.SLUR = xsd:token { pattern = "[i|m|t][1-6]" }
data.STAFFITEM =
  data.STAFFITEM.basic
  | data.STAFFITEM.cmn
  | data.STAFFITEM.mensural
  | data.STAFFITEM.neumes
data.STAFFITEM.basic =
  
  ## Accidentals.
  "accid"
  | 
    ## Annotations.
    "annot"
  | 
    ## Articulations.
    "artic"
  | 
    ## Directives.
    "dir"
  | 
    ## Dynamics.
    "dynam"
  | 
    ## Harmony indications.
    "harm"
  | 
    ## Ornaments.
    "ornam"
  | 
    ## Spoken text.
    "sp"
  | 
    ## Stage directions.
    "stageDir"
  | 
    ## Tempo markings.
    "tempo"
data.STAFFLOC = xsd:integer
data.STAFFREL = data.STAFFREL.basic | data.STAFFREL.extended
data.STAFFREL.basic =
  
  ## Above the staff.
  "above"
  | 
    ## Below the staff.
    "below"
data.STAFFREL.extended =
  
  ## Between staves.
  "between"
  | 
    ## Within/on the staff.
    "within"
data.STEMDIRECTION =
  data.STEMDIRECTION.basic | data.STEMDIRECTION.extended
data.STEMDIRECTION.basic =
  
  ## Stem points upwards.
  "up"
  | 
    ## Stem points downwards.
    "down"
data.STEMDIRECTION.extended =
  
  ## Stem points left.
  "left"
  | 
    ## Stem points right.
    "right"
  | 
    ## Stem points up and right.
    "ne"
  | 
    ## Stem points down and right.
    "se"
  | 
    ## Stem points up and left.
    "nw"
  | 
    ## Stem points down and left.
    "sw"
data.STEMMODIFIER =
  
  ## No modifications to stem.
  "none"
  | 
    ## 1 slash through stem.
    "1slash"
  | 
    ## 2 slashes through stem.
    "2slash"
  | 
    ## 3 slashes through stem.
    "3slash"
  | 
    ## 4 slashes through stem.
    "4slash"
  | 
    ## 5 slashes through stem.
    "5slash"
  | 
    ## 6 slashes through stem.
    "6slash"
  | 
    ## X placed on stem.
    "sprech"
  | 
    ## Z placed on stem.
    "z"
data.STEMPOSITION =
  
  ## Stem attached to left side of note head.
  "left"
  | 
    ## Stem attached to right side of note head.
    "right"
  | 
    ## Stem is originates from center of note head.
    "center"
data.STRINGNUMBER = xsd:positiveInteger
data.TEMPERAMENT =
  
  ## Equal or 12-tone temperament.
  "equal"
  | 
    ## Just intonation.
    "just"
  | 
    ## Meantone intonation.
    "mean"
  | 
    ## Pythagorean tuning.
    "pythagorean"
data.TEMPOVALUE = xsd:decimal
data.TEMPUS =
  xsd:positiveInteger { minInclusive = "2" maxInclusive = "3" }
data.TEXTRENDITIONLIST =
  
  ## Surrounded by single quotes.
  "quote"
  | 
    ## Surrounded by double quotes.
    "quotedbl"
  | 
    ## Italicized (slanted to right).
    "italic"
  | 
    ## Oblique (slanted to left).
    "oblique"
  | 
    ## Small capitals.
    "smcaps"
  | 
    ## Relative font weight.
    "bold"
  | 
    ## Relative font weight.
    "bolder"
  | 
    ## Relative font weight.
    "lighter"
  | 
    ## Enclosed in box.
    "box"
  | 
    ## Enclosed in ellipse/circle.
    "circle"
  | 
    ## Enclosed in diamond.
    "dbox"
  | 
    ## Enclosed in triangle.
    "tbox"
  | 
    ## Struck through by '\' (back slash).
    "bslash"
  | 
    ## Struck through by '/' (forward slash).
    "fslash"
  | 
    ## Struck through by '-'; may be qualified to indicate multiple parallel lines, e.g. line-through(2).
    "line-through"
  | 
    ## Not rendered, invisible.
    "none"
  | 
    ## Line above the text; may be qualified to indicate multiple parallel lines, e.g. overline(3).
    "overline"
  | 
    ## Use for deleted text fully or partially obscured by other text (such as 'XXXXX') or musical symbols (such as notes, rests, etc.).
    "overstrike"
  | 
    ## Struck through by '-'; equivalent to line-through; may be qualified to indicate multiple parallel lines, e.g. strike(3).
    "strike"
  | 
    ## Subscript.
    "sub"
  | 
    ## Superscript.
    "sup"
  | 
    ## Use for added text or musical symbols that fully or partially obscure text from an earlier writing stage.
    "superimpose"
  | 
    ## Underlined; may be qualified to indicate multiple parallel lines, e.g. underline(2).
    "underline"
  | 
    ## Crossed-out; equivalent to 'bslash' (\) plus 'fslash' (/); that is, a hand-written 'X'; may be qualified to indicate multiple parallel lines, e.g. x-through(2).
    "x-through"
  | 
    ## Left-to-right (BIDI embed).
    "ltr"
  | 
    ## Right-to-left (BIDI embed).
    "rtl"
  | 
    ## Left-to-right (BIDI override).
    "lro"
  | 
    ## Right-to-left (BIDI override).
    "rlo"
data.TEXTRENDITIONPAR =
  xsd:string {
    pattern =
      "(underline|overline|line-through|strike|x-through)\(\d+\)"
  }
  | xsd:string {
      pattern = "(letter-spacing|line-height)\((\+|-)?\d+(\.\d+)?%?\)"
    }
data.TEXTRENDITION = data.TEXTRENDITIONLIST | data.TEXTRENDITIONPAR
data.TIE = xsd:token { pattern = "[i|m|t]" }
data.TSTAMPOFFSET = xsd:decimal
data.TUPLET = xsd:token { pattern = "[i|m|t][1-6]" }
data.URI = xsd:anyURI
data.VERTICALALIGNMENT =
  
  ## Top aligned.
  "top"
  | 
    ## Middle aligned.
    "middle"
  | 
    ## Bottom aligned.
    "bottom"
  | 
    ## Baseline aligned.
    "baseline"
data.WORD = xsd:token { pattern = "(\p{L}|\p{N}|\p{P}|\p{S})*" }
data.DURATION.cmn =
  
  ## Quadruple whole note.
  "long"
  | 
    ## Double whole note.
    "breve"
  | 
    ## Whole note.
    "1"
  | 
    ## Half note.
    "2"
  | 
    ## Quarter note.
    "4"
  | 
    ## 8th note.
    "8"
  | 
    ## 16th note.
    "16"
  | 
    ## 32nd note.
    "32"
  | 
    ## 64th note.
    "64"
  | 
    ## 128th note.
    "128"
  | 
    ## 256th note.
    "256"
  | 
    ## 512th note.
    "512"
  | 
    ## 1024th note.
    "1024"
  | 
    ## 2048th note.
    "2048"
data.STAFFITEM.cmn =
  
  ## Beams.
  "beam"
  | 
    ## Bend indications.
    "bend"
  | 
    ## Brackets, e.g., for transcribed ligatures.
    "bracketSpan"
  | 
    ## Breath marks.
    "breath"
  | 
    ## Copy marks.
    "cpMark"
  | 
    ## Fermatas.
    "fermata"
  | 
    ## Fingerings.
    "fing"
  | 
    ## Hairpin dynamics.
    "hairpin"
  | 
    ## Harp pedals.
    "harpPedal"
  | 
    ## Laissez vibrer indications, sometimes called "open ties".
    "lv"
  | 
    ## Mordents.
    "mordent"
  | 
    ## Octaviation marks.
    "octave"
  | 
    ## Piano pedal marks.
    "pedal"
  | 
    ## Rehearsal marks.
    "reh"
  | 
    ## Ties.
    "tie"
  | 
    ## Trills.
    "trill"
  | 
    ## Tuplets.
    "tuplet"
  | 
    ## Turns.
    "turn"
data.ORNAM.cmn =
  xsd:token {
    pattern =
      "[A|a|b|I|i|K|k|M|m|N|n|S|s|T|t|O]|(A|a|S|s|K|k)?(T|t|M|m)(I|i|S|s)?"
  }
data.FRBRRELATIONSHIP =
  
  ## Target is an abridgement, condensation, or expurgation of the current entity.
  "hasAbridgement"
  | 
    ## Reciprocal relationship of hasAbridgement.
    "isAbridgementOf"
  | 
    ## Target is an adaptation, paraphrase, free translation, variation (music), harmonization (music), or fantasy (music) of the current entity.
    "hasAdaptation"
  | 
    ## Reciprocal relationship of hasAdaptation.
    "isAdaptationOf"
  | 
    ## Target is an alternate format or simultaneously released edition of the current entity.
    "hasAlternate"
  | 
    ## Reciprocal relationship of hasAlternate.
    "isAlternateOf"
  | 
    ## Target is an arrangement (music) of the current entity.
    "hasArrangement"
  | 
    ## Reciprocal relationship of hasArrangement.
    "isArrangementOf"
  | 
    ## Target is a cadenza, libretto, choreography, ending for unfinished work, incidental music, or musical setting of a text of the current entity.
    "hasComplement"
  | 
    ## Reciprocal relationship of hasComplement.
    "isComplementOf"
  | 
    ## Target is a physical embodiment of the current abstract entity; describes the expression-to-manifestation relationship.
    "hasEmbodiment"
  | 
    ## Reciprocal relationship of hasEmbodiment.
    "isEmbodimentOf"
  | 
    ## Target is an exemplar of the class of things represented by the current entity; describes the manifestation-to-item relationship.
    "hasExemplar"
  | 
    ## Reciprocal relationship of hasExamplar.
    "isExemplarOf"
  | 
    ## Target is a parody, imitation, or travesty of the current entity.
    "hasImitation"
  | 
    ## Reciprocal relationship of hasImitation.
    "isImitationOf"
  | 
    ## Target is a chapter, section, part, etc.; volume of a multivolume manifestation; volume/issue of serial; intellectual part of a multi-part work; illustration for a text; sound aspect of a film; soundtrack for a film on separate medium; soundtrack for a film embedded in film; monograph in a series; physical component of a particular copy; the binding of a book of the current entity.
    "hasPart"
  | 
    ## Reciprocal relationship of hasPart.
    "isPartOf"
  | 
    ## Target is a realization of the current entity; describes the work-to-expression relationship.
    "hasRealization"
  | 
    ## Reciprocal relationship of hasRealization.
    "isRealizationOf"
  | 
    ## Target has been reconfigured: bound with, split into, extracted from the current entity.
    "hasReconfiguration"
  | 
    ## Reciprocal relationship of hasReconfiguration.
    "isReconfigurationOf"
  | 
    ## Target is a reproduction, microreproduction, macroreproduction, reprint, photo-offset reprint, or facsimile of the current entity.
    "hasReproduction"
  | 
    ## Reciprocal relationship of hasReproduction.
    "isReproductionOf"
  | 
    ## Target is a revised edition, enlarged edition, or new state (graphic) of the current entity.
    "hasRevision"
  | 
    ## Reciprocal relationship of hasRevision.
    "isRevisionOf"
  | 
    ## Target is a sequel or succeeding work of the current entity.
    "hasSuccessor"
  | 
    ## Reciprocal relationship of hasSuccessor.
    "isSuccessorOf"
  | 
    ## Target is a digest or abstract of the current entity.
    "hasSummarization"
  | 
    ## Reciprocal relationship of hasSummarization.
    "isSummarizationOf"
  | 
    ## Target is an index, concordance, teacher's guide, gloss, supplement, or appendix of the current entity.
    "hasSupplement"
  | 
    ## Reciprocal relationship of hasSupplement.
    "isSupplementOf"
  | 
    ## Target is a dramatization, novelization, versification, or screenplay of the current entity.
    "hasTransformation"
  | 
    ## Reciprocal relationship of hasTransformation.
    "isTransformationOf"
  | 
    ## Target is a literal translation or transcription (music) of the current entity.
    "hasTranslation"
  | 
    ## Reciprocal relationship of hasTranslation.
    "isTranslationOf"
macro.availabilityPart =
  (model.headLike*,
   (accessRestrict
    | distributor
    | price
    | sysReq
    | useRestrict
    | model.addressLike
    | model.dateLike
    | model.identifierLike)*)
  | text
macro.bibldescPart =
  editionStmt?, pubStmt?, physDesc*, physLoc*, seriesStmt*
data.DURATION.mensural =
  
  ## Two or three times as long as a longa.
  "maxima"
  | 
    ## Two or three times as long as a brevis.
    "longa"
  | 
    ## Two times as long as a semibreve.
    "brevis"
  | 
    ## Half or one-third as long as a breve/brevis.
    "semibrevis"
  | 
    ## Half or one-third as long as a semibreve/semibrevis.
    "minima"
  | 
    ## Half or one-third as long as a minima.
    "semiminima"
  | 
    ## Half or one-third as long as a semiminima.
    "fusa"
  | 
    ## Half or one-third as long as a fusa.
    "semifusa"
data.STAFFITEM.mensural =
  
  ## Ligatures.
  "ligature"
data.STAFFITEM.neumes = empty
macro.anyXML =
  element * - (ns2:* | ns3:*) {
    attribute * { text }*,
    (text | macro.anyXML)*
  }
macro.metaLike.page = pgHead?, pgFoot?, pgDesc?
macro.musicPart = model.frontLike?, (body | group)?, model.backLike?
macro.struc-unstrucContent =
  (model.headLike*, model.pLike*)
  | (text | model.textPhraseLike.limited)*
macro.titlePart =
  (model.addressLike
   | model.addressPart
   | model.annotLike
   | model.biblLike
   | model.dateLike
   | model.editorialLike
   | model.figureLike
   | model.identifierLike
   | model.lbLike
   | model.locrefLike
   | model.measurementLike
   | model.nameLike
   | model.nameLike.label
   | model.pbLike
   | model.rendLike
   | symbol)*
data.BETYPE =
  
  ## Bytes.
  "byte"
  | 
    ## Synchronized Multimedia Integration Language.
    "smil"
  | 
    ## MIDI clicks.
    "midi"
  | 
    ## MIDI machine code.
    "mmc"
  | 
    ## MIDI time code.
    "mtc"
  | 
    ## SMPTE 25 EBU.
    "smpte-25"
  | 
    ## SMPTE 24 Film Sync.
    "smpte-24"
  | 
    ## SMPTE 30 Drop.
    "smpte-df30"
  | 
    ## SMPTE 30 Non-Drop.
    "smpte-ndf30"
  | 
    ## SMPTE 29.97 Drop.
    "smpte-df29.97"
  | 
    ## SMPTE 29.97 Non-Drop.
    "smpte-ndf29.97"
  | 
    ## AES Time-code character format.
    "tcf"
  | 
    ## ISO 24-hour time format: HH:MM:SS.ss.
    "time"
data.COURSENUMBER = xsd:positiveInteger
data.DURATION.tablature =
  
  ## Fermata
  "F"
  | 
    ## Breve
    "B"
  | 
    ## Triplet breve
    "B3"
  | 
    ## Dotted triplet breve
    "B3."
  | 
    ## Semibreve (whole note)
    "W"
  | 
    ## Dotted semibreve (whole note)
    "W."
  | 
    ## Triplet semibreve (whole note)
    "W3"
  | 
    ## Dotted triplet semibreve (whole note)
    "W3."
  | 
    ## Minim (half note)
    "H"
  | 
    ## Dotted minim (half note)
    "H."
  | 
    ## Triplet minim (half note)
    "H3"
  | 
    ## Dotted triplet minim (half note)
    "H3."
  | 
    ## Crotchet (quarter note)
    "Q"
  | 
    ## Dotted crotchet (quarter note)
    "Q."
  | 
    ## Triplet crotchet (quarter note)
    "Q3"
  | 
    ## Dotted triplet crotchet (quarter note)
    "Q3."
  | 
    ## Quaver (eight note)
    "E"
  | 
    ## Dotted quaver (eight note)
    "E."
  | 
    ## Triplet quaver (eighth note)
    "E3"
  | 
    ## Dotted triplet quaver (eighth note)
    "E3."
  | 
    ## Semiquaver (sixteenth note)
    "S"
  | 
    ## Dotted semiquaver (sixteenth note)
    "S."
  | 
    ## Triplet semiquaver (sixteenth note)
    "S3"
  | 
    ## Dotted triplet semiquaver (sixteenth note)
    "S3."
  | 
    ## Demisemiquaver (thirtysecond note)
    "T"
  | 
    ## Dotted demisemiquaver (thirtysecond note)
    "T."
  | 
    ## Triplet demisemiquaver (thirtysecond note)
    "T3"
  | 
    ## Dotted triplet demisemiquaver (thirtysecond note)
    "T3."
  | 
    ## Hemidemisemiquaver (sixtyfourth note)
    "Y"
  | 
    ## Dotted hemidemisemiquaver (sixtyfourth note)
    "Y."
  | 
    ## Triplet hemidemisemiquaver (sixtyfourth note)
    "Y3"
  | 
    ## Dotted triplet hemidemisemiquaver (sixtyfourth note)
    "Y3."
  | 
    ## Semihemidemisemiquaver (one hundred and twentyeighth note)
    "Z"
  | 
    ## Dotted semihemidemisemiquaver (one hundred and twentyeighth note)
    "Z."
  | 
    ## Triplet semihemidemisemiquaver (one hundred and twentyeighth note)
    "Z3"
  | 
    ## Dotted triplet semihemidemisemiquaver (one hundred and twentyeighth note)
    "Z3."
data.COURSETUNING =
  
  ## E4 B3 G3 D3 A2 E2.
  "guitar.standard"
  | 
    ## E4 B3 G3 D3 A2 D2.
    "guitar.drop.D"
  | 
    ## D4 A3 F#3 D3 A2 D2.
    "guitar.open.D"
  | 
    ## D4 B3 G3 D3 G2 D2.
    "guitar.open.G"
  | 
    ## E4 C#4 A3 E3 A2 E2.
    "guitar.open.A"
  | 
    ## G4 D4 A3 F3 C3 G2.
    "lute.renaissance.6"
  | 
    ## F#4 D4 A3 F#3 D3 A2 G2 F#2 E2 D2 C#2 B1 A1.
    "lute.baroque.d.major"
  | 
    ## F4 D4 A3 F3 D3 A2 G2 F2 E2 D2 C2 B1 A1.
    "lute.baroque.d.minor"
att.notationType.attributes =
  att.notationType.attribute.notationtype,
  att.notationType.attribute.notationsubtype
att.notationType.attribute.notationtype =
  
  ## Contains classification of the notation contained or described by the element bearing this attribute.
  attribute notationtype { data.NOTATIONTYPE }?
att.notationType.attribute.notationsubtype =
  
  ## Provides any sub-classification of the notation contained or described by the element, additional to that given by its notationtype attribute.
  attribute notationsubtype { xsd:NMTOKEN }?
sch:pattern [
  id =
    "mei-att.notationType-notationsubtype-When_notationsubtype-constraint-rule-5"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@notationsubtype]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@notationtype"
      "An element with a notationsubtype attribute must have\x{a}" ~
      "                a notationtype attribute."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.accid.anl.attributes = empty
att.ambNote.anl.attributes = empty
att.annot.anl.attributes = empty
att.arpeg.anl.attributes = empty
att.artic.anl.attributes = empty
att.attacca.anl.attributes = empty
att.barLine.anl.attributes = empty
att.beam.anl.attributes = empty
att.beamSpan.anl.attributes = empty
att.beatRpt.anl.attributes = empty
att.bend.anl.attributes = empty
att.bracketSpan.anl.attributes = empty
att.breath.anl.attributes = empty
att.bTrem.anl.attributes = empty
att.caesura.anl.attributes = empty
att.chord.anl.attributes = att.chord.anl.cmn.attributes
att.chordDef.anl.attributes = empty
att.chordMember.anl.attributes = att.intervalHarmonic.attributes
att.clef.anl.attributes = empty
att.clefGrp.anl.attributes = empty
att.cpMark.anl.attributes = empty
att.curve.anl.attributes = empty
att.custos.anl.attributes = empty
att.mdiv.anl.attributes = empty
att.dir.anl.attributes = empty
att.dot.anl.attributes = empty
att.dynam.anl.attributes = empty
att.ending.anl.attributes = empty
att.episema.anl.attributes = empty
att.f.anl.attributes = empty
att.fermata.anl.attributes = empty
att.fing.anl.attributes = empty
att.fingGrp.anl.attributes = empty
att.fTrem.anl.attributes = empty
att.gliss.anl.attributes = empty
att.grpSym.anl.attributes = empty
att.hairpin.anl.attributes = empty
att.halfmRpt.anl.attributes = empty
att.harm.anl.attributes =
  att.intervalHarmonic.attributes, att.harm.anl.attribute.form
att.harm.anl.attribute.form =
  
  ## Indicates to what degree the harmonic label is supported by the notation.
  attribute form {
    
    ## The notation contains all the notes necessary for the harmonic label, e.g., the notes "D F♯ A" for the harmonic label "D".
    "explicit"
    | 
      ## The harmonic label relies on notes implied, but not actually present, in the notation, e.g., the notes "D F♯ C" for the harmonic label "D7". The note "A" is missing from the notation, but can be implied.
      "implied"
  }?
att.harmonicFunction.attributes = att.harmonicFunction.attribute.deg
att.harmonicFunction.attribute.deg =
  
  ## Captures scale degree information using Humdrum **deg syntax -- an optional indicator of melodic approach (^ = ascending approach, v = descending approach), a scale degree value (1 = tonic ... 7 = leading tone), and an optional indication of chromatic alteration, "1", "v7", "^1", or "v5+", for example. The amount of chromatic alternation is not indicated.
  attribute deg { data.SCALEDEGREE }?
att.harpPedal.anl.attributes = empty
att.hispanTick.anl.attributes = empty
att.instrDef.anl.attributes = empty
att.intervalHarmonic.attributes = att.intervalHarmonic.attribute.inth
att.intervalHarmonic.attribute.inth =
  
  ## Encodes the harmonic interval between pitches occurring at the same time.
  attribute inth {
    list { data.INTERVAL.HARMONIC+ }
  }?
att.intervalMelodic.attributes = att.intervalMelodic.attribute.intm
att.intervalMelodic.attribute.intm =
  
  ## Encodes the melodic interval from the previous pitch. The value may be a general directional indication (u, d, s, etc.), an indication of diatonic interval direction, quality, and size, or a precise numeric value in half steps.
  attribute intm { data.INTERVAL.MELODIC }?
att.keyAccid.anl.attributes = empty
att.keySig.anl.attributes =
  att.accidental.attributes,
  att.pitch.attributes,
  att.keySig.anl.attribute.mode
att.keySig.anl.attribute.mode =
  
  ## Indicates major, minor, or other tonality.
  attribute mode { data.MODE }?
att.keySigDefault.anl.attributes =
  att.keySigDefault.anl.attribute.key.accid,
  att.keySigDefault.anl.attribute.key.mode,
  att.keySigDefault.anl.attribute.key.pname
att.keySigDefault.anl.attribute.key.accid =
  
  ## Contains an accidental for the tonic key, if one is required, e.g., if key.pname equals 'c' and key.accid equals 's', then a tonic of C# is indicated.
  attribute key.accid { data.ACCIDENTAL.GESTURAL }?
att.keySigDefault.anl.attribute.key.mode =
  
  ## Indicates major, minor, or other tonality.
  attribute key.mode { data.MODE }?
att.keySigDefault.anl.attribute.key.pname =
  
  ## Holds the pitch name of the tonic key, e.g. 'c' for the key of C.
  attribute key.pname { data.PITCHNAME }?
att.layer.anl.attributes = empty
att.layerDef.anl.attributes = empty
att.ligature.anl.attributes = empty
att.line.anl.attributes = empty
att.liquescent.anl.attributes = empty
att.lv.anl.attributes = empty
att.measure.anl.attributes = att.joined.attributes
att.melodicFunction.attributes = att.melodicFunction.attribute.mfunc
att.melodicFunction.attribute.mfunc =
  
  ## Describes melodic function using Humdrum **embel syntax.
  attribute mfunc { data.MELODICFUNCTION }?
att.mensur.anl.attributes = empty
att.meterSig.anl.attributes = empty
att.meterSigGrp.anl.attributes = empty
att.midi.anl.attributes = empty
att.mordent.anl.attributes = empty
att.mRest.anl.attributes = att.fermataPresent.attributes
att.mRpt.anl.attributes = empty
att.mRpt2.anl.attributes = empty
att.mSpace.anl.attributes = att.fermataPresent.attributes
att.multiRest.anl.attributes = empty
att.multiRpt.anl.attributes = empty
att.nc.anl.attributes =
  att.harmonicFunction.attributes,
  att.intervalMelodic.attributes,
  att.melodicFunction.attributes,
  att.pitchClass.attributes,
  att.solfa.attributes
att.ncGrp.anl.attributes = empty
att.neume.anl.attributes = empty
att.note.anl.attributes =
  att.accidental.attributes,
  att.articulation.attributes,
  att.harmonicFunction.attributes,
  att.intervalMelodic.attributes,
  att.melodicFunction.attributes,
  att.note.anl.cmn.attributes,
  att.note.anl.mensural.attributes,
  att.pitchClass.attributes,
  att.solfa.attributes
att.octave.anl.attributes = empty
att.ornam.anl.attributes = empty
att.oriscus.anl.attributes = empty
att.ossia.anl.attributes = empty
att.pad.anl.attributes = empty
att.part.anl.attributes = empty
att.parts.anl.attributes = empty
att.pb.anl.attributes = empty
att.pedal.anl.attributes = empty
att.phrase.anl.attributes = att.joined.attributes
att.pitchClass.attributes = att.pitchClass.attribute.pclass
att.pitchClass.attribute.pclass =
  
  ## Holds pitch class information.
  attribute pclass { data.PITCHCLASS }?
att.proport.anl.attributes = empty
att.quilisma.anl.attributes = empty
att.rdg.anl.attributes = empty
att.refrain.anl.attributes = empty
att.reh.anl.attributes = empty
att.rest.anl.attributes = att.rest.anl.cmn.attributes
att.sb.anl.attributes = empty
att.score.anl.attributes = empty
att.scoreDef.anl.attributes = att.keySigDefault.anl.attributes
att.section.anl.attributes = empty
att.slur.anl.attributes = att.joined.attributes
att.signifLet.anl.attributes = empty
att.solfa.attributes = att.solfa.attribute.psolfa
att.solfa.attribute.psolfa =
  
  ## Contains sol-fa designation, e.g., do, re, mi, etc., in either a fixed or movable Do system.
  attribute psolfa { xsd:NMTOKEN }?
att.sp.anl.attributes = empty
att.space.anl.attributes = att.space.anl.cmn.attributes
att.staff.anl.attributes = empty
att.staffDef.anl.attributes = att.keySigDefault.anl.attributes
att.staffGrp.anl.attributes = empty
att.stageDir.anl.attributes = empty
att.strophicus.anl.attributes = empty
att.syl.anl.attributes = empty
att.syllable.anl.attributes = empty
att.symbol.anl.attributes = empty
att.tempo.anl.attributes = empty
att.tie.anl.attributes = empty
att.trill.anl.attributes = empty
att.tuplet.anl.attributes = empty
att.tupletSpan.anl.attributes = att.tuplet.anl.attributes
att.turn.anl.attributes = empty
att.verse.anl.attributes = empty
att.volta.anl.attributes = empty
att.arpeg.log.attributes =
  att.controlEvent.attributes,
  att.startId.attributes,
  att.arpeg.log.attribute.order
att.arpeg.log.attribute.order =
  
  ## Describes the direction in which an arpeggio is to be performed.
  attribute order {
    
    ## Lowest to highest pitch.
    "up"
    | 
      ## Highest to lowest pitch.
      "down"
    | 
      ## Non-arpeggiated style (usually rendered with a preceding bracket instead of a wavy line).
      "nonarp"
  }?
att.beam.log.attributes =
  att.event.attributes, att.beamedWith.attributes
att.beamedWith.attributes = att.beamedWith.attribute.beam.with
att.beamedWith.attribute.beam.with =
  
  ## In the case of cross-staff beams, the beam.with attribute is used to indicate which staff the beam is connected to; that is, the staff above or the staff below.
  attribute beam.with { data.OTHERSTAFF }?
att.beaming.log.attributes =
  att.beaming.log.attribute.beam.group,
  att.beaming.log.attribute.beam.rests
att.beaming.log.attribute.beam.group =
  
  ## Provides an example of how automated beaming (including secondary beams) is to be performed.
  attribute beam.group { xsd:string }?
att.beaming.log.attribute.beam.rests =
  
  ## Indicates whether automatically-drawn beams should include rests shorter than a quarter note duration.
  attribute beam.rests { data.BOOLEAN }?
att.beamPresent.attributes = att.beamPresent.attribute.beam
att.beamPresent.attribute.beam =
  
  ## Indicates that this event is "under a beam".
  attribute beam {
    list { data.BEAM+ }
  }?
att.beamRend.attributes =
  att.beamRend.attribute.form,
  att.beamRend.attribute.place,
  att.beamRend.attribute.slash,
  att.beamRend.attribute.slope
att.beamRend.attribute.form =
  
  ## Captures whether a beam is "feathered" and in which direction.
  attribute form {
    
    ## (accelerando) indicates that the secondary beams get progressively closer together toward the end of the beam.
    "acc"
    | 
      ## (mixed acc and rit) for beams that are "feathered" in both directions.
      "mixed"
    | 
      ## (ritardando) means that the secondary beams become progressively more distant toward the end of the beam.
      "rit"
    | 
      ## (normal) indicates that the secondary beams are equidistant along the course of the beam.
      "norm"
  }?
att.beamRend.attribute.place =
  
  ## Records the placement of the beam relative to the events it affects.
  attribute place { data.BEAMPLACE }?
sch:pattern [
  id = "mei-att.beamRend-place-check_beam_place-constraint-rule-6"
  "\x{a}" ~
  "      "
  sch:rule [
    context =
      "mei:beam[@place eq 'mixed' and not(descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'][@staff != ./@staff] or descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'][@staff != ancestor::mei:staff/@n])]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "count(descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'][@stem.dir]) = count(descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'])"
      "Stem direction must be specified for all notes and chords under the\x{a}" ~
      "                beam."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "count(distinct-values(descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord']/@stem.dir)) > 1"
      'Opposing stem directions are required for a beam with @place="mixed".'
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "      "
  sch:rule [
    context =
      "mei:beam[@place eq 'mixed' and (descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'][@staff != ./@staff] or descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'][@staff != ancestor::mei:staff/@n])                 and count(descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'][@stem.dir]) = count(descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord'])]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "count(distinct-values(descendant::mei:*[local-name() eq 'note' or local-name() eq 'chord']/@stem.dir)) > 1"
      'Opposing stem directions are required for a beam with @place="mixed".'
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.beamRend.attribute.slash =
  
  ## Indicates presence of slash through the beam.
  attribute slash { data.BOOLEAN }?
att.beamRend.attribute.slope =
  
  ## Records the slope of the beam.
  attribute slope { xsd:decimal }?
att.beamSecondary.attributes = att.beamSecondary.attribute.breaksec
att.beamSecondary.attribute.breaksec =
  
  ## Presence of this attribute indicates that the secondary beam should be broken following this note/chord. The value of the attribute records the number of beams which should remain unbroken.
  attribute breaksec { xsd:positiveInteger }?
att.beamSpan.log.attributes =
  att.controlEvent.attributes,
  att.beamedWith.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.beatRpt.log.attributes =
  att.event.attributes, att.beatRpt.log.attribute.beatdef
att.beatRpt.log.attribute.beatdef =
  
  ## Indicates the performed duration represented by the beatRpt symbol; expressed in time signature denominator units.
  attribute beatdef {
    xsd:decimal { pattern = "\d+(\.\d+)?" }
  }?
att.bend.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.bracketSpan.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.breath.log.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.staffIdent.attributes,
  att.startId.attributes,
  att.timestamp.logical.attributes
att.bTrem.log.attributes =
  att.event.attributes,
  att.augmentDots.attributes,
  att.duration.logical.attributes,
  att.numbered.attributes,
  att.bTrem.log.attribute.form
att.bTrem.log.attribute.form =
  
  ## Indicates whether the tremolo is measured or unmeasured.
  attribute form {
    
    ## Measured tremolo.
    "meas"
    | 
      ## Unmeasured tremolo.
      "unmeas"
  }?
att.chord.anl.cmn.attributes =
  att.beamPresent.attributes,
  att.fermataPresent.attributes,
  att.lvPresent.attributes,
  att.ornamPresent.attributes,
  att.slurPresent.attributes,
  att.tiePresent.attributes,
  att.tupletPresent.attributes
att.chord.ges.cmn.attributes = empty
att.chord.log.cmn.attributes = att.graced.attributes
att.chord.vis.cmn.attributes = att.beamSecondary.attributes
att.cutout.attributes = att.cutout.attribute.cutout
att.cutout.attribute.cutout =
  
  ## "Cut-out" style.
  attribute cutout {
    
    ## The staff lines should not be drawn.
    "cutout"
  }?
att.mNum.anl.attributes = empty
att.mNum.ges.attributes = empty
att.mNum.log.attributes = empty
att.mNum.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.expandable.attributes = att.expandable.attribute.expand
att.expandable.attribute.expand =
  
  ## Indicates whether to render a repeat symbol or the source material to which it refers. A value of 'true' renders the source material, while 'false' displays the repeat symbol.
  attribute expand { data.BOOLEAN }?
att.fermata.log.attributes =
  att.controlEvent.attributes, att.startEndId.attributes
att.fTrem.log.attributes =
  att.event.attributes,
  att.augmentDots.attributes,
  att.duration.logical.attributes,
  att.fTrem.log.attribute.form
att.fTrem.log.attribute.form =
  
  ## Describes the style of the tremolo.
  attribute form {
    
    ## Measured tremolo.
    "meas"
    | 
      ## Unmeasured tremolo.
      "unmeas"
  }?
att.glissPresent.attributes = att.glissPresent.attribute.gliss
att.glissPresent.attribute.gliss =
  [
    a:documentation [
      "Indicates that this element participates in a glissando. If visual information about the glissando needs to be recorded, then a "
      ns1:code [ "<gliss>" ]
      " element should be employed instead."
    ]
  ]
  attribute gliss { data.GLISSANDO }?
att.gliss.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.graced.attributes =
  att.graced.attribute.grace, att.graced.attribute.grace.time
att.graced.attribute.grace =
  
  ## Marks a note or chord as a "grace" (without a definite performed duration) and records from which other note/chord it should "steal" time.
  attribute grace { data.GRACE }?
att.graced.attribute.grace.time =
  
  ## Records the amount of time to be "stolen" from a non-grace note/chord.
  attribute grace.time { data.PERCENT }?
att.graceGrp.anl.attributes = empty
att.graceGrp.ges.attributes = empty
att.graceGrp.log.attributes =
  att.event.attributes,
  att.graced.attributes,
  att.graceGrp.log.attribute.attach
att.graceGrp.log.attribute.attach =
  
  ## Records whether the grace note group is attached to the following event or to the preceding one. The usual name for the latter is "Nachschlag".
  attribute attach {
    
    ## Attached to the preceding event.
    "pre"
    | 
      ## Attached to the following event.
      "post"
    | 
      ## Attachment is ambiguous.
      "unknown"
  }?
att.graceGrp.vis.attributes = att.color.attributes
att.hairpin.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes,
  att.hairpin.log.attribute.form,
  att.hairpin.log.attribute.niente
att.hairpin.log.attribute.form =
  
  ## Captures the visual rendition and function of the hairpin; that is, whether it indicates an increase or a decrease in volume.
  attribute form {
    
    ## Crescendo; i.e., louder.
    "cres"
    | 
      ## Diminuendo; i.e., softer.
      "dim"
  }
att.hairpin.log.attribute.niente =
  
  ## Indicates that the hairpin starts from or ends in silence. Often rendered as a small circle attached to the closed end of the hairpin. See Gould, p. 108.
  attribute niente { data.BOOLEAN }?
att.halfmRpt.log.attributes =
  att.event.attributes, att.duration.logical.attributes
att.harpPedal.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.harpPedal.log.attribute.c,
  att.harpPedal.log.attribute.d,
  att.harpPedal.log.attribute.e,
  att.harpPedal.log.attribute.f,
  att.harpPedal.log.attribute.g,
  att.harpPedal.log.attribute.a,
  att.harpPedal.log.attribute.b
att.harpPedal.log.attribute.c =
  
  ## Indicates the pedal setting for the harp's C strings.
  [ a:defaultValue = "n" ]
  attribute c {
    
    ## Flat.
    "f"
    | 
      ## Natural.
      "n"
    | 
      ## Sharp.
      "s"
  }?
att.harpPedal.log.attribute.d =
  
  ## Indicates the pedal setting for the harp's D strings.
  [ a:defaultValue = "n" ]
  attribute d {
    
    ## Flat.
    "f"
    | 
      ## Natural.
      "n"
    | 
      ## Sharp.
      "s"
  }?
att.harpPedal.log.attribute.e =
  
  ## Indicates the pedal setting for the harp's E strings.
  [ a:defaultValue = "n" ]
  attribute e {
    
    ## Flat.
    "f"
    | 
      ## Natural.
      "n"
    | 
      ## Sharp.
      "s"
  }?
att.harpPedal.log.attribute.f =
  
  ## Indicates the pedal setting for the harp's F strings.
  [ a:defaultValue = "n" ]
  attribute f {
    
    ## Flat.
    "f"
    | 
      ## Natural.
      "n"
    | 
      ## Sharp.
      "s"
  }?
att.harpPedal.log.attribute.g =
  
  ## Indicates the pedal setting for the harp's G strings.
  [ a:defaultValue = "n" ]
  attribute g {
    
    ## Flat.
    "f"
    | 
      ## Natural.
      "n"
    | 
      ## Sharp.
      "s"
  }?
att.harpPedal.log.attribute.a =
  
  ## Indicates the pedal setting for the harp's A strings.
  [ a:defaultValue = "n" ]
  attribute a {
    
    ## Flat.
    "f"
    | 
      ## Natural.
      "n"
    | 
      ## Sharp.
      "s"
  }?
att.harpPedal.log.attribute.b =
  
  ## Indicates the pedal setting for the harp's B strings.
  [ a:defaultValue = "n" ]
  attribute b {
    
    ## Flat.
    "f"
    | 
      ## Natural.
      "n"
    | 
      ## Sharp.
      "s"
  }?
att.layerDef.log.cmn.attributes = att.beaming.log.attributes
att.lv.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.lvPresent.attributes = att.lvPresent.attribute.lv
att.lvPresent.attribute.lv =
  
  ## Indicates the attachment of an l.v. (laissez vibrer) sign to this element.
  attribute lv { data.BOOLEAN }?
att.measure.log.attributes =
  att.alignment.attributes,
  att.meterConformance.bar.attributes,
  att.measure.log.attribute.left,
  att.measure.log.attribute.right
att.measure.log.attribute.left =
  
  ## Indicates the visual rendition of the left bar line. It is present here only for facilitation of translation from legacy encodings which use it. Usually, it can be safely ignored.
  attribute left { data.BARRENDITION }?
att.measure.log.attribute.right =
  
  ## Indicates the function of the right bar line and is structurally important.
  attribute right { data.BARRENDITION }?
att.meterSigGrp.log.attributes = att.meterSigGrp.log.attribute.func
att.meterSigGrp.log.attribute.func =
  
  ## Function of the meter signature group.
  attribute func {
    
    ## Meter signatures apply to alternating measures.
    "alternating"
    | 
      ## Meter signatures are interchangeable, e.g. 3/4 and 6/8.
      "interchanging"
    | 
      ## Meter signatures with different unit values are used to express a complex metrical pattern that is not expressible using traditional means, such as 2/4+1/8.
      "mixed"
  }
att.mRest.log.attributes =
  att.cue.attributes,
  att.duration.additive.attributes,
  att.event.attributes
att.mRpt.log.attributes = att.event.attributes
att.mRpt2.log.attributes = att.event.attributes
att.mSpace.log.attributes =
  att.duration.additive.attributes, att.event.attributes
att.multiRest.log.attributes =
  att.event.attributes, att.numbered.attributes
att.multiRpt.log.attributes =
  att.event.attributes, att.numbered.attributes
att.note.anl.cmn.attributes =
  att.beamPresent.attributes,
  att.fermataPresent.attributes,
  att.glissPresent.attributes,
  att.lvPresent.attributes,
  att.ornamPresent.attributes,
  att.slurPresent.attributes,
  att.sylText.attributes,
  att.tiePresent.attributes,
  att.tupletPresent.attributes
att.note.log.cmn.attributes = att.graced.attributes
att.note.vis.cmn.attributes = att.beamSecondary.attributes
att.numbered.attributes = att.numbered.attribute.num
att.numbered.attribute.num =
  
  ## Records a number or count accompanying a notational feature.
  attribute num { xsd:positiveInteger }?
att.numberPlacement.attributes =
  att.numberPlacement.attribute.num.place,
  att.numberPlacement.attribute.num.visible
att.numberPlacement.attribute.num.place =
  
  ## States where the tuplet number will be placed in relation to the note heads.
  attribute num.place { data.STAFFREL.basic }?
att.numberPlacement.attribute.num.visible =
  
  ## Determines if the tuplet number is visible.
  attribute num.visible { data.BOOLEAN }?
att.octave.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.octaveDisplacement.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes,
  att.octave.log.attribute.coll
att.octave.log.attribute.coll =
  
  ## Indicates whether the octave displacement should be performed simultaneously with the written notes, i.e., "coll' ottava". Unlike other octave signs which are indicated by broken lines, coll' ottava typically uses an unbroken line or a series of longer broken lines, ending with a short vertical stroke. See Read, p. 47-48.
  attribute coll {
    
    ## Coll' ottava (with the octave).
    "coll"
  }?
att.ossia.log.attributes = empty
att.pedal.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes,
  att.pedal.log.attribute.dir,
  att.pedal.log.attribute.func
att.pedal.log.attribute.dir =
  
  ## Records the position of the piano damper pedal.
  attribute dir {
    
    ## Depress the pedal.
    "down"
    | 
      ## Release the pedal.
      "up"
    | 
      ## Half pedal.
      "half"
    | 
      ## Release then immediately depress the pedal.
      "bounce"
  }
att.pedal.log.attribute.func =
  [
    a:documentation [
      "Indicates the function of the depressed pedal, but not necessarily the text associated with its use. Use the "
      ns1:code [ "<dir>" ]
      " element for such text.\x{a}" ~
      "Suggested values include: 1] sustain; 2] soft; 3] sostenuto; 4] silent"
    ]
  ]
  attribute func {
    
    ## The sustain pedal, also referred to as the "damper" pedal, allows the piano strings to vibrate sympathetically with the struck strings. It is the right-most and the most frequently used pedal on modern pianos.
    "sustain"
    | 
      ## The soft pedal, sometimes called the "una corda", "piano", or "half-blow" pedal, reduces the volume and modifies the timbre of the piano. On the modern piano, it is the left-most pedal.
      "soft"
    | 
      ## The sostenuto or tone-sustaining pedal allows notes already undamped to continue to ring while other notes are damped normally; that is, on their release by the fingers. This is usually the center pedal of the modern piano.
      "sostenuto"
    | 
      ## The silent or practice pedal mutes the volume of the piano so that one may practice quietly. It is sometimes a replacement for the sostenuto pedal, especially on an upright or vertical instrument.
      "silent"
    | xsd:NMTOKEN
  }?
att.phrase.vis.cmn.attributes =
  att.curvature.attributes, att.curveRend.attributes
att.pianoPedals.attributes = att.pianoPedals.attribute.pedal.style
att.pianoPedals.attribute.pedal.style =
  
  ## Determines whether piano pedal marks should be rendered as lines or as terms.
  attribute pedal.style {
    
    ## Continuous line with start and end positions rendered by vertical bars and bounces shown by upward-pointing "blips".
    "line"
    | 
      ## Pedal down and half pedal rendered with "Ped.", pedal up rendered by "*", pedal "bounce" rendered with "* Ped.".
      "pedstar"
    | 
      ## Pedal up and down indications same as with "pedstar", but bounce is rendered with "Ped." only.
      "altpedstar"
  }?
att.reh.log.attributes =
  att.alignment.attributes,
  att.partIdent.attributes,
  att.staffIdent.attributes,
  att.startId.attributes,
  att.timestamp.logical.attributes,
  att.timestamp.gestural.attributes
att.rehearsal.attributes = att.rehearsal.attribute.reh.enclose
att.rehearsal.attribute.reh.enclose =
  
  ## Describes the enclosing shape for rehearsal marks.
  attribute reh.enclose {
    
    ## Enclosed by box.
    "box"
    | 
      ## Enclosed by circle.
      "circle"
    | 
      ## No enclosing shape.
      "none"
  }?
att.rest.anl.cmn.attributes =
  att.beamPresent.attributes,
  att.fermataPresent.attributes,
  att.tupletPresent.attributes
att.rest.log.cmn.attributes = empty
att.rest.vis.cmn.attributes = att.beamSecondary.attributes
att.scoreDef.log.cmn.attributes = att.beaming.log.attributes
att.scoreDef.vis.cmn.attributes =
  att.beaming.vis.attributes,
  att.pianoPedals.attributes,
  att.rehearsal.attributes,
  att.slurRend.attributes,
  att.tieRend.attributes,
  att.scoreDef.vis.cmn.attribute.grid.show
att.scoreDef.vis.cmn.attribute.grid.show =
  
  ## Determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
att.slur.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.slurRend.attributes =
  att.slurRend.attribute.slur.lform, att.slurRend.attribute.slur.lwidth
att.slurRend.attribute.slur.lform =
  
  ##
  attribute slur.lform { data.LINEFORM }?
att.slurRend.attribute.slur.lwidth =
  
  ##
  attribute slur.lwidth { data.LINEWIDTH }?
att.space.anl.cmn.attributes =
  att.beamPresent.attributes,
  att.fermataPresent.attributes,
  att.tupletPresent.attributes
att.staffDef.log.cmn.attributes = att.beaming.log.attributes
att.staffDef.vis.cmn.attributes =
  att.beaming.vis.attributes,
  att.pianoPedals.attributes,
  att.rehearsal.attributes,
  att.slurRend.attributes,
  att.tieRend.attributes
att.stems.cmn.attributes = att.stems.cmn.attribute.stem.with
att.stems.cmn.attribute.stem.with =
  
  ## Contains an indication of which staff a note or chord that logically belongs to the current staff should be visually placed on; that is, the one above or the one below.
  attribute stem.with { data.OTHERSTAFF }?
att.tie.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.tieRend.attributes =
  att.tieRend.attribute.tie.lform, att.tieRend.attribute.tie.lwidth
att.tieRend.attribute.tie.lform =
  
  ##
  attribute tie.lform { data.LINEFORM }?
att.tieRend.attribute.tie.lwidth =
  
  ##
  attribute tie.lwidth { data.LINEWIDTH }?
att.tremMeasured.attributes = att.tremMeasured.attribute.unitdur
att.tremMeasured.attribute.unitdur =
  
  ## The performed duration of an individual note in a measured tremolo.
  attribute unitdur { data.DURATION.cmn }?
att.tuplet.log.attributes =
  att.beamedWith.attributes,
  att.duration.additive.attributes,
  att.duration.ratio.attributes,
  att.event.attributes,
  att.startEndId.attributes
att.tupletSpan.log.attributes =
  att.beamedWith.attributes,
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.duration.ratio.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
model.controlEventLike.cmn =
  arpeg
  | attacca
  | beamSpan
  | bracketSpan
  | breath
  | fermata
  | hairpin
  | harpPedal
  | lv
  | octave
  | pedal
  | reh
  | slur
  | tie
  | tupletSpan
  | model.ornamentLike.cmn
  | pitchInflection
model.controlEventLike.cmn_alternation =
  arpeg
  | attacca
  | beamSpan
  | bracketSpan
  | breath
  | fermata
  | hairpin
  | harpPedal
  | lv
  | octave
  | pedal
  | reh
  | slur
  | tie
  | tupletSpan
  | model.ornamentLike.cmn_alternation
  | pitchInflection
model.controlEventLike.cmn_sequence =
  arpeg,
  attacca,
  beamSpan,
  bracketSpan,
  breath,
  fermata,
  hairpin,
  harpPedal,
  lv,
  octave,
  pedal,
  reh,
  slur,
  tie,
  tupletSpan,
  model.ornamentLike.cmn_sequence,
  pitchInflection
model.controlEventLike.cmn_sequenceOptional =
  arpeg?,
  attacca?,
  beamSpan?,
  bracketSpan?,
  breath?,
  fermata?,
  hairpin?,
  harpPedal?,
  lv?,
  octave?,
  pedal?,
  reh?,
  slur?,
  tie?,
  tupletSpan?,
  model.ornamentLike.cmn_sequenceOptional?,
  pitchInflection?
model.controlEventLike.cmn_sequenceOptionalRepeatable =
  arpeg*,
  attacca*,
  beamSpan*,
  bracketSpan*,
  breath*,
  fermata*,
  hairpin*,
  harpPedal*,
  lv*,
  octave*,
  pedal*,
  reh*,
  slur*,
  tie*,
  tupletSpan*,
  model.ornamentLike.cmn_sequenceOptionalRepeatable*,
  pitchInflection*
model.controlEventLike.cmn_sequenceRepeatable =
  arpeg+,
  attacca+,
  beamSpan+,
  bracketSpan+,
  breath+,
  fermata+,
  hairpin+,
  harpPedal+,
  lv+,
  octave+,
  pedal+,
  reh+,
  slur+,
  tie+,
  tupletSpan+,
  model.ornamentLike.cmn_sequenceRepeatable+,
  pitchInflection+
model.eventLike.cmn =
  beam | beatRpt | bTrem | fTrem | graceGrp | halfmRpt | tuplet
model.eventLike.cmn_alternation =
  beam | beatRpt | bTrem | fTrem | graceGrp | halfmRpt | tuplet
model.eventLike.cmn_sequence =
  beam, beatRpt, bTrem, fTrem, graceGrp, halfmRpt, tuplet
model.eventLike.cmn_sequenceOptional =
  beam?, beatRpt?, bTrem?, fTrem?, graceGrp?, halfmRpt?, tuplet?
model.eventLike.cmn_sequenceOptionalRepeatable =
  beam*, beatRpt*, bTrem*, fTrem*, graceGrp*, halfmRpt*, tuplet*
model.eventLike.cmn_sequenceRepeatable =
  beam+, beatRpt+, bTrem+, fTrem+, graceGrp+, halfmRpt+, tuplet+
model.eventLike.measureFilling =
  mRest | mRpt | mRpt2 | mSpace | multiRest | multiRpt
model.eventLike.measureFilling_alternation =
  mRest | mRpt | mRpt2 | mSpace | multiRest | multiRpt
model.eventLike.measureFilling_sequence =
  mRest, mRpt, mRpt2, mSpace, multiRest, multiRpt
model.eventLike.measureFilling_sequenceOptional =
  mRest?, mRpt?, mRpt2?, mSpace?, multiRest?, multiRpt?
model.eventLike.measureFilling_sequenceOptionalRepeatable =
  mRest*, mRpt*, mRpt2*, mSpace*, multiRest*, multiRpt*
model.eventLike.measureFilling_sequenceRepeatable =
  mRest+, mRpt+, mRpt2+, mSpace+, multiRest+, multiRpt+
model.layerPart.cmn =
  model.eventLike.cmn | model.eventLike.measureFilling
model.measureLike = measure
model.measureLike_alternation = measure
model.measureLike_sequence = measure
model.measureLike_sequenceOptional = measure?
model.measureLike_sequenceOptionalRepeatable = measure*
model.measureLike_sequenceRepeatable = measure+
model.measurePart =
  model.controlEventLike.cmn
  | model.ossiaLike
  | model.midiLike
  | model.controlEventLike
  | model.staffLike
  | tabBarre
  | connectingLine
model.ossiaLike = ossia
model.sectionPart.cmn = model.measureLike
arpeg =
  
  ## (arpeggiation) – Indicates that the notes of a chord are to be performed successively rather than simultaneously, usually from lowest to highest. Sometimes called a "roll".
  element arpeg {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.arpeg.log.attributes,
    att.arpeg.vis.attributes,
    att.arpeg.ges.attributes,
    att.arpeg.anl.attributes,
    empty
  }
attacca =
  
  ## An instruction to begin the next section or movement of a composition without pause.
  element attacca {
    ((text
      | model.textPhraseLike.limited
      | model.graphicPrimitiveLike
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-attacca-attacca_start-type_attributes_required-constraint-rule-8"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:attacca[not(ancestor::mei:syllable)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.attacca.log.attributes,
    att.attacca.vis.attributes,
    att.attacca.ges.attributes,
    att.attacca.anl.attributes,
    empty
  }
beam =
  
  ## A container for a series of explicitly beamed events that begins and ends entirely within a measure.
  element beam {
    ((model.eventLike
      | model.eventLike.cmn
      | model.appLike
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id = "mei-beam-When_not_copyof_beam_content-constraint-rule-9"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:beam[not(@copyof)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::*[local-name()='note' or local-name()='rest' or               local-name()='chord' or local-name()='space']) > 1"
             "A beam without a copyof attribute must have at least 2 note, rest, chord, or space\x{a}" ~
             "            descendants."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.beam.log.attributes,
    att.beam.vis.attributes,
    att.beam.ges.attributes,
    att.beam.anl.attributes,
    empty
  }
beamSpan =
  
  ## (beam span) – Alternative element for explicitly encoding beams, particularly those which extend across bar lines.
  element beamSpan {
    empty
    >> sch:pattern [
         id =
           "mei-beamSpan-beamspan_start-_and_end-type_attributes_required-constraint-rule-10"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:beamSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.beamSpan.log.attributes,
    att.beamSpan.vis.attributes,
    att.beamSpan.ges.attributes,
    att.beamSpan.anl.attributes,
    empty
  }
beatRpt =
  
  ## (beat repeat) – An indication that material on a preceding beat should be repeated.
  element beatRpt {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.beatRpt.log.attributes,
    att.beatRpt.vis.attributes,
    att.beatRpt.ges.attributes,
    att.beatRpt.anl.attributes,
    att.plist.attributes,
    att.targetEval.attributes,
    empty
  }
bend =
  
  ## A variation in pitch (often micro-tonal) upwards or downwards during the course of a note.
  element bend {
    empty
    >> sch:pattern [
         id =
           "mei-bend-bend_start-_and_end-type_attributes_required-constraint-rule-11"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:bend"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.bend.log.attributes,
    att.bend.vis.attributes,
    att.bend.ges.attributes,
    att.bend.anl.attributes,
    empty
  }
bracketSpan =
  
  ## Marks a sequence of notational events grouped by a bracket.
  element bracketSpan {
    ((text | model.textPhraseLike.limited)*)
    >> sch:pattern [
         id =
           "mei-bracketSpan-bracketSpan_start-_and_end-type_attributes_required-constraint-rule-12"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:bracketSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bracketSpan.log.attributes,
    att.bracketSpan.vis.attributes,
    att.bracketSpan.ges.attributes,
    att.bracketSpan.anl.attributes,
    att.facsimile.attributes,
    
    ## Describes the function of the bracketed event sequence.
    ## Suggested values include: 1] coloration; 2] cross-rhythm; 3] ligature
    attribute func {
      
      ## Represents coloration in the mensural notation source material.
      "coloration"
      | 
        ## Marks a sequence which does not match the current meter.
        "cross-rhythm"
      | 
        ## Represents a ligature in the mensural notation source material.
        "ligature"
      | xsd:NMTOKENS
    },
    empty
  }
breath =
  
  ## (breath mark) – An indication of a point at which the performer on an instrument requiring breath (including the voice) may breathe.
  element breath {
    empty
    >> sch:pattern [
         id =
           "mei-breath-breath_start-type_attributes_required-constraint-rule-13"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:breath"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.breath.log.attributes,
    att.breath.vis.attributes,
    att.breath.ges.attributes,
    att.breath.anl.attributes,
    empty
  }
bTrem =
  
  ## (bowed tremolo) – A rapid alternation on a single pitch or chord.
  element bTrem {
    (chord | note),
    att.common.attributes,
    att.facsimile.attributes,
    att.bTrem.log.attributes,
    att.bTrem.vis.attributes,
    att.bTrem.ges.attributes,
    att.bTrem.anl.attributes,
    empty
  }
fermata =
  
  ## An indication placed over a note or rest to indicate that it should be held longer than its written value. May also occur over a bar line to indicate the end of a phrase or section. Sometimes called a 'hold' or 'pause'.
  element fermata {
    empty
    >> sch:pattern [
         id =
           "mei-fermata-fermata_start-type_attributes_required-constraint-rule-14"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:fermata"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.fermata.log.attributes,
    att.fermata.vis.attributes,
    att.fermata.ges.attributes,
    att.fermata.anl.attributes,
    empty
  }
fTrem =
  
  ## (fingered tremolo) – A rapid alternation between a pair of notes (or chords or perhaps between a note and a chord) that are (usually) farther apart than a major second.
  element fTrem {
    ((chord, (chord | note))
     | (note, (chord | note))),
    att.common.attributes,
    att.facsimile.attributes,
    att.fTrem.log.attributes,
    att.fTrem.vis.attributes,
    att.fTrem.ges.attributes,
    att.fTrem.anl.attributes,
    empty
  }
gliss =
  
  ## (glissando) – A continuous or sliding movement from one pitch to another, usually indicated by a straight or wavy line.
  element gliss {
    ((text | model.textPhraseLike.limited)*)
    >> sch:pattern [
         id =
           "mei-gliss-gliss_start-_and_end-type_attributes_required-constraint-rule-15"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:gliss"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.gliss.tablature.attributes,
    att.dirmark.tablature.attributes,
    att.common.attributes,
    att.facsimile.attributes,
    att.gliss.log.attributes,
    att.gliss.vis.attributes,
    att.gliss.ges.attributes,
    att.gliss.anl.attributes,
    empty
  }
graceGrp =
  
  ## A container for a sequence of grace notes.
  element graceGrp {
    ((model.eventLike
      | model.eventLike.cmn
      | model.appLike
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-graceGrp-When_not_copyof_graceGrp_content-constraint-rule-16"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:graceGrp[not(@copyof)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::*[local-name()='note' or local-name()='rest' or               local-name()='chord' or local-name()='space']) > 1"
             "A graceGrp without a copyof attribute must have at least 2 note, rest, chord, or space\x{a}" ~
             "            descendants."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-graceGrp-When_graced-constraint-rule-17"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:graceGrp[@grace]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(descendant::mei:*[@grace])"
             "The grace attribute is not allowed on\x{a}" ~
             "            descendants of a graceGrp with a grace attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.graceGrp.log.attributes,
    att.graceGrp.vis.attributes,
    att.graceGrp.ges.attributes,
    att.graceGrp.anl.attributes,
    empty
  }
hairpin =
  
  ## Indicates continuous dynamics expressed on the score as wedge-shaped graphics, e.g. < and >.
  element hairpin {
    empty
    >> sch:pattern [
         id =
           "mei-hairpin-hairpin_start-_and_end-type_attributes_required-constraint-rule-18"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:hairpin"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.hairpin.log.attributes,
    att.hairpin.vis.attributes,
    att.hairpin.ges.attributes,
    att.hairpin.anl.attributes,
    empty
  }
halfmRpt =
  
  ## (half-measure repeat) – A half-measure repeat in any meter.
  element halfmRpt {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.halfmRpt.log.attributes,
    att.halfmRpt.vis.attributes,
    att.halfmRpt.ges.attributes,
    att.halfmRpt.anl.attributes,
    empty
  }
harpPedal =
  
  ## (harp pedal) – Harp pedal diagram.
  element harpPedal {
    empty
    >> sch:pattern [
         id =
           "mei-harpPedal-harpPedal_start-type_attributes_required-constraint-rule-19"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:harpPedal"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.harpPedal.log.attributes,
    att.harpPedal.vis.attributes,
    att.harpPedal.ges.attributes,
    att.harpPedal.anl.attributes,
    empty
  }
lv =
  
  ## A "tie-like" indication that a note should ring beyond its written duration.
  element lv {
    (curve*)
    >> sch:pattern [
         id =
           "mei-lv-lv_start-_and_end-type_attributes_required-constraint-rule-20"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:lv"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-lv-lv_containing_curve-constraint-rule-21"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:lv[mei:curve[@bezier or @bulge or @curvedir or @lform or @lwidth or              @ho or @startho or @endho or @to or @startto or @endto or @vo or @startvo or              @endvo or @x or @y or @x2 or @y2]]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@bezier or @bulge or @curvedir or @lform or @lwidth or @ho or @startho or                @endho or @to or @startto or @endto or @vo or @startvo or @endvo or @x or @y or @x2 or @y2)"
             role = "warning"
             "The visual attributes of the lv element (@bezier, @bulge, @curvedir,\x{a}" ~
             "            @lform, @lwidth, @ho, @startho, @endho, @to, @startto, @endto, @vo, @startvo, @endvo,\x{a}" ~
             "            @x, @y, @x2, and @y2) will be overridden by visual attributes of the contained curve\x{a}" ~
             "            elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.lv.log.attributes,
    att.lv.vis.attributes,
    att.lv.ges.attributes,
    att.lv.anl.attributes,
    empty
  }
measure =
  
  ## Unit of musical time consisting of a fixed number of note values of a given type, as determined by the prevailing meter, and delimited in musical notation by bar lines.
  element measure {
    mNum?,
    (model.annotLike
     | model.appLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.measurePart
     | model.milestoneLike.music
     | model.relationLike
     | model.staffDefLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.metadataPointing.attributes,
    att.pointing.attributes,
    att.measure.anl.attributes,
    att.measure.ges.attributes,
    att.measure.log.attributes,
    att.measure.vis.attributes,
    att.targetEval.attributes,
    empty
  }
meterSig =
  
  ## (meter signature) – Written meter signature.
  element meterSig {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.meterSig.anl.attributes,
    att.meterSig.ges.attributes,
    att.meterSig.log.attributes,
    att.meterSig.vis.attributes,
    empty
  }
meterSigGrp =
  
  ## (meter signature group) – Used to capture alternating, interchanging, and mixed meter signatures.
  element meterSigGrp {
    (meterSig*)
    >> sch:pattern [
         id =
           "mei-meterSigGrp-check_meterSigGrpContent-constraint-rule-22"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:meterSigGrp[not(@copyof)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:meterSig) > 1"
             "meterSigGrp must have at least 2 child\x{a}" ~
             "            meterSig elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.meterSigGrp.anl.attributes,
    att.meterSigGrp.ges.attributes,
    att.meterSigGrp.log.attributes,
    att.meterSigGrp.vis.attributes,
    empty
  }
mNum =
  [
    a:documentation [
      "(measure number) – Designation, name, or label for a measure, often but not always consisting of digits. Use this element when the "
      ns1:code [ "@n" ]
      " attribute on "
      ns1:code [ "<measure>" ]
      " does not adequately capture the appearance or placement of the measure number/label."
    ]
  ]
  element mNum {
    (text | model.lbLike | model.rendLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.mNum.log.attributes,
    att.mNum.vis.attributes,
    att.mNum.ges.attributes,
    att.mNum.anl.attributes,
    empty
  }
mRest =
  
  ## (measure rest) – Complete measure rest in any meter. 
  element mRest {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.mRest.log.attributes,
    att.mRest.vis.attributes,
    att.mRest.ges.attributes,
    att.mRest.anl.attributes,
    empty
  }
mRpt =
  
  ## (measure repeat) – An indication that the previous measure should be repeated.
  element mRpt {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.mRpt.log.attributes,
    att.mRpt.vis.attributes,
    att.mRpt.ges.attributes,
    att.mRpt.anl.attributes,
    empty
  }
mRpt2 =
  
  ## (2-measure repeat) – An indication that the previous two measures should be repeated.
  element mRpt2 {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.mRpt2.log.attributes,
    att.mRpt2.vis.attributes,
    att.mRpt2.ges.attributes,
    att.mRpt2.anl.attributes,
    empty
  }
mSpace =
  
  ## (measure space) – A measure containing only empty space in any meter.
  element mSpace {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.mSpace.log.attributes,
    att.mSpace.vis.attributes,
    att.mSpace.ges.attributes,
    att.mSpace.anl.attributes,
    empty
  }
multiRest =
  
  ## (multiple rest) – Multiple measures of rest compressed into a single symbol, frequently found in performer parts.
  element multiRest {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.multiRest.log.attributes,
    att.multiRest.vis.attributes,
    att.multiRest.ges.attributes,
    att.multiRest.anl.attributes,
    empty
  }
multiRpt =
  
  ## (multiple repeat) – Multiple repeated measures.
  element multiRpt {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.multiRpt.log.attributes,
    att.multiRpt.vis.attributes,
    att.multiRpt.ges.attributes,
    att.multiRpt.anl.attributes,
    empty
  }
octave =
  
  ## An indication that a passage should be performed one or more octaves above or below its written pitch.
  element octave {
    ((text | model.textPhraseLike.limited)*)
    >> sch:pattern [
         id =
           "mei-octave-octave_start-_and_end-type_attributes_required-constraint-rule-23"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:octave"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.octave.log.attributes,
    att.octave.vis.attributes,
    att.octave.ges.attributes,
    att.octave.anl.attributes,
    empty
  }
oLayer =
  
  ## (ossia layer) – A layer that contains an alternative to material in another layer.
  element oLayer {
    (model.annotLike
     | model.appLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.layerPart
     | model.milestoneLike.music
     | model.transcriptionLike)*,
    att.basic.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.metadataPointing.attributes,
    att.nInteger.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    att.layer.log.attributes,
    att.layer.vis.attributes,
    att.layer.ges.attributes,
    att.layer.anl.attributes,
    empty
  }
ossia =
  
  ## Captures original notation and a differently notated version *present in the source being transcribed*.
  element ossia {
    ((oStaff+, model.staffLike+) | (oLayer+, model.layerLike+))
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:measure/mei:ossia"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:*) = count(mei:staff)+count(mei:oStaff)"
             "In a measure, ossia\x{a}" ~
             "              may only contain staff and oStaff elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staff/mei:ossia"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:*) = count(mei:layer)+count(mei:oLayer)"
             "In a staff, ossia\x{a}" ~
             "              may only contain layer and oLayer elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.ossia.log.attributes,
    att.ossia.vis.attributes,
    att.ossia.ges.attributes,
    att.ossia.anl.attributes,
    empty
  }
oStaff =
  
  ## (ossia staff) – A staff that holds an alternative passage which may be played instead of the original material.
  element oStaff {
    (model.annotLike
     | model.appLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.milestoneLike.music
     | model.relationLike
     | model.staffDefLike
     | model.staffPart
     | model.transcriptionLike)*,
    att.basic.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.metadataPointing.attributes,
    att.nInteger.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    att.staff.log.attributes,
    att.staff.vis.attributes,
    att.staff.ges.attributes,
    att.staff.anl.attributes,
    empty
  }
pedal =
  
  ## Piano pedal mark.
  element pedal {
    empty
    >> sch:pattern [
         id =
           "mei-pedal-pedal_start-type_attributes_required-constraint-rule-26"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:pedal"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.pedal.log.attributes,
    att.pedal.vis.attributes,
    att.pedal.ges.attributes,
    att.pedal.anl.attributes,
    empty
  }
reh =
  
  ## (rehearsal mark) – In an orchestral score and its corresponding parts, a mark indicating a convenient point from which to resume rehearsal after a break.
  element reh {
    (text | model.lbLike | model.rendLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.reh.log.attributes,
    att.reh.vis.attributes,
    att.reh.ges.attributes,
    att.reh.anl.attributes,
    empty
  }
slur =
  
  ## Indication of 1) a "unified melodic idea" or 2) performance technique.
  element slur {
    ((curve | dir | gliss)*)
    >> sch:pattern [
         id =
           "mei-slur-slur_start-_and_end-type_attributes_required-constraint-rule-27"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:slur"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-slur-slur_containing_curve-constraint-rule-28"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:slur[mei:curve[@bezier or @bulge or @curvedir or @lform or @lwidth or              @ho or @startho or @endho or @to or @startto or @endto or @vo or @startvo or @endvo or              @x or @y or @x2 or @y2]]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@bezier or @bulge or @curvedir or @lform or @lwidth or @ho or @startho or                @endho or @to or @startto or @endto or @vo or @startvo or @endvo or @x or @y or @x2 or @y2)"
             role = "warning"
             "The visual attributes of the slur (@bezier, @bulge, @curvedir, @lform,\x{a}" ~
             "            @lwidth, @ho, @startho, @endho, @to, @startto, @endto, @vo, @startvo, @endvo, @x, @y,\x{a}" ~
             "            @x2, and @y2) will be overridden by visual attributes of the contained curve\x{a}" ~
             "            elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.dirmark.tablature.attributes,
    att.common.attributes,
    att.facsimile.attributes,
    att.slur.log.attributes,
    att.slur.vis.attributes,
    att.slur.ges.attributes,
    att.slur.anl.attributes,
    empty
  }
tie =
  
  ## An indication that two notes of the same pitch form a single note with their combined rhythmic values.
  element tie {
    (curve*)
    >> sch:pattern [
         id =
           "mei-tie-tie_start-_and_end-type_attributes_required-constraint-rule-29"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:tie"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-tie-tie_containing_curve-constraint-rule-30"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:tie[mei:curve[@bezier or @bulge or @curvedir or @lform or @lwidth or              @ho or @startho or @endho or @to or @startto or @endto or @vo or @startvo or              @endvo or @x or @y or @x2 or @y2]]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@bezier or @bulge or @curvedir or @lform or @lwidth or @ho or @startho or                @endho or @to or @startto or @endto or @vo or @startvo or @endvo or @x or @y or @x2 or @y2)"
             role = "warning"
             "The visual attributes of the tie (@bezier, @bulge, @curvedir, @lform,\x{a}" ~
             "            @lwidth, @ho, @startho, @endho, @to, @startto, @endto, @vo, @startvo, @endvo, @x, @y,\x{a}" ~
             "            @x2, and @y2) will be overridden by visual attributes of the contained curve\x{a}" ~
             "            elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.tie.log.attributes,
    att.tie.vis.attributes,
    att.tie.ges.attributes,
    att.tie.anl.attributes,
    empty
  }
tuplet =
  
  ## A group of notes with "irregular" (sometimes called "irrational") rhythmic values, for example, three notes in the time normally occupied by two or nine in the time of five.
  element tuplet {
    ((model.appLike
      | model.editLike
      | model.eventLike
      | model.eventLike.cmn
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-tuplet-When_not_copyof_tuplet_content-constraint-rule-31"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:tuplet[not(@copyof)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::*[local-name()='note' or local-name()='rest' or               local-name()='chord']) > 1"
             "A tuplet without a copyof attribute must have at least 2 note, rest, or chord\x{a}" ~
             "            descendants."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.tuplet.log.attributes,
    att.tuplet.vis.attributes,
    att.tuplet.ges.attributes,
    att.tuplet.anl.attributes,
    empty
  }
tupletSpan =
  
  ## (tuplet span) – Alternative element for encoding tuplets, especially useful for tuplets that extend across bar lines.
  element tupletSpan {
    empty
    >> sch:pattern [
         id =
           "mei-tupletSpan-tupletSpan_start-_and_end-type_attributes_required-constraint-rule-32"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:tupletSpan"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.tupletSpan.log.attributes,
    att.tupletSpan.vis.attributes,
    att.tupletSpan.ges.attributes,
    att.tupletSpan.anl.attributes,
    empty
  }
att.mordent.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.ornamentAccid.attributes,
  att.mordent.log.attribute.form,
  att.mordent.log.attribute.long
att.mordent.log.attribute.form =
  [
    a:documentation [
      "Records semantic meaning, i.e., intended performance, of the mordent. The "
      ns1:code [ "@altsym" ]
      ", "
      ns1:code [ "@glyph.name" ]
      ", or "
      ns1:code [ "@glyph.num" ]
      " attributes may be used to specify the appropriate symbol."
    ]
  ]
  attribute form {
    
    ## Starts with the written note, followed by its lower neighbor, with a return to the written note. In modern practice, this is called an "inverted mordent" and indicated by a short wavy line with a vertical line through it.
    "lower"
    | 
      ## Starts with the written note, followed by its upper neighbor, with a return to the principal note. In modern practice, the symbol lacks the vertical line used for the inverted form.
      "upper"
  }?
att.mordent.log.attribute.long =
  
  ## When set to 'true', a double or long mordent, sometimes called a "pincé double", consisting of 5 notes, is indicated.
  attribute long { data.BOOLEAN }?
att.ornamentAccid.attributes =
  att.ornamentAccid.attribute.accidupper,
  att.ornamentAccid.attribute.accidlower
att.ornamentAccid.attribute.accidupper =
  
  ## Records the written accidental associated with an upper neighboring note.
  attribute accidupper { data.ACCIDENTAL.WRITTEN }?
att.ornamentAccid.attribute.accidlower =
  
  ## Records the written accidental associated with a lower neighboring note.
  attribute accidlower { data.ACCIDENTAL.WRITTEN }?
att.ornamPresent.attributes = att.ornamPresent.attribute.ornam
att.ornamPresent.attribute.ornam =
  
  ## Indicates that this element has an attached ornament. If visual information about the ornament is needed, then one of the elements that represents an ornament (mordent, trill, or turn) should be employed.
  attribute ornam {
    list { data.ORNAM.cmn+ }
  }?
att.trill.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.ornamentAccid.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.turn.log.attributes =
  att.controlEvent.attributes,
  att.ornamentAccid.attributes,
  att.startId.attributes,
  att.turn.log.attribute.delayed,
  att.turn.log.attribute.form
att.turn.log.attribute.delayed =
  
  ## When set to 'true', the turn begins on the second half of the beat.
  attribute delayed { data.BOOLEAN }?
att.turn.log.attribute.form =
  [
    a:documentation [
      "Records meaning; i.e., intended performance, of the turn. The "
      ns1:code [ "@altsym" ]
      ", "
      ns1:code [ "@glyph.name" ]
      ", or "
      ns1:code [ "@glyph.num" ]
      " attributes may be used to specify the appropriate symbol."
    ]
  ]
  attribute form {
    
    ## Begins on the note below the written note.
    "lower"
    | 
      ## Begins on the note above the written note.
      "upper"
  }?
model.ornamentLike.cmn = mordent | trill | turn
model.ornamentLike.cmn_alternation = mordent | trill | turn
model.ornamentLike.cmn_sequence = mordent, trill, turn
model.ornamentLike.cmn_sequenceOptional = mordent?, trill?, turn?
model.ornamentLike.cmn_sequenceOptionalRepeatable =
  mordent*, trill*, turn*
model.ornamentLike.cmn_sequenceRepeatable = mordent+, trill+, turn+
mordent =
  
  ## An ornament indicating rapid alternation of the main note with a secondary note, usually a step below, but sometimes a step above. 
  element mordent {
    empty
    >> sch:pattern [
         id =
           "mei-mordent-mordent_start-type_attributes_required-constraint-rule-33"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:mordent"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.mordent.log.attributes,
    att.mordent.vis.attributes,
    att.mordent.ges.attributes,
    att.mordent.anl.attributes,
    empty
  }
trill =
  
  ## Rapid alternation of a note with another (usually at the interval of a second above).
  element trill {
    empty
    >> sch:pattern [
         id =
           "mei-trill-trill_start-type_attributes_required-constraint-rule-34"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:trill"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.trill.log.attributes,
    att.trill.vis.attributes,
    att.trill.ges.attributes,
    att.trill.anl.attributes,
    empty
  }
turn =
  
  ## An ornament consisting of four notes — the upper neighbor of the written note, the written note, the lower neighbor, and the written note.
  element turn {
    empty
    >> sch:pattern [
         id =
           "mei-turn-turn_start-type_attributes_required-constraint-rule-35"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:turn"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.turn.log.attributes,
    att.turn.vis.attributes,
    att.turn.ges.attributes,
    att.turn.anl.attributes,
    empty
  }
meiCorpus =
  [
    a:documentation [
      "(MEI corpus) – A group of related MEI documents, consisting of a header for the group, and one or more "
      ns1:code [ "<mei>" ]
      " elements, each with its own complete header."
    ]
  ]
  element meiCorpus {
    meiHead,
    mei*,
    att.common.attributes,
    att.meiVersion.attributes,
    empty
  }
att.crit.attributes =
  att.handIdent.attributes,
  att.sequence.attributes,
  att.source.attributes,
  att.crit.attribute.cause
att.crit.attribute.cause =
  
  ## Classifies the cause for the variant reading, according to any appropriate typology of possible origins.
  attribute cause { xsd:NMTOKEN }?
att.rdg.log.attributes = empty
model.appLike = app
model.rdgPart = model.rdgPart.music | model.rdgPart.text | model.sylLike
model.rdgPart.music =
  model.controlEventLike.cmn
  | model.verseLike
  | volta
  | model.controlEventLike
  | model.layerLike
model.rdgPart.text =
  model.textComponentLike | model.textPhraseLike.limited
app =
  
  ## (apparatus) – Contains one or more alternative encodings.
  element app { lem?, rdg, rdg*, att.common.attributes, empty }
lem =
  
  ## (lemma) – Contains the lemma, or base text, of a textual variation.
  element lem {
    (text
     | model.appLike
     | model.divLike
     | model.editLike
     | model.fLike
     | model.graphicPrimitiveLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.rdgPart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike
     | expansion)*,
    att.common.attributes,
    att.crit.attributes,
    att.pointing.attributes,
    att.rdg.anl.attributes,
    att.rdg.ges.attributes,
    att.rdg.log.attributes,
    att.rdg.vis.attributes,
    att.targetEval.attributes,
    empty
  }
rdg =
  
  ## (reading) – Contains a single reading within a textual variation.
  element rdg {
    (text
     | model.appLike
     | model.divLike
     | model.editLike
     | model.fLike
     | model.graphicPrimitiveLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.rdgPart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike
     | expansion)*,
    att.common.attributes,
    att.crit.attributes,
    att.pointing.attributes,
    att.rdg.anl.attributes,
    att.rdg.ges.attributes,
    att.rdg.log.attributes,
    att.rdg.vis.attributes,
    att.targetEval.attributes,
    empty
  }
att.sp.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.stageDir.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
model.stageDirLike = stageDir
model.stageDirLike_alternation = stageDir
model.stageDirLike_sequence = stageDir
model.stageDirLike_sequenceOptional = stageDir?
model.stageDirLike_sequenceOptionalRepeatable = stageDir*
model.stageDirLike_sequenceRepeatable = stageDir+
sp =
  
  ## (speech) – Contains an individual speech in a performance text.
  element sp {
    (model.annotLike
     | model.appLike
     | model.figureLike
     | model.milestoneLike.text)*,
    (speaker,
     (model.annotLike
      | model.appLike
      | model.figureLike
      | model.milestoneLike.text)*)*,
    (model.lgLike
     | model.lLike
     | model.pLike
     | model.quoteLike
     | model.stageDirLike
     | \list)+,
    ((model.annotLike
      | model.appLike
      | model.figureLike
      | model.milestoneLike.text)*)
    >> sch:pattern [
         id =
           "mei-sp-sp_start-type_attributes_required-constraint-rule-36"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:sp[ancestor::mei:layer or ancestor::mei:measure or ancestor::mei:staff][not(ancestor::mei:sp)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-sp-sp_start-type_attributes_forbidden-constraint-rule-37"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:sp[not(ancestor::mei:layer or ancestor::mei:measure or ancestor::mei:staff)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@startid or @endid or @tstamp or @tstamp2 or @tstamp.ges or @tstamp.real or                @startho or @endho or @to or @startto or @endto or @staff or @layer or @place or @plist)"
             "Must not have any of the attributes: startid, endid, tstamp, tstamp2, tstamp.ges,\x{a}" ~
             "            tstamp.real, startho, endho, to, startto, endto, staff, layer, place, or\x{a}" ~
             "            plist."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.sp.anl.attributes,
    att.sp.ges.attributes,
    att.sp.log.attributes,
    att.sp.vis.attributes,
    empty
  }
stageDir =
  
  ## (stage direction) – Contains any kind of stage direction within a dramatic text or fragment.
  element stageDir {
    ((text
      | model.textPhraseLike.limited
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-stageDir-stageDir_start-type_attributes_required-constraint-rule-38"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:stageDir[ancestor::mei:layer or ancestor::mei:measure or ancestor::mei:staff][not(ancestor::mei:sp)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-stageDir-stageDir_start-type_attributes_forbidden-constraint-rule-39"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:stageDir[not(ancestor::mei:layer or ancestor::mei:measure or ancestor::mei:staff) or ancestor::mei:sp]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@startid or @endid or @tstamp or @tstamp2 or @tstamp.ges or @tstamp.real or @startho or @endho or @to or                @startto or @endto or @staff or @layer or @place or @plist)"
             "Must not have any of the attributes: startid, endid, tstamp, tstamp2, tstamp.ges,\x{a}" ~
             "            tstamp.real, startho, endho, to, startto, endto, staff, layer, place, or\x{a}" ~
             "            plist."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.stageDir.anl.attributes,
    att.stageDir.ges.attributes,
    att.stageDir.log.attributes,
    att.stageDir.vis.attributes,
    empty
  }
att.agentIdent.attributes = att.agentIdent.attribute.agent
att.agentIdent.attribute.agent =
  
  ## Signifies the causative agent of damage, illegibility, or other loss of original text.
  attribute agent { xsd:string }?
att.cpMark.log.attributes =
  att.controlEvent.attributes,
  att.origin.timestamp.logical.attributes,
  att.origin.staffIdent.attributes,
  att.origin.layerIdent.attributes,
  att.origin.startEndId.attributes,
  att.octaveDisplacement.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.edit.attributes = att.source.attributes, att.evidence.attributes
att.metaMark.anl.attributes = empty
att.metaMark.ges.attributes = att.duration.gestural.attributes
att.metaMark.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.timestamp2.gestural.attributes,
  att.edit.attributes,
  att.trans.attributes
att.metaMark.vis.attributes = att.placement.attributes
att.reasonIdent.attributes = att.reasonIdent.attribute.reason
att.reasonIdent.attribute.reason =
  
  ## Holds a short phrase describing the reason for missing textual material (gap), why material is supplied (supplied), or why transcription is difficult (unclear).
  attribute reason { xsd:string }?
att.trans.attributes =
  att.geneticState.attributes,
  att.handIdent.attributes,
  att.metadataPointing.attributes,
  att.sequence.attributes
model.choicePart =
  model.editLike
  | corr
  | orig
  | reg
  | sic
  | unclear
  | model.editorialLike
model.editLike = choice | subst
model.editTransPart =
  model.editTransPart.music | model.editTransPart.text | model.sylLike
model.editTransPart.music =
  model.controlEventLike.cmn
  | model.verseLike
  | volta
  | model.controlEventLike
  | model.layerLike
model.editTransPart.text =
  model.textComponentLike | model.textPhraseLike.limited
model.transcriptionLike =
  add
  | corr
  | damage
  | del
  | gap
  | handShift
  | orig
  | reg
  | restore
  | sic
  | supplied
  | unclear
abbr =
  
  ## (abbreviation) – A generic element for 1) a shortened form of a word, including an acronym or 2) a shorthand notation.
  element abbr {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.trans.attributes,
    
    ## Records the expansion of a text abbreviation.
    attribute expan { xsd:string }?,
    empty
  }
add =
  
  ## (addition) – Marks an addition to the text.
  element add {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.lang.attributes,
    att.trans.attributes,
    
    ## Location of the addition.
    attribute place {
      list { data.PLACEMENT+ }
    }?,
    empty
  }
choice =
  
  ## Groups a number of alternative encodings for the same point in a text.
  element choice { model.choicePart*, att.common.attributes, empty }
corr =
  
  ## (correction) – Contains the correct form of an apparent erroneous passage.
  element corr {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.lang.attributes,
    att.trans.attributes,
    empty
  }
cpMark =
  
  ## (copy/colla parte mark) – A verbal or graphical indication to copy musical material written elsewhere.
  element cpMark {
    ((text
      | model.textPhraseLike.limited
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-cpMark-cpMark_start-_and_end-type_attributes_required-constraint-rule-40"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:cpMark"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.cpMark.log.attributes,
    att.cpMark.vis.attributes,
    att.cpMark.ges.attributes,
    att.cpMark.anl.attributes,
    empty
  }
damage =
  
  ## Contains an area of damage to the physical medium.
  element damage {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.agentIdent.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.handIdent.attributes,
    att.lang.attributes,
    
    ## Records the degree of damage.
    attribute degree { xsd:string }?,
    empty
  }
del =
  
  ## (deletion) – Contains information deleted, marked as deleted, or otherwise indicated as superfluous or spurious in the copy text by an author, scribe, annotator, or corrector.
  element del {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.textRendition.attributes,
    att.trans.attributes,
    empty
  }
expan =
  
  ## (expansion) – Contains the expansion of an abbreviation.
  element expan {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.trans.attributes,
    
    ## Captures the abbreviated form of the text.
    attribute abbr { xsd:string }?,
    empty
  }
gap =
  
  ## Indicates a point where material has been omitted in a transcription, whether as part of sampling practice or for editorial reasons described in the MEI header.
  element gap {
    empty,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.handIdent.attributes,
    att.reasonIdent.attributes,
    empty
  }
handShift =
  
  ## Marks the beginning of a passage written in a new hand, or of a change in the scribe, writing style, ink or character of the document hand.
  element handShift {
    empty,
    att.common.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.medium.attributes,
    
    ## Describes the character of the new hand.
    attribute character { text }?,
    (
     ## Identifies the new hand. The value must contain the ID of a hand element given elsewhere in the document.
     attribute new { data.URI }?)
    >> sch:pattern [
         id = "mei-handShift-new-check_newTarget-constraint-rule-41"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "@new"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(normalize-space(.) eq '')"
             "@new attribute should\x{a}" ~
             "                have content."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test =
               "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:hand/@xml:id"
             "The value in @new should correspond to the @xml:id attribute of a hand\x{a}" ~
             "                element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    (
     ## Identifies the old hand. The value must contain the ID of a hand element given elsewhere in the document.
     attribute old { data.URI }?)
    >> sch:pattern [
         id = "mei-handShift-old-check_oldTarget-constraint-rule-42"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "@old"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(normalize-space(.) eq '')"
             "@old attribute should\x{a}" ~
             "                have content."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test =
               "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:hand/@xml:id"
             "The value in @old should correspond to the @xml:id attribute of a hand\x{a}" ~
             "                element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }
metaMark =
  
  ## A graphical or textual statement with additional / explanatory information about the musical text. The textual consequences of this intervention are encoded independently via other means; that is, with elements such as <add>, <del>, etc.
  element metaMark {
    ((text
      | model.editLike
      | model.sectionLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-metaMark-metaMark_start-type_attributes_required-constraint-rule-43"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:metaMark"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real"
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.metaMark.log.attributes,
    att.metaMark.vis.attributes,
    att.metaMark.ges.attributes,
    att.metaMark.anl.attributes,
    att.pointing.attributes,
    
    ## Describes the purpose of the metaMark.
    ## Suggested values include: 1] confirmation; 2] addition; 3] deletion; 4] substitution; 5] clarification; 6] question; 7] investigation; 8] restoration; 9] navigation
    attribute function {
      
      ## confirmation of a previous textual decision; i.e., cancellation of a deleted passage in a different writing medium.
      "confirmation"
      | 
        ## denoted material is to be inserted in the musical text.
        "addition"
      | 
        ## denoted material is no longer part of the musical text.
        "deletion"
      | 
        ## denoted material is replaced, either by the musical text pointed at with the @target attribute or the musical content of the metaMark element itself.
        "substitution"
      | 
        ## attempt to clarify a potentially illegible or otherwise unclear part of the musical text.
        "clarification"
      | 
        ## marks a section of the musical text which is to be considered further.
        "question"
      | 
        ## marks a section of the musical text as an investigation of the consequences of certain compositional decisions or potential alternatives.
        "investigation"
      | 
        ## declares a formerly cancelled part of the musical text as valid again.
        "restoration"
      | 
        ## clarification of the reading order of the musical text.
        "navigation"
      | xsd:NMTOKEN
    }?,
    empty
  }
orig =
  
  ## (original) – Contains material which is marked as following the original, rather than being normalized or corrected.
  element orig {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
reg =
  
  ## (regularization) – Contains material which has been regularized or normalized in some sense.
  element reg {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.authorized.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.lang.attributes,
    empty
  }
restore =
  
  ## Indicates restoration of material to an earlier state by cancellation of an editorial or authorial marking or instruction.
  element restore {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.trans.attributes,
    
    ## Provides a description of the means of restoration, 'stet' or 'strike-down', for example.
    attribute desc { xsd:string }?,
    empty
  }
sic =
  
  ## Contains apparently incorrect or inaccurate material.
  element sic {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
subst =
  
  ## (substitution) – Groups transcriptional elements when the combination is to be regarded as a single intervention in the text.
  element subst {
    model.transcriptionLike,
    model.transcriptionLike+,
    att.common.attributes,
    att.edit.attributes,
    att.trans.attributes,
    empty
  }
supplied =
  
  ## Contains material supplied by the transcriber or editor for any reason.
  element supplied {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.agentIdent.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.reasonIdent.attributes,
    empty
  }
unclear =
  
  ## Contains material that cannot be transcribed with certainty because it is illegible or inaudible in the source.
  element unclear {
    (text
     | model.divLike
     | model.editLike
     | model.editTransPart
     | model.fLike
     | model.graphicPrimitiveLike
     | model.keyAccidLike
     | model.layerPart
     | model.milestoneLike.music
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.neumePart
     | model.sectionPart
     | model.staffGrpLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.agentIdent.attributes,
    att.edit.attributes,
    att.extent.attributes,
    att.facsimile.attributes,
    att.handIdent.attributes,
    att.lang.attributes,
    att.reasonIdent.attributes,
    empty
  }
att.extSym.attributes =
  att.extSym.attribute.glyph.auth,
  att.extSym.attribute.glyph.name,
  att.extSym.attribute.glyph.num,
  att.extSym.attribute.glyph.uri
att.extSym.attribute.glyph.auth =
  [
    a:documentation [
      "A name or label associated with the controlled vocabulary from which the value of "
      ns1:code [ "@glyph.name" ]
      " or "
      ns1:code [ "@glyph.num" ]
      " is taken.\x{a}" ~
      "Suggested values include: 1] smufl"
    ]
  ]
  attribute glyph.auth {
    
    ## Standard Music Font Layout.
    "smufl"
    | xsd:NMTOKEN
  }?
att.extSym.attribute.glyph.name =
  
  ## Glyph name.
  attribute glyph.name { xsd:string }?
sch:pattern [
  id = "mei-att.extSym-glyph.name-check_glyph.name-constraint-rule-44"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@glyph.name"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@glyph.name attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.extSym.attribute.glyph.num =
  
  ## Numeric glyph reference in hexadecimal notation, e.g. "#xE000" or "U+E000". N.B. SMuFL version 1.18 uses the range U+E000 - U+ECBF.
  attribute glyph.num { data.HEXNUM }?
sch:pattern [
  id = "mei-att.extSym-glyph.num-check_glyph.num-constraint-rule-45"
  "\x{a}" ~
  "      "
  sch:rule [
    context =
      "mei:*[@glyph.num and (lower-case(@glyph.auth) eq 'smufl' or @glyph.uri eq 'http://www.smufl.org/')]"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "matches(normalize-space(@glyph.num), '^(#x|U\+)E([0-9AB][0-9A-F][0-9A-F]|C[0-9A][0-9A-F]|CB[0-9A-F])$')"
      "SMuFL version 1.18 uses the range U+E000 - U+ECBF."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.extSym.attribute.glyph.uri =
  [
    a:documentation [
      "The web-accessible location of the controlled vocabulary from which the value of "
      ns1:code [ "@glyph.name" ]
      " or "
      ns1:code [ "@glyph.num" ]
      " is taken."
    ]
  ]
  attribute glyph.uri { data.URI }?
att.facsimile.attributes = att.facsimile.attribute.facs
att.facsimile.attribute.facs =
  
  ## Permits the current element to reference a facsimile surface or image zone which corresponds to it.
  attribute facs {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.facsimile-facs-check_facsTarget-constraint-rule-46"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@facs"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@facs attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[local-name() eq 'surface' or local-name() eq 'zone']/@xml:id"
      "Each value in @facs should correspond to the @xml:id attribute of a surface or zone\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
facsimile =
  
  ## Contains a representation of a written source in the form of a set of images rather than as transcribed or encoded text.
  element facsimile {
    graphic*,
    surface*,
    att.common.attributes,
    att.metadataPointing.attributes,
    empty
  }
surface =
  
  ## Defines a writing surface in terms of a rectangular coordinate space, optionally grouping one or more graphic representations of that space, and rectangular zones of interest within it.
  element surface {
    model.figDescLike*,
    model.graphicLike*,
    zone*,
    att.common.attributes,
    att.coordinated.attributes,
    att.dataPointing.attributes,
    att.metadataPointing.attributes,
    att.startId.attributes,
    empty
  }
zone =
  
  ## Defines an area of interest within a surface or graphic file.
  element zone {
    model.figDescLike*,
    model.graphicLike*,
    att.common.attributes,
    att.coordinated.attributes,
    att.dataPointing.attributes,
    empty
  }
att.tabular.attributes =
  att.tabular.attribute.colspan, att.tabular.attribute.rowspan
att.tabular.attribute.colspan =
  
  ## The number of columns spanned by this cell.
  attribute colspan { xsd:positiveInteger }?
att.tabular.attribute.rowspan =
  
  ## The number of rows spanned by this cell.
  attribute rowspan { xsd:positiveInteger }?
model.figDescLike = figDesc
model.figureLike = fig
model.figureLike_alternation = fig
model.figureLike_sequence = fig
model.figureLike_sequenceOptional = fig?
model.figureLike_sequenceOptionalRepeatable = fig*
model.figureLike_sequenceRepeatable = fig+
model.graphicLike = graphic
model.tableLike = table
model.tableLike_alternation = table
model.tableLike_sequence = table
model.tableLike_sequenceOptional = table?
model.tableLike_sequenceOptionalRepeatable = table*
model.tableLike_sequenceRepeatable = table+
fig =
  
  ## (figure) – Groups elements representing or containing graphic information such as an illustration or figure.
  element fig {
    (figDesc
     | model.captionLike
     | model.graphicLike
     | model.scoreLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.horizontalAlign.attributes,
    att.verticalAlign.attributes,
    att.xy.attributes,
    empty
  }
figDesc =
  
  ## (figure description) – Contains a brief prose description of the appearance or content of a graphic figure, for use when documenting an image without displaying it.
  element figDesc {
    (model.textComponentLike* | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.lang.attributes,
    empty
  }
graphic =
  
  ## Indicates the location of an inline graphic.
  element graphic {
    (zone*)
    >> sch:pattern [
         id = "mei-graphic-graphic_attributes-constraint-rule-47"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:zone/mei:graphic"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "count(mei:*) = 0"
             "Graphic child of zone should not have\x{a}" ~
             "            children."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:symbolDef/mei:graphic"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "@startid or (@ulx and @uly)"
             "Graphic should have either a\x{a}" ~
             "            startid attribute or ulx and uly attributes."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:graphic[not(ancestor::mei:symbolDef or ancestor::mei:zone)]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(@ulx or @uly)"
             "Graphic should not have @ulx or @uly\x{a}" ~
             "            attributes."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(@ho or @vo)"
             "Graphic should not have @ho or @vo\x{a}" ~
             "            attributes."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.dimensions.attributes,
    att.internetMedia.attributes,
    att.facsimile.attributes,
    att.metadataPointing.attributes,
    att.pointing.attributes,
    att.startId.attributes,
    att.visualOffset.attributes,
    
    ## Indicates the upper-left corner x coordinate.
    attribute ulx { xsd:nonNegativeInteger }?,
    
    ## Indicates the upper-left corner y coordinate.
    attribute uly { xsd:nonNegativeInteger }?,
    empty
  }
table =
  
  ## Contains text displayed in tabular form.
  element table {
    model.captionLike?,
    tr+,
    model.captionLike?,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.xy.attributes,
    empty
  }
td =
  
  ## (table data) – Designates a table cell that contains data as opposed to a cell that contains column or row heading information.
  element td {
    (text
     | model.textComponentLike
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.xy.attributes,
    att.tabular.attributes,
    empty
  }
th =
  
  ## (table header) – Designates a table cell containing column or row heading information as opposed to one containing data.
  element th {
    (text
     | model.textComponentLike
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.xy.attributes,
    att.tabular.attributes,
    empty
  }
tr =
  [
    a:documentation [
      "(table row) – A formatting element that contains one or more cells (intersection of a row and a column) in a "
      ns1:code [ "<table>" ]
      "."
    ]
  ]
  element tr {
    (th | td)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.xy.attributes,
    empty
  }
att.fing.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.fingGrp.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes,
  att.fingGrp.log.attribute.form
att.fingGrp.log.attribute.form =
  
  ##
  attribute form {
    
    ## alternation of fingers.
    "alter"
    | 
      ## combination of fingers.
      "combi"
    | 
      ## substitution of fingers.
      "subst"
  }?
model.fingeringLike = fing | fingGrp
model.fingeringLike_alternation = fing | fingGrp
model.fingeringLike_sequence = fing, fingGrp
model.fingeringLike_sequenceOptional = fing?, fingGrp?
model.fingeringLike_sequenceOptionalRepeatable = fing*, fingGrp*
model.fingeringLike_sequenceRepeatable = fing+, fingGrp+
fing =
  
  ## finger – An individual finger in a fingering indication.
  element fing {
    ((text
      | model.textPhraseLike.limited
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-fing-fing_start-type_attributes_required-constraint-rule-50"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:fing[not(ancestor::mei:fingGrp)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-fing-stack_exclusion-constraint-rule-51"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:fing"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(descendant::mei:stack)"
             "The stack element is not allowed as a\x{a}" ~
             "            descendant of fing."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.fing.tablature.attributes,
    att.common.attributes,
    att.facsimile.attributes,
    att.fing.anl.attributes,
    att.fing.ges.attributes,
    att.fing.log.attributes,
    att.fing.vis.attributes,
    empty
  }
fingGrp =
  
  ## (finger group)– A group of individual fingers in a fingering indication.
  element fingGrp {
    ((model.fingeringLike | model.editLike | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-fingGrp-require_fingeringLike_children-constraint-rule-52"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:fingGrp"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:fing) + count(mei:fingGrp) > 1"
             "At least 2 fing or fingGrp\x{a}" ~
             "            elements are required."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:fingGrp[not(ancestor::mei:fingGrp)][@tstamp or @startid]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(child::mei:*[@tstamp or @startid])"
             "When @tstamp or @startid is\x{a}" ~
             "              present on fingGrp, its child elements cannot have a @tstamp or @startid\x{a}" ~
             "              attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:fingGrp[not(ancestor::mei:fingGrp)][not(@tstamp or @startid)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "count(descendant::mei:*[@tstamp or @startid]) = count(child::mei:*[local-name()='fing' or local-name()='fingGrp'])"
             "When @tstamp or @startid is not present on fingGrp, each of its child elements must\x{a}" ~
             "              have a @tstamp or @startid attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.fingGrp.anl.attributes,
    att.fingGrp.ges.attributes,
    att.fingGrp.log.attributes,
    att.fingGrp.vis.attributes,
    empty
  }
model.expressionLike = expression
model.itemLike = item
model.manifestationLike = manifestation
expression =
  
  ## Intellectual or artistic realization of a work.
  element expression {
    model.headLike*,
    model.identifierLike*,
    model.titleLike+,
    model.respLikePart*,
    model.workIdent*,
    otherChar*,
    creation?,
    history?,
    langUsage?,
    perfMedium?,
    perfDuration?,
    extent*,
    scoreFormat?,
    contents?,
    context?,
    biblList*,
    notesStmt?,
    classification?,
    componentList?,
    relationList?,
    extMeta*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    empty
  }
expressionList =
  
  ## Gathers bibliographic expression entities.
  element expressionList {
    model.headLike*, model.expressionLike*, att.common.attributes, empty
  }
item =
  
  ## Single instance or exemplar of a source/manifestation.
  element item {
    model.headLike*,
    model.identifierLike*,
    availability?,
    physDesc?,
    physLoc?,
    history?,
    notesStmt?,
    classification?,
    componentList?,
    relationList?,
    extMeta*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    empty
  }
itemList =
  
  ## Gathers bibliographic item entities.
  element itemList {
    model.headLike*, model.itemLike*, att.common.attributes, empty
  }
manifestation =
  
  ## A bibliographic description of a physical embodiment of an expression of a work.
  element manifestation {
    model.headLike*,
    (locus | locusGrp)*,
    model.identifierLike*,
    titleStmt?,
    macro.bibldescPart,
    creation?,
    history?,
    langUsage?,
    contents?,
    biblList*,
    notesStmt?,
    classification?,
    itemList?,
    componentList?,
    relationList?,
    (extMeta*)
    >> sch:pattern [
         id = "mei-manifestation-check_singleton-constraint-rule-55"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:manifestation[@singleton eq 'true']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(mei:itemList)"
             "Item children are not permitted when @singleton\x{a}" ~
             '            equals "true".'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.componentType.attributes,
    att.dataPointing.attributes,
    att.pointing.attributes,
    att.recordType.attributes,
    att.targetEval.attributes,
    
    ##
    attribute singleton { data.BOOLEAN }?,
    empty
  }
manifestationList =
  
  ## A container for the descriptions of physical embodiments of an expression of a work.
  element manifestationList {
    model.headLike*,
    model.manifestationLike+,
    att.common.attributes,
    empty
  }
att.geneticState.attributes =
  att.geneticState.attribute.instant, att.geneticState.attribute.state
att.geneticState.attribute.instant =
  
  ## The @instant attribute is syntactic sugar for classifying a scribal intervention as an ad-hoc modification; that is, one which does not interrupt the writing process.
  attribute instant { data.BOOLEAN | "unknown" }?
att.geneticState.attribute.state =
  
  ## Points to the genetic state that results from this modification.
  attribute state {
    list { data.URI+ }
  }?
sch:pattern [
  id =
    "mei-att.geneticState-check_changeState.targets-constraint-rule-56"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@state"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@state attribute should\x{a}" ~
      "            have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:genState/@xml:id"
      "The value in @state should correspond to the @xml:id attribute of a genState\x{a}" ~
      "            element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
genDesc =
  
  ## (genetic description) - Bundles information about the textual development of a work.
  element genDesc {
    (genDesc | genState)*,
    att.common.attributes,
    att.metadataPointing.attributes,
    
    ## When set to "true" the child elements are known to be in chronological order. When set to "false" or when not provided, the order of child elements is unknown.
    attribute ordered { data.BOOLEAN }?,
    empty
  }
genState =
  
  ## Describes a distinctive state in the textual development of a work.
  element genState {
    desc*,
    respStmt*,
    model.dateLike?,
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.dataPointing.attributes,
    att.metadataPointing.attributes,
    att.pointing.attributes,
    empty
  }
att.accid.ges.attributes = att.accidental.gestural.attributes
att.accidental.gestural.attributes =
  att.accidental.gestural.attribute.accid.ges
att.accidental.gestural.attribute.accid.ges =
  
  ## Records the performed pitch inflection.
  attribute accid.ges { data.ACCIDENTAL.GESTURAL }?
sch:pattern [
  id =
    "mei-att.accidental.gestural-accid.ges-check_accid_duplication-constraint-rule-57"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@accid.ges"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(. eq ../@accid)"
      "The value of @accid.ges should\x{a}" ~
      "                not duplicate the value of @accid."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.ambNote.ges.attributes = empty
att.annot.ges.attributes =
  att.duration.gestural.attributes,
  att.timestamp.gestural.attributes,
  att.timestamp2.gestural.attributes
att.arpeg.ges.attributes = empty
att.artic.ges.attributes = att.articulation.gestural.attributes
att.articulation.gestural.attributes =
  att.articulation.gestural.attribute.artic.ges
att.articulation.gestural.attribute.artic.ges =
  
  ## Records performed articulation that differs from the written value.
  attribute artic.ges {
    list { data.ARTICULATION+ }
  }?
att.attacca.ges.attributes = att.timestamp2.gestural.attributes
att.barLine.ges.attributes = empty
att.beam.ges.attributes = empty
att.beamSpan.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.beatRpt.ges.attributes = empty
att.bend.ges.attributes =
  att.timestamp2.gestural.attributes, att.bend.ges.attribute.amount
att.bend.ges.attribute.amount =
  
  ## Records the amount of detuning. The decimal values should be rendered as a fraction (or an integer plus a fraction) along with the bend symbol.
  attribute amount { data.BEND.AMOUNT }?
att.bracketSpan.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.breath.ges.attributes = att.timestamp.gestural.attributes
att.bTrem.ges.attributes = att.tremMeasured.attributes
att.caesura.ges.attributes =
  att.duration.gestural.attributes, att.timestamp.gestural.attributes
att.chord.ges.attributes =
  att.articulation.gestural.attributes,
  att.duration.gestural.attributes,
  att.instrumentIdent.attributes,
  att.chord.ges.cmn.attributes
att.chordDef.ges.attributes = empty
att.chordMember.ges.attributes = att.accidental.gestural.attributes
att.clef.ges.attributes = empty
att.clefGrp.ges.attributes = empty
att.cpMark.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.curve.ges.attributes = empty
att.custos.ges.attributes = empty
att.mdiv.ges.attributes = att.mdiv.ges.attribute.attacca
att.mdiv.ges.attribute.attacca =
  
  ## Indicates that the performance of the next musical division should begin immediately following this one.
  attribute attacca { data.BOOLEAN }?
att.dir.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.dot.ges.attributes = empty
att.duration.gestural.attributes =
  att.duration.gestural.attribute.dur.ges,
  att.duration.gestural.attribute.dots.ges,
  att.duration.gestural.attribute.dur.metrical,
  att.duration.gestural.attribute.dur.ppq,
  att.duration.gestural.attribute.dur.real,
  att.duration.gestural.attribute.dur.recip
att.duration.gestural.attribute.dur.ges =
  
  ## Records performed duration information that differs from the written duration.
  attribute dur.ges { data.DURATION.gestural }?
att.duration.gestural.attribute.dots.ges =
  
  ## Number of dots required for a gestural duration when different from that of the written duration.
  attribute dots.ges { data.AUGMENTDOT }?
att.duration.gestural.attribute.dur.metrical =
  
  ## Duration as a count of units provided in the time signature denominator.
  attribute dur.metrical {
    xsd:decimal { pattern = "\d+(\.\d+)?" }
  }?
att.duration.gestural.attribute.dur.ppq =
  
  ## Duration recorded as pulses-per-quarter note, e.g. MIDI clicks or MusicXML divisions.
  attribute dur.ppq { xsd:nonNegativeInteger }?
att.duration.gestural.attribute.dur.real =
  
  ## Duration in seconds, e.g. '1.732'.
  attribute dur.real {
    xsd:decimal { pattern = "\d+(\.\d+)?" }
  }?
att.duration.gestural.attribute.dur.recip =
  
  ## Duration as an optionally dotted Humdrum *recip value.
  attribute dur.recip {
    xsd:token { pattern = "\d+(\.)*" }
  }?
att.dynam.ges.attributes =
  att.duration.gestural.attributes,
  att.midiValue.attributes,
  att.midiValue2.attributes,
  att.timestamp2.gestural.attributes
att.ending.ges.attributes = empty
att.episema.ges.attributes = att.articulation.gestural.attributes
att.f.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.fermata.ges.attributes = att.duration.gestural.attributes
att.fing.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.fingGrp.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.fTrem.ges.attributes = att.tremMeasured.attributes
att.gliss.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.grpSym.ges.attributes = empty
att.hairpin.ges.attributes =
  att.duration.gestural.attributes,
  att.midiValue.attributes,
  att.midiValue2.attributes,
  att.timestamp2.gestural.attributes
att.halfmRpt.ges.attributes = att.duration.gestural.attributes
att.harm.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.harpPedal.ges.attributes = att.duration.gestural.attributes
att.hispanTick.ges.attributes = empty
att.instrDef.ges.attributes =
  att.channelized.attributes,
  att.midiInstrument.attributes,
  att.soundLocation.attributes
att.keyAccid.ges.attributes = empty
att.keySig.ges.attributes = empty
att.layer.ges.attributes = empty
att.layerDef.ges.attributes = att.instrumentIdent.attributes
att.ligature.ges.attributes = empty
att.line.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.liquescent.ges.attributes = empty
att.lv.ges.attributes = att.timestamp2.gestural.attributes
att.lyrics.ges.attributes = empty
att.measure.ges.attributes = att.timestamp.gestural.attributes
att.mensur.ges.attributes = empty
att.meterSig.ges.attributes = empty
att.meterSigGrp.ges.attributes = empty
att.midi.ges.attributes = empty
att.mordent.ges.attributes = empty
att.mRest.ges.attributes =
  att.duration.gestural.attributes, att.instrumentIdent.attributes
att.mRpt.ges.attributes = empty
att.mRpt2.ges.attributes = empty
att.mSpace.ges.attributes =
  att.duration.gestural.attributes, att.instrumentIdent.attributes
att.multiRest.ges.attributes =
  att.duration.gestural.attributes, att.instrumentIdent.attributes
att.multiRpt.ges.attributes = empty
att.nc.ges.attributes =
  att.accidental.gestural.attributes,
  att.articulation.gestural.attributes,
  att.duration.gestural.attributes,
  att.instrumentIdent.attributes,
  att.midiVelocity.attributes,
  att.nc.ges.attribute.oct.ges,
  att.nc.ges.attribute.pname.ges,
  att.nc.ges.attribute.pnum
att.nc.ges.attribute.oct.ges =
  
  ## Records performed octave information that differs from the written value.
  attribute oct.ges { data.OCTAVE }?
att.nc.ges.attribute.pname.ges =
  
  ## Contains a performed pitch name that differs from the written value.
  attribute pname.ges { data.PITCHNAME.GES }?
att.nc.ges.attribute.pnum =
  
  ## Holds a pitch-to-number mapping, a base-40 or MIDI note number, for example.
  attribute pnum { data.PITCHNUMBER }?
att.ncGrp.ges.attributes = att.timestamp.gestural.attributes
att.neume.ges.attributes = att.timestamp.gestural.attributes
att.note.ges.attributes =
  att.accidental.gestural.attributes,
  att.articulation.gestural.attributes,
  att.duration.gestural.attributes,
  att.instrumentIdent.attributes,
  att.midiVelocity.attributes,
  att.note.ges.mensural.attributes,
  att.stringtab.attributes,
  att.note.ges.attribute.extremis,
  att.note.ges.attribute.oct.ges,
  att.note.ges.attribute.pname.ges,
  att.note.ges.attribute.pnum
att.note.ges.attribute.extremis =
  
  ## Indicates an extreme, indefinite performed pitch.
  attribute extremis {
    
    ## Highest note the performer can play.
    "highest"
    | 
      ## Lowest note the performer can play.
      "lowest"
  }?
att.note.ges.attribute.oct.ges =
  
  ## Records performed octave information that differs from the written value.
  attribute oct.ges { data.OCTAVE }?
att.note.ges.attribute.pname.ges =
  
  ## Contains a performed pitch name that differs from the written value.
  attribute pname.ges { data.PITCHNAME.GES }?
att.note.ges.attribute.pnum =
  
  ## Holds a pitch-to-number mapping, a base-40 or MIDI note number, for example.
  attribute pnum { data.PITCHNUMBER }?
sch:pattern [
  id =
    "mei-att.note.ges-extremis_disallows_gestural_pitch-constraint-rule-58"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:note[@extremis]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "not(@pname.ges) and not(@oct.ges)"
      "When the @extremis attribute is used,\x{a}" ~
      "            the @pname.ges and @oct.ges attributes are not allowed."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.octave.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.oriscus.ges.attributes = empty
att.ornam.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.ossia.ges.attributes = empty
att.pad.ges.attributes = empty
att.part.ges.attributes = empty
att.parts.ges.attributes = empty
att.pb.ges.attributes = empty
att.pedal.ges.attributes = att.timestamp2.gestural.attributes
att.phrase.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.proport.ges.attributes = empty
att.quilisma.ges.attributes = empty
att.rdg.ges.attributes = empty
att.refrain.ges.attributes = empty
att.reh.ges.attributes = empty
att.rest.ges.attributes =
  att.duration.gestural.attributes,
  att.instrumentIdent.attributes,
  att.rest.ges.mensural.attributes
att.sb.ges.attributes = empty
att.score.ges.attributes = empty
att.scoreDef.ges.attributes =
  att.channelized.attributes,
  att.timeBase.attributes,
  att.midiTempo.attributes,
  att.mmTempo.attributes,
  att.scoreDef.ges.attribute.tune.pname,
  att.scoreDef.ges.attribute.tune.Hz,
  att.scoreDef.ges.attribute.tune.temper
att.scoreDef.ges.attribute.tune.pname =
  
  ## Holds the pitch name of a tuning reference pitch.
  attribute tune.pname { data.PITCHNAME }?
att.scoreDef.ges.attribute.tune.Hz =
  
  ## Holds a value for cycles per second, i.e., Hertz, for a tuning reference pitch.
  attribute tune.Hz { xsd:decimal }?
att.scoreDef.ges.attribute.tune.temper =
  
  ## Provides an indication of the tuning system, 'just', for example.
  attribute tune.temper { data.TEMPERAMENT }?
att.section.ges.attributes = att.section.ges.attribute.attacca
att.section.ges.attribute.attacca =
  
  ## Indicates that the performance of the next section should begin immediately following this one.
  attribute attacca { data.BOOLEAN }?
att.signifLet.ges.attributes = empty
att.slur.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.soundLocation.attributes =
  att.soundLocation.attribute.azimuth,
  att.soundLocation.attribute.elevation
att.soundLocation.attribute.azimuth =
  
  ## The lateral or left-to-right plane.
  attribute azimuth { data.DEGREES }?
att.soundLocation.attribute.elevation =
  
  ## The above-to-below axis.
  attribute elevation { data.DEGREES }?
att.sp.ges.attributes = att.timestamp2.gestural.attributes
att.space.ges.attributes = att.duration.gestural.attributes
att.staff.ges.attributes = empty
att.staffDef.ges.attributes =
  att.instrumentIdent.attributes,
  att.stringtab.tuning.attributes,
  att.timeBase.attributes
att.staffGrp.ges.attributes = att.instrumentIdent.attributes
att.stageDir.ges.attributes = att.timestamp2.gestural.attributes
att.strophicus.ges.attributes = empty
att.syl.ges.attributes = empty
att.syllable.ges.attributes = empty
att.symbol.ges.attributes = empty
att.tempo.ges.attributes = att.midiTempo.attributes
att.tie.ges.attributes = att.timestamp2.gestural.attributes
att.timestamp.gestural.attributes =
  att.timestamp.gestural.attribute.tstamp.ges,
  att.timestamp.gestural.attribute.tstamp.real
att.timestamp.gestural.attribute.tstamp.ges =
  
  ## Encodes the onset time in terms of musical time, i.e., beats[.fractional beat part], as expressed in the written time signature.
  attribute tstamp.ges { data.BEAT }?
att.timestamp.gestural.attribute.tstamp.real =
  
  ## Records the onset time in terms of ISO time.
  attribute tstamp.real { data.ISOTIME }?
att.timestamp2.gestural.attributes =
  att.timestamp2.gestural.attribute.tstamp2.ges,
  att.timestamp2.gestural.attribute.tstamp2.real
att.timestamp2.gestural.attribute.tstamp2.ges =
  
  ## Encodes the ending point of an event, i.e., a count of measures plus a beat location in the ending measure.
  attribute tstamp2.ges { data.MEASUREBEAT }?
att.timestamp2.gestural.attribute.tstamp2.real =
  
  ## Records the ending point of an event in terms of ISO time.
  attribute tstamp2.real { data.ISOTIME }?
att.trill.ges.attributes =
  att.duration.gestural.attributes, att.timestamp2.gestural.attributes
att.tuplet.ges.attributes = att.duration.gestural.attributes
att.tupletSpan.ges.attributes =
  att.timestamp2.gestural.attributes, att.tuplet.ges.attributes
att.turn.ges.attributes = empty
att.verse.ges.attributes = empty
att.volta.ges.attributes = empty
att.chordDef.log.attributes =
  att.stringtab.position.attributes, att.stringtab.tuning.attributes
att.chordMember.log.attributes =
  att.pitched.attributes, att.stringtab.attributes
att.f.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.harm.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes,
  att.harm.log.attribute.chordref
att.harm.log.attribute.chordref =
  [
    a:documentation [
      "Contains a reference to a "
      ns1:code [ "<chordDef>" ]
      " element elsewhere in the document."
    ]
  ]
  attribute chordref { data.URI }?
sch:pattern [
  id =
    "mei-att.harm.log-chordref-check_chordrefTarget-constraint-rule-59"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@chordref"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@chordref attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:chordDef/@xml:id"
      "The value in @chordref should correspond to the @xml:id attribute of a chordDef\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
model.chordTableLike = chordTable
model.controlEventLike.harmony = model.harmLike
model.controlEventLike.harmony_alternation = model.harmLike_alternation
model.controlEventLike.harmony_sequence = model.harmLike_sequence
model.controlEventLike.harmony_sequenceOptional =
  model.harmLike_sequenceOptional?
model.controlEventLike.harmony_sequenceOptionalRepeatable =
  model.harmLike_sequenceOptionalRepeatable*
model.controlEventLike.harmony_sequenceRepeatable =
  model.harmLike_sequenceRepeatable+
model.figbassLike = fb
model.fLike = f
model.harmLike = harm
model.harmLike_alternation = harm
model.harmLike_sequence = harm
model.harmLike_sequenceOptional = harm?
model.harmLike_sequenceOptionalRepeatable = harm*
model.harmLike_sequenceRepeatable = harm+
chordDef =
  
  ## (chord definition) – Chord tablature definition.
  element chordDef {
    chordMember*,
    barre*,
    att.common.attributes,
    att.chordDef.anl.attributes,
    att.chordDef.ges.attributes,
    att.chordDef.log.attributes,
    att.chordDef.vis.attributes,
    empty
  }
chordMember =
  [
    a:documentation [
      "An individual pitch in a chord defined by a "
      ns1:code [ "<chordDef>" ]
      " element."
    ]
  ]
  element chordMember {
    empty,
    att.common.attributes,
    att.chordMember.anl.attributes,
    att.chordMember.ges.attributes,
    att.chordMember.log.attributes,
    att.chordMember.vis.attributes,
    empty
  }
chordTable =
  
  ## Chord/tablature look-up table.
  element chordTable { chordDef+, att.common.attributes, empty }
f =
  
  ## (figure) – Single element of a figured bass indication.
  element f {
    (text
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.f.anl.attributes,
    att.f.ges.attributes,
    att.f.log.attributes,
    att.f.vis.attributes,
    empty
  }
fb =
  
  ## (figured bass) – Symbols added to a bass line that indicate harmony. Used to improvise a chordal accompaniment. Sometimes called Generalbass, thoroughbass, or basso continuo.
  element fb {
    (model.fLike | model.editLike | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    empty
  }
harm =
  
  ## (harmony) – An indication of harmony, e.g., chord names, tablature grids, harmonic analysis, figured bass.
  element harm {
    ((text
      | model.textPhraseLike.limited
      | model.graphicPrimitiveLike
      | model.editLike
      | model.transcriptionLike
      | model.figbassLike)*)
    >> sch:pattern [
         id =
           "mei-harm-harm_start-type_attributes_required-constraint-rule-60"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:harm"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.harm.log.attributes,
    att.harm.vis.attributes,
    att.harm.ges.attributes,
    att.harm.anl.attributes,
    empty
  }
att.bifoliumSurfaces.attributes =
  att.bifoliumSurfaces.attribute.outer.recto,
  att.bifoliumSurfaces.attribute.inner.verso,
  att.bifoliumSurfaces.attribute.inner.recto,
  att.bifoliumSurfaces.attribute.outer.verso
att.bifoliumSurfaces.attribute.outer.recto =
  [
    a:documentation [
      "A reference to a "
      ns1:code [ "<surface>" ]
      " element positioned on the outer recto side of a (folded) sheet."
    ]
  ]
  attribute outer.recto { data.URI }?
att.bifoliumSurfaces.attribute.inner.verso =
  [
    a:documentation [
      "A reference to a "
      ns1:code [ "<surface>" ]
      " element positioned on the inner verso side of a (folded) sheet."
    ]
  ]
  attribute inner.verso { data.URI }?
att.bifoliumSurfaces.attribute.inner.recto =
  [
    a:documentation [
      "A reference to a "
      ns1:code [ "<surface>" ]
      " element positioned on the inner recto side of a (folded) sheet."
    ]
  ]
  attribute inner.recto { data.URI }?
att.bifoliumSurfaces.attribute.outer.verso =
  [
    a:documentation [
      "A reference to a "
      ns1:code [ "<surface>" ]
      " element positioned on the outer verso side of a (folded) sheet."
    ]
  ]
  attribute outer.verso { data.URI }?
att.foliumSurfaces.attributes =
  att.foliumSurfaces.attribute.recto, att.foliumSurfaces.attribute.verso
att.foliumSurfaces.attribute.recto =
  [
    a:documentation [
      "A reference to a "
      ns1:code [ "<surface>" ]
      " element positioned on the recto side of the sheet."
    ]
  ]
  attribute recto { data.URI }?
att.foliumSurfaces.attribute.verso =
  [
    a:documentation [
      "A reference to a "
      ns1:code [ "<surface>" ]
      " element positioned on the verso side of the sheet."
    ]
  ]
  attribute verso { data.URI }?
att.recordType.attributes = att.recordType.attribute.recordtype
att.recordType.attribute.recordtype =
  
  ##
  attribute recordtype {
    
    ## Language material.
    "a"
    | 
      ## Notated music.
      "c"
    | 
      ## Manuscript notated music.
      "d"
    | 
      ## Non-manuscript cartographic material.
      "e"
    | 
      ## Manuscript cartographic material.
      "f"
    | 
      ## Projected medium.
      "g"
    | 
      ## Nonmusical sound recording.
      "i"
    | 
      ## Musical sound recording.
      "j"
    | 
      ## Two-dimensional nonprojectable graphic.
      "k"
    | 
      ## Computer file.
      "m"
    | 
      ## Kit.
      "o"
    | 
      ## Mixed materials.
      "p"
    | 
      ## Three-dimensional artifact or naturally occurring object.
      "r"
    | 
      ## Manuscript language material. 
      "t"
  }?
att.regularMethod.attributes = att.regularMethod.attribute.method
att.regularMethod.attribute.method =
  
  ## Indicates the method employed to mark corrections and normalizations.
  attribute method {
    
    ## Corrections and normalizations made silently.
    "silent"
    | 
      ## Corrections and normalizations indicated using elements.
      "tags"
  }?
model.bifoliumLike = bifolium
model.editorialDeclPart =
  correction | interpretation | normalization | segmentation | stdVals
model.eventPart =
  model.nameLike.agent
  | model.nameLike.geogName
  | model.addressLike
  | model.dateLike
  | desc
  | name
model.foliumLike = folium
model.frontAndBackPart = titlePage
model.paperModLike = cutout | patch
model.physDescPart =
  captureMode
  | carrierForm
  | condition
  | exhibHist
  | fileChar
  | fingerprint
  | foliaDesc
  | handList
  | inscription
  | perfDuration
  | physMedium
  | plateNum
  | playingSpeed
  | scoreFormat
  | soundChan
  | specRepro
  | trackConfig
  | treatHist
  | treatSched
  | watermark
  | accMat
  | addDesc
  | bindingDesc
  | catchwords
  | colophon
  | decoDesc
  | explicit
  | heraldry
  | layoutDesc
  | rubric
  | scriptDesc
  | sealDesc
  | secFolio
  | signatures
  | stamp
  | supportDesc
  | typeDesc
  | model.incipLike
  | dimensions
  | extent
  | titlePage
model.pubStmtPart =
  availability
  | model.addressLike
  | model.dateLike
  | model.identifierLike
  | distributor
  | publisher
  | pubPlace
  | respStmt
model.workIdent = key | mensuration | meter | model.incipLike | tempo
model.workLike = work
componentList =
  
  ## Container for intellectual or physical component parts of a bibliographic entity.
  element componentList {
    model.headLike*,
    ((model.workLike* | model.expressionLike*)
     | (model.manifestationLike* | model.itemLike*))
    >> sch:pattern [
         id = "mei-componentList-checkComponentList-constraint-rule-61"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:componentList"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "every $i in ./child::mei:*[not(local-name()='head')] satisfies              $i/local-name() eq ./parent::mei:*/local-name()"
             "Only child elements of the same name as the parent of the componentList are\x{a}" ~
             "            allowed."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-componentList-checkComponents-constraint-rule-62"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:componentList[mei:*[@comptype]]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test =
               "count(mei:*[@comptype]) = count(mei:*[local-name() ne 'head'])"
             "When any child\x{a}" ~
             "            element has a comptype attribute, it is recommended that comptype appear on all child\x{a}" ~
             "            elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    empty
  }
accessRestrict =
  
  ## (access restriction) – Describes the conditions that affect the accessibility of material.
  element accessRestrict {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
acquisition =
  
  ## Records information concerning the process by which an item was acquired by the holding institution.
  element acquisition {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.lang.attributes,
    empty
  }
altId =
  
  ## (alternative identifier) – May contain a bibliographic identifier that does not fit within the meiHead element's id attribute, for example because the identifier does not fit the definition of an XML id or because multiple identifiers are needed.
  element altId {
    (text | model.lbLike | model.rendLike)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
appInfo =
  
  ## (application information) – Groups information about applications which have acted upon the MEI file.
  element appInfo {
    model.headLike*, application*, att.common.attributes, empty
  }
application =
  
  ## Provides information about an application which has acted upon the current document.
  element application {
    name+,
    (model.locrefLike* | model.pLike*),
    att.common.attributes,
    att.datable.attributes,
    
    ## Supplies a version number for an application, independent of its identifier or display name.
    attribute version { xsd:NMTOKEN }?,
    empty
  }
attUsage =
  
  ## Documents the usage of a specific attribute of the element.
  element attUsage {
    (desc?)
    >> sch:pattern [
         id =
           "mei-attUsage-context_attribute_requires_content-constraint-rule-63"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "@context"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(normalize-space(.) eq '')"
             "@context attribute should\x{a}" ~
             "            contain an XPath expression."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    
    ## Name of the attribute.
    attribute name { data.NMTOKEN },
    
    ## Circumstances in which the element appears, an XPath expression.
    attribute context { xsd:string }?,
    empty
  }
audience =
  
  ## Defines the class of user for which the work is intended, as defined by age group (e.g., children, young adults, adults, etc.), educational level (e.g., primary, secondary, etc.), or other categorization.
  element audience {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
availability =
  
  ## Groups elements that describe the availability of and access to a bibliographic item, including an MEI-encoded document.
  element availability {
    macro.availabilityPart,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    empty
  }
bifolium =
  
  ## Describes a folded sheet of paper.
  element bifolium {
    (model.foliumLike
     | model.bifoliumLike
     | model.paperModLike
     | del
     | add
     | damage
     | gap
     | restore)*,
    att.common.attributes,
    att.dimensions.attributes,
    att.measurement.attributes,
    att.bifoliumSurfaces.attributes,
    empty
  }
byline =
  
  ## Contains the primary statement of responsibility given for a work on its title page.
  element byline {
    (text | model.textPhraseLike.limited | model.respLikePart)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
captureMode =
  
  ## (capture mode) – The means used to record notation, sound, or images in the production of a source/manifestation (e.g., analogue, acoustic, electric, digital, optical etc.).
  element captureMode {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
carrierForm =
  
  ## (carrier form) – The specific class of material to which the physical carrier of the source/manifestation belongs (e.g., sound cassette, videodisc, microfilm cartridge, transparency, etc.). The carrier for a manifestation comprising multiple physical components may include more than one form (e.g., a filmstrip with an accompanying booklet, a separate sound disc carrying the sound track for a film, etc.).
  element carrierForm {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
category =
  
  ## Contains an individual descriptive category in a user-defined taxonomy, possibly nested within a superordinate category.
  element category {
    altId*,
    label*,
    desc*,
    catRel*,
    (category*)
    >> sch:pattern [
         id = "mei-category-category_id-constraint-rule-64"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:category"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@xml:id"
             role = "warning"
             "To be addressable, the category element must\x{a}" ~
             "            have an xml:id attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    empty
  }
catRel =
  
  ## (category relationship) – Contains the name of a related category.
  element catRel {
    label*,
    desc*,
    att.authorized.attributes,
    att.basic.attributes,
    att.bibl.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    
    ## Provides a description of the relationship between the current and the target categories.
    attribute type {
      
      ## Category to which the current category is hierarchically subordinate.
      "broader"
      | 
        ## Category which is hierarchically subordinate to the current category.
        "narrower"
      | 
        ## Category that is associatively but not hierarchically linked to the current category.
        "related"
      | 
        ## Non-preferred category; often a synonym or near-synonym for the preferred category label.
        "usefor"
    },
    empty
  }
change =
  
  ## Individual change within the revision description.
  element change {
    respStmt?,
    changeDesc,
    (model.dateLike?)
    >> sch:pattern [
         id = "mei-change-check_change-constraint-rule-65"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:change"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@isodate or mei:date"
             "The date of the change must be recorded in an\x{a}" ~
             "            isodate attribute or date element."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@resp or mei:respStmt[mei:name or mei:corpName or mei:persName]"
             role = "warning"
             "It is recommended that the agent responsible for the change be recorded\x{a}" ~
             "            in a resp attribute or in a name, corpName, or persName element in the respStmt\x{a}" ~
             "            element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    empty
  }
changeDesc =
  
  ## (change description) – Description of a revision of the MEI file.
  element changeDesc {
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
classDecls =
  
  ## Groups information which describes the nature or topic of an entity.
  element classDecls {
    model.headLike*,
    taxonomy*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
classification =
  
  ## Groups information which describes the nature or topic of an entity.
  element classification {
    model.headLike*,
    termList+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    empty
  }
condition =
  
  ## The physical condition of an item, particularly any variances between the physical make-up of the item and that of other copies of the same item (e.g., missing pages or plates, brittleness, faded images, etc.).
  element condition {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
contentItem =
  
  ## Contains a single entry within a content description element.
  element contentItem {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
contents =
  
  ## List of the material contained within a resource.
  element contents {
    model.headLike*,
    (model.pLike? | (label?, contentItem)+)
    >> sch:pattern [
         id = "mei-contents-checkContentsLabels-constraint-rule-66"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:contents[mei:label]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "count(mei:label) = count(mei:contentItem)"
             "When labels\x{a}" ~
             "            are used, usually each content item has one."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.pointing.attributes,
    empty
  }
context =
  
  ## The historical, social, intellectual, artistic, or other context within which the work was originally conceived (e.g., the 17th century restoration of the monarchy in England, the aesthetic movement of the late 19th century, etc.) or the historical, social, intellectual, artistic, or other context within which the expression was realized.
  element context {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
correction =
  
  ## States how and under what circumstances corrections have been made in the text.
  element correction {
    model.headLike*,
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    att.regularMethod.attributes,
    
    ## Indicates the degree of correction applied to the text.
    attribute corrlevel {
      
      ## The text has been thoroughly checked and proofread.
      "high"
      | 
        ## The text has been checked at least once.
        "medium"
      | 
        ## The text has not been checked.
        "low"
      | 
        ## The correction status of the text is unknown.
        "unknown"
    }?,
    empty
  }
cutout =
  
  ## A cutout is a section of a document sheet that has been removed and is now missing.
  element cutout {
    (model.foliumLike | model.bifoliumLike)*,
    att.common.attributes,
    att.dimensions.attributes,
    att.evidence.attributes,
    att.measurement.attributes,
    att.trans.attributes,
    att.xy.attributes,
    
    ## Describes the position of the cutout on the parent folium / bifolium.
    attribute removed.from {
      
      ## removed from outer recto side of bifolium.
      "outer.recto"
      | 
        ## removed from inner verso side of bifolium.
        "inner.verso"
      | 
        ## removed from inner recto side of bifolium.
        "inner.recto"
      | 
        ## removed from outer verso side of bifolium.
        "outer.verso"
      | 
        ## removed from recto side of folium.
        "recto"
      | 
        ## removed from verso side of folium.
        "verso"
    },
    
    ## Describes the method of removing the cutout.
    ## Suggested values include: 1] cut; 2] rip
    attribute removed.by {
      
      ## section is cleanly cut by a knife, scissor or other sharp blade.
      "cut"
      | 
        ## section is ripped off the page, leaving a rough edge.
        "rip"
      | xsd:NMTOKEN
    }?,
    empty
  }
dedication =
  
  ## Contains a dedicatory statement.
  element dedication {
    ((model.headLike*, model.textComponentLike*)
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
domainsDecl =
  
  ## (domains declaration) – Indicates which domains are included in the encoding.
  element domainsDecl {
    empty,
    att.common.attributes,
    att.bibl.attributes,
    
    ##
    attribute anl { data.BOOLEAN },
    
    ##
    attribute ges { data.BOOLEAN },
    
    ##
    attribute vis { data.BOOLEAN },
    empty
  }
editionStmt =
  
  ## (edition statement) – Container for meta-data pertaining to a particular edition of the material being described.
  element editionStmt {
    model.headLike*,
    (model.editionLike, (model.respLikePart | respStmt)*)+,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
editorialDecl =
  
  ## (editorial declaration) – Used to provide details of editorial principles and practices applied during the encoding of musical text.
  element editorialDecl {
    model.headLike*,
    (model.pLike+ | (model.editorialDeclPart+, model.pLike*)),
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    empty
  }
encodingDesc =
  
  ## (encoding description) – Documents the relationship between an electronic file and the source or sources from which it was derived as well as applications used in the encoding/editing process.
  element encodingDesc {
    model.headLike*,
    appInfo?,
    editorialDecl?,
    projectDesc?,
    samplingDecl?,
    domainsDecl*,
    tagsDecl?,
    classDecls?,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
exhibHist =
  
  ## (exhibition history) – A record of public exhibitions, including dates, venues, etc.
  element exhibHist {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
extMeta =
  
  ## (extended metadata) – Provides a container element for non-MEI metadata formats.
  element extMeta {
    (text | macro.anyXML)*,
    att.common.attributes,
    att.bibl.attributes,
    att.whitespace.attributes,
    empty
  }
fileChar =
  
  ## (file characteristics) – Standards or schemes used to encode the file (e.g., ASCII, SGML, etc.), physical characteristics of the file (e.g., recording density, parity, blocking, etc.), and other characteristics that have a bearing on how the file can be processed.
  element fileChar {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
fileDesc =
  
  ## (file description) – Contains a full bibliographic description of the MEI file.
  element fileDesc {
    titleStmt,
    editionStmt?,
    extent?,
    pubStmt,
    seriesStmt?,
    notesStmt?,
    sourceDesc?,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
fingerprint =
  
  ## Contains a string that uniquely identifies an item, such as those constructed by combining groups of characters transcribed from specified pages of a printed item or a file's checksum.
  element fingerprint {
    text,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    empty
  }
foliaDesc =
  
  ## Describes the order of folia and bifolia making up the text block of a manuscript or print.
  element foliaDesc {
    (model.foliumLike
     | model.bifoliumLike
     | del
     | add
     | damage
     | gap
     | restore)*,
    att.common.attributes,
    empty
  }
folium =
  
  ## Describes a single leaf of paper.
  element folium {
    model.paperModLike*,
    att.common.attributes,
    att.dimensions.attributes,
    att.measurement.attributes,
    att.foliumSurfaces.attributes,
    empty
  }
hand =
  
  ## Defines a distinct scribe or handwriting style.
  element hand {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.lang.attributes,
    att.medium.attributes,
    
    ## Marks this hand as the first one of the document.
    attribute initial { data.BOOLEAN }?,
    empty
  }
handList =
  
  ## Container for one or more hand elements.
  element handList {
    model.headLike*,
    ((label?, hand)*)
    >> sch:pattern [
         id = "mei-handList-checkHandListLabels-constraint-rule-67"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:handList[mei:label]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "count(mei:label) = count(mei:hand)"
             "When labels are used,\x{a}" ~
             "            usually each hand has one."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
history =
  
  ## Provides a container for information about the history of a resource other than the circumstances of its creation.
  element history {
    model.headLike*,
    ((acquisition
      | provenance
      | model.divLike
      | model.textComponentLike)*)
    >> sch:pattern [
         id = "mei-history-history_restriction-constraint-rule-68"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:history[parent::mei:work or parent::mei:expression]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(mei:acquisition or mei:provenance)"
             "The acquisition and provenance\x{a}" ~
             "            elements are not permitted in the work or expression context."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
incipCode =
  
  ## Incipit coded in a non-XML, plain text format, such as Plaine & Easie Code.
  element incipCode {
    text
    >> sch:pattern [
         id =
           "mei-incipCode-Check_incipCode_form_mimetype-constraint-rule-69"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:incipCode"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@form or @mimetype"
             "incipCode must have a form or mimetype\x{a}" ~
             "            attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.internetMedia.attributes,
    att.pointing.attributes,
    att.whitespace.attributes,
    
    ## Form of the encoded incipit.
    ## Suggested values include: 1] plaineAndEasie; 2] humdrumKern; 3] parsons
    attribute form {
      
      ## Plaine & Easie Code.
      "plaineAndEasie"
      | 
        ## Humdrum Kern format.
        "humdrumKern"
      | 
        ## Parsons code.
        "parsons"
      | xsd:NMTOKEN
    }?,
    empty
  }
incipText =
  
  ## Opening words of a musical composition.
  element incipText {
    model.headLike*,
    (model.pLike | model.lgLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.pointing.attributes,
    att.internetMedia.attributes,
    empty
  }
inscription =
  
  ## An inscription added to an item, such as a bookplate, a note designating the item as a gift, and/or the author's signature.
  element inscription {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
interpretation =
  
  ## Describes the scope of any analytic or interpretive information added to the transcription of the music.
  element interpretation {
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    empty
  }
key =
  
  ## Key captures information about tonal center and mode.
  element key {
    text,
    att.common.attributes,
    att.accidental.attributes,
    att.bibl.attributes,
    att.pitch.attributes,
    
    ## Indicates major, minor, or other tonality.
    attribute mode { data.MODE }?,
    empty
  }
language =
  
  ## Description of a language used in the document.
  element language {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
langUsage =
  
  ## (language usage) – Groups elements describing the languages, sub-languages, dialects, etc., represented within the encoded resource.
  element langUsage {
    model.headLike*,
    language+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    empty
  }
meiHead =
  
  ## (MEI header) – Supplies the descriptive and declarative metadata prefixed to every MEI-conformant text.
  element meiHead {
    altId*,
    fileDesc,
    encodingDesc?,
    workList?,
    manifestationList?,
    extMeta*,
    (revisionDesc?)
    >> sch:pattern [
         id = "mei-meiHead-check_meiHead_type-constraint-rule-70"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:meiHead[@type eq 'music']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::mei:mei"
             "The meiHead type attribute can have the value 'music'\x{a}" ~
             '            only when the document element is "mei".'
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:meiHead[@type eq 'corpus']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::mei:meiCorpus"
             "The meiHead type attribute can have the value\x{a}" ~
             """            'corpus' only when the document element is "meiCorpus"."""
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:meiHead[@type eq 'independent']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(ancestor::mei:*)"
             "The meiHead type attribute can have the value\x{a}" ~
             """            'independent' only when the document element is "meiHead"."""
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.basic.attributes,
    att.bibl.attributes,
    att.labelled.attributes,
    att.lang.attributes,
    att.meiVersion.attributes,
    att.responsibility.attributes,
    
    ## Specifies the kind of document to which the header is attached, for example whether it is a corpus or individual text.
    attribute type {
      
      ## Header is attached to a music document.
      "music"
      | 
        ## Header is attached to a corpus.
        "corpus"
      | 
        ## Header is independent; i.e., not attached to either a music or a corpus document.
        "independent"
    }?,
    empty
  }
mensuration =
  
  ## Captures information about mensuration within bibliographic descriptions.
  element mensuration {
    text,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.mensur.log.attributes,
    empty
  }
meter =
  
  ## Captures information about the time signature within bibliographic descriptions.
  element meter {
    text,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.meterSig.log.attributes,
    empty
  }
\namespace =
  
  ## Supplies the formal name of the namespace to which the elements documented by its children belong.
  element namespace {
    desc?,
    (tagUsage+ | attUsage+),
    att.common.attributes,
    att.bibl.attributes,
    
    ## Formal namespace identifier; that is, a uniform resource identifier (URI).
    attribute name { data.URI },
    
    ## Prefix associated with the formal identifier.
    attribute prefix { data.NMTOKEN }?,
    empty
  }
normalization =
  
  ## Indicates the extent of normalization or regularization of the original source carried out in converting it to electronic form.
  element normalization {
    model.headLike*,
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    att.regularMethod.attributes,
    empty
  }
notesStmt =
  
  ## (notes statement)– Collects any notes providing information about a text additional to that recorded in other parts of the bibliographic description.
  element notesStmt {
    model.headLike*,
    model.annotLike+,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
otherChar =
  
  ## (other distinguishing characteristic) – Any characteristic that serves to differentiate a work or expression from another.
  element otherChar {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
patch =
  
  ## Describes a physical writing surface attached to the original document.
  element patch {
    (model.foliumLike | model.bifoliumLike)
    >> sch:pattern [
         id = "mei-patch-check_attached_position-constraint-rule-73"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:patch"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "(parent::mei:folium and @attached.to = ('recto','verso')) or              (parent::mei:bifolium and @attached.to = ('outer.recto','inner.verso','inner.recto','outer.verso'))"
             "The allowed positions of a patch depend on its parent element."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(child::node()) gt 0"
             "A patch element must contain either a folium\x{a}" ~
             "            or a bifolium element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.evidence.attributes,
    att.measurement.attributes,
    att.trans.attributes,
    att.xy.attributes,
    
    ## Describes the position of the patch on the parent folium / bifolium.
    attribute attached.to {
      
      ## patch attached to outer recto side of bifolium.
      "outer.recto"
      | 
        ## patch attached to inner verso side of bifolium.
        "inner.verso"
      | 
        ## patch attached to inner recto side of bifolium.
        "inner.recto"
      | 
        ## patch attached to outer verso side of bifolium.
        "outer.verso"
      | 
        ## patch attached to recto side of folium.
        "recto"
      | 
        ## patch attached to verso side of folium.
        "verso"
    },
    
    ## Describes the method of attachment of the patch.
    ## Suggested values include: 1] glue; 2] thread; 3] needle; 4] tape; 5] staple
    attribute attached.by {
      
      ## patch is glued on surface beneath.
      "glue"
      | 
        ## patch is sewn on surface beneath.
        "thread"
      | 
        ## patch is pinned to the surface beneath.
        "needle"
      | 
        ## patch is taped on surface beneath using an adhesive strip.
        "tape"
      | 
        ## patch is attached on surface beneath using a staple.
        "staple"
      | xsd:NMTOKEN
    }?,
    empty
  }
perfDuration =
  
  ## (performance duration) – Used to express the duration of performance of printed or manuscript music or the playing time for a sound recording, videorecording, etc.
  element perfDuration {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Holds a W3C duration value, e.g., "PT2H34M45.67S".
    attribute isodur { xsd:duration }?,
    empty
  }
perfMedium =
  
  ## (performance medium) – Indicates the number and character of the performing forces used in a musical composition.
  element perfMedium {
    model.headLike*,
    castList?,
    perfResList?,
    model.annotLike*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    empty
  }
perfRes =
  
  ## (performance resource) – Name of an instrument on which a performer plays, a performer's voice range, or a standard performing ensemble designation.
  element perfRes {
    (text | model.perfResPart)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.lang.attributes,
    
    ## Indicates the number of performers.
    attribute count { xsd:positiveInteger }?,
    
    ## Marks this instrument or vocal part as a soloist. Do not use this attribute for a solo instrument which is not accompanied.
    attribute solo { data.BOOLEAN }?,
    empty
  }
perfResList =
  
  ## Several instrumental or vocal resources treated as a group.
  element perfResList {
    model.headLike*,
    (annot | perfRes | perfResList)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.lang.attributes,
    
    ## Indicates the number of performers.
    attribute count { xsd:positiveInteger }?,
    empty
  }
physDesc =
  
  ## (physical description) – Container for information about the appearance, construction, or handling of physical materials, such as their dimension, quantity, color, style, and technique of creation.
  element physDesc {
    model.headLike*,
    model.pLike*,
    model.physDescPart*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
physMedium =
  
  ## (physical medium) – Records the physical materials used in the source, such as ink and paper.
  element physMedium {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
plateNum =
  
  ## (plate number) – Designation assigned to a resource by a music publisher, usually printed at the bottom of each page, and sometimes appearing also on the title page.
  element plateNum {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
playingSpeed =
  
  ## Playing speed for a sound recording is the speed at which the carrier must be operated to produce the sound intended (e.g., 33 1/3 rpm, 19 cm/s, etc.).
  element playingSpeed {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
price =
  
  ## The cost of access to a bibliographic item.
  element price {
    model.headLike*,
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    
    ## Numeric value capturing a cost. Can only be interpreted in combination with the currency attribute.
    attribute amount {
      xsd:decimal { pattern = "[0-9]+\.[0-9]{2}" }
    }?,
    
    ## Monetary unit.
    attribute currency { xsd:NMTOKEN }?,
    empty
  }
projectDesc =
  
  ## (project description) – Project-level meta-data describing the aim or purpose for which the electronic file was encoded, funding agencies, etc. together with any other relevant information concerning the process by which it was assembled or collected.
  element projectDesc {
    model.headLike*,
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    empty
  }
provenance =
  
  ## The record of ownership or custodianship of an item.
  element provenance {
    ((model.headLike*, (eventList | model.pLike)*)
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.lang.attributes,
    empty
  }
pubStmt =
  
  ## (publication statement) – Container for information regarding the publication or distribution of a bibliographic item, including the publisher's name and address, the date of publication, and other relevant details.
  element pubStmt {
    model.headLike*,
    (unpub? | model.pubStmtPart*),
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
revisionDesc =
  
  ## (revision description) – Container for information about alterations that have been made to an MEI file.
  element revisionDesc {
    model.headLike*,
    change+,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
samplingDecl =
  
  ## (sampling declaration) – Contains a prose description of the rationale and methods used in sampling texts in the creation of a corpus or collection.
  element samplingDecl {
    model.headLike*,
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    empty
  }
scoreFormat =
  
  ## Describes the type of score used to represent a musical composition (e.g., short score, full score, condensed score, close score, etc.).
  element scoreFormat {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
segmentation =
  
  ## Describes the principles according to which the musical text has been segmented, for example into movements, sections, etc.
  element segmentation {
    model.headLike*,
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    empty
  }
seriesStmt =
  
  ## (series statement) – Groups information about the series, if any, to which a publication belongs.
  element seriesStmt {
    model.headLike*,
    model.titleLike+,
    (model.respLikePart | respStmt)*,
    (model.identifierLike | biblScope | contents | seriesStmt)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
soundChan =
  
  ## (sound channels) – Reflects the number of apparent sound channels in the playback of a recording (monaural, stereophonic, quadraphonic, etc.).
  element soundChan {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    
    ## Records the channel configuration in numeric form.
    attribute num { xsd:positiveInteger }?,
    empty
  }
source =
  
  ## A bibliographic description of a source used in the creation of the electronic file.
  element source {
    model.headLike*,
    (locus | locusGrp)*,
    (model.biblLike*)
    >> sch:pattern [
         id = "mei-source-check_source_target-constraint-rule-74"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:source/@target"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(normalize-space(.) eq '')"
             "@target attribute should\x{a}" ~
             "            have content."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test =
               "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[local-name()              eq 'source' or local-name() eq 'manifestation']/@xml:id or matches($i, '^([a-z]+://|\.{1,2}/)')"
             "Each value in @target should correspond to the @xml:id attribute of a source or\x{a}" ~
             "            manifestation element or be an external URI."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.componentType.attributes,
    att.dataPointing.attributes,
    att.pointing.attributes,
    att.recordType.attributes,
    att.targetEval.attributes,
    empty
  }
sourceDesc =
  
  ## (source description) – A container for the descriptions of the source(s) used in the creation of the electronic file.
  element sourceDesc {
    model.headLike*, source+, att.common.attributes, empty
  }
specRepro =
  
  ## (special reproduction characteristic) – The equalization system, noise reduction system, etc. used in making the recording (e.g., NAB, DBX, Dolby, etc.).
  element specRepro {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
stdVals =
  
  ## (standard values) – Specifies the format used when standardized date or number values are supplied.
  element stdVals {
    model.headLike*,
    model.pLike+,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    empty
  }
sysReq =
  
  ## (system requirements) – System requirements for using the electronic item.
  element sysReq {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
tagsDecl =
  
  ## (tagging declaration) – Provides detailed information about the tagging applied to a document.
  element tagsDecl {
    model.headLike*,
    desc?,
    \namespace*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
tagUsage =
  
  ## Documents the usage of a specific element within the document.
  element tagUsage {
    desc?,
    (attUsage*)
    >> sch:pattern [
         id =
           "mei-tagUsage-context_attribute_requires_content-constraint-rule-75"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "@context"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(normalize-space(.) eq '')"
             "@context attribute should\x{a}" ~
             "            contain an XPath expression."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    
    ## Name of the element.
    attribute name { data.NMTOKEN },
    
    ## Circumstances in which the element appears, an XPath expression.
    attribute context { xsd:string }?,
    
    ## Number of occurrences in the defined context.
    attribute occurs { xsd:nonNegativeInteger }?,
    [
      a:documentation [
        "Number of occurrences in the defined context that have an "
        ns1:code [ "@xml:id" ]
        " attribute."
      ]
    ]
    attribute withid { xsd:nonNegativeInteger }?,
    empty
  }
taxonomy =
  
  ## Defines a typology either implicitly, by means of a bibliographic citation, or explicitly by a structured taxonomy.
  element taxonomy {
    model.headLike*,
    model.biblLike?,
    desc*,
    (category | taxonomy)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
termList =
  
  ## Collection of text phrases which describe a resource.
  element termList {
    model.headLike*,
    ((label?, term)*)
    >> sch:pattern [
         id = "mei-termList-checkTermListLabels-constraint-rule-76"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:termList[mei:label]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "count(mei:label) = count(mei:term)"
             "When labels are used,\x{a}" ~
             "            usually each term has one."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.pointing.attributes,
    empty
  }
titleStmt =
  
  ## (title statement) – Container for title and responsibility meta-data.
  element titleStmt {
    model.headLike*,
    model.titleLike+,
    model.respLike*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
trackConfig =
  
  ## (track configuration) – Number of physical/input tracks on a sound medium (e.g., eight track, twelve track).
  element trackConfig {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    
    ## Records the track configuration in numeric form.
    attribute num { xsd:positiveInteger }?,
    empty
  }
treatHist =
  
  ## (treatment history) – A record of the treatment the item has undergone (e.g., de-acidification, restoration, etc.).
  element treatHist {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
treatSched =
  
  ## (treatment scheduled) – Scheduled treatment, e.g. de-acidification, restoration, etc., for an item.
  element treatSched {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
unpub =
  
  ## (unpublished) – Used to explicitly indicate that a bibliographic resource is unpublished.
  element unpub {
    text,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
useRestrict =
  
  ## (usage restrictions) – Container for information about the conditions that affect use of a bibliographic item after access has been granted.
  element useRestrict {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
watermark =
  
  ## Contains a description of a watermark or similar device.
  element watermark {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
work =
  
  ## Provides a detailed description of a work — a distinct intellectual or artistic creation — specifically its history, language use, and high-level musical attributes (e.g., key, tempo, meter, medium of performance, and intended duration).
  element work {
    model.headLike*,
    model.identifierLike*,
    model.titleLike+,
    model.respLikePart*,
    model.workIdent*,
    otherChar*,
    creation?,
    history?,
    langUsage?,
    perfMedium?,
    perfDuration?,
    audience?,
    contents?,
    context?,
    biblList*,
    notesStmt?,
    classification?,
    expressionList?,
    componentList?,
    relationList?,
    extMeta*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    empty
  }
workList =
  
  ## (work list) – Grouping mechanism for information describing non-bibliographic aspects of a text.
  element workList {
    model.headLike*, work+, att.common.attributes, empty
  }
att.lyrics.log.attributes =
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.staffIdent.attributes
att.refrain.log.attributes = empty
att.verse.log.attributes = empty
att.volta.log.attributes = empty
model.verseLike = refrain | verse
model.verseLike_alternation = refrain | verse
model.verseLike_sequence = refrain, verse
model.verseLike_sequenceOptional = refrain?, verse?
model.verseLike_sequenceOptionalRepeatable = refrain*, verse*
model.verseLike_sequenceRepeatable = refrain+, verse+
refrain =
  
  ## Recurring lyrics, especially at the end of each verse or stanza of a poem or song lyrics; a chorus.
  element refrain {
    (dir | dynam | tempo | space)*,
    (volta | model.sylLike | model.appLike)+,
    model.lbLike*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.refrain.log.attributes,
    att.refrain.vis.attributes,
    att.refrain.ges.attributes,
    att.refrain.anl.attributes,
    empty
  }
verse =
  
  ## Division of a poem or song lyrics, sometimes having a fixed length, meter or rhyme scheme; a stanza.
  element verse {
    label*,
    labelAbbr*,
    (dir | dynam | tempo | space)*,
    (volta | model.sylLike | model.appLike)+,
    model.lbLike*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.verse.log.attributes,
    att.verse.vis.attributes,
    att.verse.ges.attributes,
    att.verse.anl.attributes,
    empty
  }
volta =
  
  ## Sung text for a specific iteration of a repeated section of music.
  element volta {
    (dir | dynam | tempo | space)*,
    (model.sylLike | model.appLike)+,
    model.lbLike*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.volta.log.attributes,
    att.volta.vis.attributes,
    att.volta.ges.attributes,
    att.volta.anl.attributes,
    empty
  }
att.ligature.log.attributes = att.ligature.log.attribute.form
att.ligature.log.attribute.form =
  
  ## Provides an indication of the function of the ligature.
  attribute form { data.LIGATUREFORM }?
att.mensural.log.attributes =
  att.mensural.shared.attributes,
  att.mensural.log.attribute.mensur.dot,
  att.mensural.log.attribute.mensur.sign,
  att.mensural.log.attribute.mensur.slash,
  att.mensural.log.attribute.proport.num,
  att.mensural.log.attribute.proport.numbase
att.mensural.log.attribute.mensur.dot =
  
  ## Determines if a dot is to be added to the base symbol.
  attribute mensur.dot { data.BOOLEAN }?
att.mensural.log.attribute.mensur.sign =
  
  ## The base symbol in the mensuration sign/time signature of mensural notation.
  attribute mensur.sign { data.MENSURATIONSIGN }?
att.mensural.log.attribute.mensur.slash =
  
  ## Indicates the number lines added to the mensuration sign. For example, one slash is added for what we now call 'alla breve'.
  attribute mensur.slash { xsd:positiveInteger }?
att.mensural.log.attribute.proport.num =
  
  ## Together, proport.num and proport.numbase specify a proportional change as a ratio, e.g., 1:3. Proport.num is for the first value in the ratio.
  attribute proport.num { xsd:positiveInteger }?
att.mensural.log.attribute.proport.numbase =
  
  ## Together, proport.num and proport.numbase specify a proportional change as a ratio, e.g., 1:3. Proport.numbase is for the second value in the ratio.
  attribute proport.numbase { xsd:positiveInteger }?
att.mensural.shared.attributes =
  att.mensural.shared.attribute.modusmaior,
  att.mensural.shared.attribute.modusminor,
  att.mensural.shared.attribute.prolatio,
  att.mensural.shared.attribute.tempus
att.mensural.shared.attribute.modusmaior =
  
  ## Describes the maxima-long relationship.
  attribute modusmaior { data.MODUSMAIOR }?
att.mensural.shared.attribute.modusminor =
  
  ## Describes the long-breve relationship.
  attribute modusminor { data.MODUSMINOR }?
att.mensural.shared.attribute.prolatio =
  
  ## Describes the semibreve-minim relationship.
  attribute prolatio { data.PROLATIO }?
att.mensural.shared.attribute.tempus =
  
  ## Describes the breve-semibreve relationship.
  attribute tempus { data.TEMPUS }?
att.note.anl.mensural.attributes = att.note.anl.mensural.attribute.lig
att.note.anl.mensural.attribute.lig =
  
  ## Indicates this element's participation in a ligature.
  attribute lig {
    
    ##
    "recta"
    | 
      ##
      "obliqua"
  }?
att.note.ges.mensural.attributes = att.duration.ratio.attributes
att.note.log.mensural.attributes = empty
att.proport.log.attributes = att.duration.ratio.attributes
att.rest.ges.mensural.attributes = att.duration.ratio.attributes
att.rest.vis.mensural.attributes =
  att.rest.vis.mensural.attribute.spaces
att.rest.vis.mensural.attribute.spaces =
  
  ## States how many spaces are covered by the rest.
  attribute spaces { xsd:positiveInteger }?
att.scoreDef.log.mensural.attributes = att.mensural.log.attributes
att.scoreDef.vis.mensural.attributes = att.mensural.vis.attributes
att.staffDef.log.mensural.attributes = att.mensural.log.attributes
att.staffDef.vis.mensural.attributes = att.mensural.vis.attributes
model.eventLike.mensural = ligature | mensur | proport
model.eventLike.mensural_alternation = ligature | mensur | proport
model.eventLike.mensural_sequence = ligature, mensur, proport
model.eventLike.mensural_sequenceOptional = ligature?, mensur?, proport?
model.eventLike.mensural_sequenceOptionalRepeatable =
  ligature*, mensur*, proport*
model.eventLike.mensural_sequenceRepeatable =
  ligature+, mensur+, proport+
model.layerPart.mensural =
  model.eventLike.mensural | model.noteModifierLike
model.layerPart.mensural_alternation =
  model.eventLike.mensural_alternation
  | model.noteModifierLike_alternation
model.layerPart.mensural_sequence =
  model.eventLike.mensural_sequence, model.noteModifierLike_sequence
model.layerPart.mensural_sequenceOptional =
  model.eventLike.mensural_sequenceOptional?,
  model.noteModifierLike_sequenceOptional?
model.layerPart.mensural_sequenceOptionalRepeatable =
  model.eventLike.mensural_sequenceOptionalRepeatable*,
  model.noteModifierLike_sequenceOptionalRepeatable*
model.layerPart.mensural_sequenceRepeatable =
  model.eventLike.mensural_sequenceRepeatable+,
  model.noteModifierLike_sequenceRepeatable+
model.sectionPart.mensural = notAllowed
model.sectionPart.mensural_alternation = notAllowed
model.sectionPart.mensural_sequence = empty
model.sectionPart.mensural_sequenceOptional = empty
model.sectionPart.mensural_sequenceOptionalRepeatable = empty
model.sectionPart.mensural_sequenceRepeatable = notAllowed
model.staffDefPart.mensural = mensur | proport
model.staffPart.mensural = model.controlEventLike
model.staffPart.mensural_alternation =
  model.controlEventLike_alternation
model.staffPart.mensural_sequence = model.controlEventLike_sequence
model.staffPart.mensural_sequenceOptional =
  model.controlEventLike_sequenceOptional?
model.staffPart.mensural_sequenceOptionalRepeatable =
  model.controlEventLike_sequenceOptionalRepeatable*
model.staffPart.mensural_sequenceRepeatable =
  model.controlEventLike_sequenceRepeatable+
ligature =
  
  ## A mensural notation symbol that combines two or more notes into a single sign.
  element ligature {
    (model.appLike
     | model.editLike
     | model.eventLike
     | model.eventLike.mensural
     | model.eventLike.neumes
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.ligature.log.attributes,
    att.ligature.vis.attributes,
    att.ligature.ges.attributes,
    att.ligature.anl.attributes,
    empty
  }
mensur =
  
  ## (mensuration) – Collects information about the metrical relationship between a note value and the next smaller value; that is, either triple or duple.
  element mensur {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.mensur.log.attributes,
    att.mensur.vis.attributes,
    att.mensur.ges.attributes,
    att.mensur.anl.attributes,
    empty
  }
proport =
  
  ## (proportion) – Description of note duration as arithmetic ratio.
  element proport {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.proport.log.attributes,
    att.proport.vis.attributes,
    att.proport.ges.attributes,
    att.proport.anl.attributes,
    empty
  }
att.channelized.attributes =
  att.channelized.attribute.midi.channel,
  att.channelized.attribute.midi.duty,
  att.channelized.attribute.midi.port,
  att.channelized.attribute.midi.track
att.channelized.attribute.midi.channel =
  
  ## Records a MIDI channel value.
  attribute midi.channel { data.MIDICHANNEL }?
att.channelized.attribute.midi.duty =
  
  ## Specifies the 'on' part of the duty cycle as a percentage of a note's duration.
  attribute midi.duty { data.PERCENT.LIMITED }?
att.channelized.attribute.midi.port =
  
  ## Sets the MIDI port value.
  attribute midi.port { data.MIDIVALUE_NAME }?
att.channelized.attribute.midi.track =
  
  ## Sets the MIDI track.
  attribute midi.track { xsd:positiveInteger }?
att.instrDef.log.attributes = empty
att.instrumentIdent.attributes = att.instrumentIdent.attribute.instr
att.instrumentIdent.attribute.instr =
  [
    a:documentation [
      "Provides a way of pointing to a MIDI instrument definition. It must contain the ID of an "
      ns1:code [ "<instrDef>" ]
      " element elsewhere in the document."
    ]
  ]
  attribute instr { data.URI }?
sch:pattern [
  id =
    "mei-att.instrumentIdent-instr-check_instrTarget-constraint-rule-77"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@instr"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@instr attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:instrDef/@xml:id"
      "The value in @instr should correspond to the @xml:id attribute of an instrDef\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.midi.event.attributes =
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.staffIdent.attributes,
  att.timestamp.logical.attributes,
  att.timestamp.gestural.attributes
att.midi.log.attributes =
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.staffIdent.attributes
att.midiInstrument.attributes =
  att.midiInstrument.attribute.midi.instrnum,
  att.midiInstrument.attribute.midi.instrname,
  att.midiInstrument.attribute.midi.pan,
  att.midiInstrument.attribute.midi.patchname,
  att.midiInstrument.attribute.midi.patchnum,
  att.midiInstrument.attribute.midi.volume
att.midiInstrument.attribute.midi.instrnum =
  
  ## Captures the General MIDI instrument number. Use an integer for a 0-based value. An integer preceded by "in" indicates a 1-based value.
  attribute midi.instrnum { data.MIDIVALUE }?
att.midiInstrument.attribute.midi.instrname =
  
  ## Provides a General MIDI label for the MIDI instrument.
  attribute midi.instrname { data.MIDINAMES }?
att.midiInstrument.attribute.midi.pan =
  
  ## Sets the instrument's position in a stereo field. MIDI values of 0 and 1 both pan left, 127 or 128 pans right, and 63 or 64 pans to the center. Positve percentage values pan to the right, negative ones to the left. 0% is centered.
  attribute midi.pan { data.MIDIVALUE_PAN }?
att.midiInstrument.attribute.midi.patchname =
  
  ## Records a non-General MIDI patch/instrument name.
  attribute midi.patchname { xsd:NMTOKEN }?
att.midiInstrument.attribute.midi.patchnum =
  
  ## Records a non-General MIDI patch/instrument number.
  attribute midi.patchnum { data.MIDIVALUE }?
att.midiInstrument.attribute.midi.volume =
  
  ## Sets the instrument's volume.
  attribute midi.volume { text }?
sch:pattern [
  id =
    "mei-att.midiInstrument-One_of_instrname_or_instrnum-constraint-rule-78"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@midi.instrname]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "not(@midi.instrnum)"
      "Only one of @midi.instrname and @midi.instrnum\x{a}" ~
      "            allowed."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id =
    "mei-att.midiInstrument-One_of_patchname_or_patchnum-constraint-rule-79"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@midi.patchname]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "not(@midi.patchnum)"
      "Only one of @midi.patchname and @midi.patchnum\x{a}" ~
      "            allowed."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.midiNumber.attributes = att.midiNumber.attribute.num
att.midiNumber.attribute.num =
  
  ## MIDI number in the range set by data.MIDIVALUE.
  attribute num { data.MIDIVALUE }
att.midiTempo.attributes =
  att.midiTempo.attribute.midi.bpm, att.midiTempo.attribute.midi.mspb
att.midiTempo.attribute.midi.bpm =
  
  ## Captures the number of *quarter notes* per minute. In MIDI, a beat is always defined as a quarter note, *not the numerator of the time signature or the metronomic indication*.
  attribute midi.bpm { data.MIDIBPM }?
att.midiTempo.attribute.midi.mspb =
  
  ## Records the number of microseconds per *quarter note*. In MIDI, a beat is always defined as a quarter note, *not the numerator of the time signature or the metronomic indication*. At 120 quarter notes per minute, each quarter note will last 500,000 microseconds.
  attribute midi.mspb { data.MIDIMSPB }?
att.midiValue.attributes = att.midiValue.attribute.val
att.midiValue.attribute.val =
  
  ## MIDI number.
  attribute val { data.MIDIVALUE }?
att.midiValue2.attributes = att.midiValue2.attribute.val2
att.midiValue2.attribute.val2 =
  
  ## MIDI number.
  attribute val2 { data.MIDIVALUE }?
att.midiVelocity.attributes = att.midiVelocity.attribute.vel
att.midiVelocity.attribute.vel =
  
  ## MIDI Note-on/off velocity.
  attribute vel { data.MIDIVALUE }?
att.timeBase.attributes = att.timeBase.attribute.ppq
att.timeBase.attribute.ppq =
  
  ## Indicates the number of pulses (sometimes referred to as ticks or divisions) per quarter note. Unlike MIDI, MEI permits different values for a score and individual staves.
  attribute ppq { xsd:positiveInteger }?
model.midiLike = midi
model.midiLike_alternation = midi
model.midiLike_sequence = midi
model.midiLike_sequenceOptional = midi?
model.midiLike_sequenceOptionalRepeatable = midi*
model.midiLike_sequenceRepeatable = midi+
cc =
  
  ## (control change) – MIDI parameter/control change.
  element cc {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    att.midiNumber.attributes,
    att.midiValue.attributes,
    empty
  }
chan =
  
  ## (channel) – MIDI channel assignment.
  element chan {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    
    ## MIDI number in the range set by data.MIDICHANNEL.
    attribute num { data.MIDICHANNEL },
    empty
  }
chanPr =
  
  ## (channel pressure) – MIDI channel pressure/after touch.
  element chanPr {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    att.midiNumber.attributes,
    empty
  }
cue =
  
  ## MIDI cue point.
  element cue {
    text,
    att.common.attributes,
    att.lang.attributes,
    att.midi.event.attributes,
    empty
  }
hex =
  
  ## Arbitrary MIDI data in hexadecimal form.
  element hex {
    text, att.common.attributes, att.midi.event.attributes, empty
  }
instrDef =
  
  ## (instrument definition) – MIDI instrument declaration.
  element instrDef {
    empty,
    att.common.attributes,
    att.instrDef.anl.attributes,
    att.instrDef.ges.attributes,
    att.instrDef.log.attributes,
    att.instrDef.vis.attributes,
    empty
  }
instrGrp =
  
  ## (instrument group) – Collects MIDI instrument definitions.
  element instrGrp { model.instrDefLike+, att.common.attributes, empty }
metaText =
  
  ## MIDI text meta-event.
  element metaText {
    text,
    att.common.attributes,
    att.lang.attributes,
    att.midi.event.attributes,
    empty
  }
midi =
  
  ## Container for elements that contain information useful when generating MIDI output.
  element midi {
    (cc
     | chan
     | chanPr
     | cue
     | hex
     | metaText
     | noteOff
     | noteOn
     | port
     | prog
     | seqNum
     | trkName
     | vel)*,
    att.common.attributes,
    att.midi.log.attributes,
    att.midi.vis.attributes,
    att.midi.ges.attributes,
    att.midi.anl.attributes,
    empty
  }
noteOff =
  
  ## MIDI note-off event.
  element noteOff {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    att.midiNumber.attributes,
    empty
  }
noteOn =
  
  ## MIDI note-on event.
  element noteOn {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    att.midiNumber.attributes,
    empty
  }
port =
  
  ## MIDI port.
  element port {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    att.midiNumber.attributes,
    empty
  }
prog =
  
  ## (program) – MIDI program change.
  element prog {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    att.midiNumber.attributes,
    empty
  }
seqNum =
  
  ## (sequence number) – MIDI sequence number.
  element seqNum {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    
    ## Number in the range 0-65535.
    attribute num {
      xsd:nonNegativeInteger { maxInclusive = "65535" }
    },
    empty
  }
trkName =
  
  ## (track name) – MIDI track/sequence name.
  element trkName {
    text,
    att.common.attributes,
    att.lang.attributes,
    att.midi.event.attributes,
    empty
  }
vel =
  
  ## (velocity) – MIDI Note-on/off velocity.
  element vel {
    empty,
    att.common.attributes,
    att.midi.event.attributes,
    att.midiNumber.attributes,
    
    ## Indicates whether this is note-on or note-off velocity data.
    attribute form {
      
      ## Note-on velocity.
      "on"
      | 
        ## Note-off velocity.
        "off"
    },
    empty
  }
att.componentType.attributes = att.componentType.attribute.comptype
att.componentType.attribute.comptype =
  
  ##
  attribute comptype {
    
    ## A physical and logical part of entity.
    "constituent"
    | 
      ## A physical, but not logical component of the entity, usually included as part of the binding process.
      "boundwith"
    | 
      ## A logical component of the entity physically held elsewhere.
      "separated"
  }?
sch:pattern [
  id =
    "mei-att.componentType-comptype-checkComponentType-constraint-rule-80"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@comptype]"
    "\x{a}" ~
    "         "
    sch:let [ name = "elementName" value = "local-name()" ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "ancestor::mei:componentList"
      "The comptype attribute may occur on\x{a}" ~
      "                "
      sch:value-of [ select = "$elementName" ]
      " only when it is a descendant of a\x{a}" ~
      "                componentList."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
model.msInline =
  fingerprint
  | watermark
  | catchwords
  | heraldry
  | locus
  | locusGrp
  | secFolio
  | signatures
  | stamp
model.msInline_alternation =
  fingerprint
  | watermark
  | catchwords
  | heraldry
  | locus
  | locusGrp
  | secFolio
  | signatures
  | stamp
model.msInline_sequence =
  fingerprint,
  watermark,
  catchwords,
  heraldry,
  locus,
  locusGrp,
  secFolio,
  signatures,
  stamp
model.msInline_sequenceOptional =
  fingerprint?,
  watermark?,
  catchwords?,
  heraldry?,
  locus?,
  locusGrp?,
  secFolio?,
  signatures?,
  stamp?
model.msInline_sequenceOptionalRepeatable =
  fingerprint*,
  watermark*,
  catchwords*,
  heraldry*,
  locus*,
  locusGrp*,
  secFolio*,
  signatures*,
  stamp*
model.msInline_sequenceRepeatable =
  fingerprint+,
  watermark+,
  catchwords+,
  heraldry+,
  locus+,
  locusGrp+,
  secFolio+,
  signatures+,
  stamp+
accMat =
  
  ## Holds a description of any additional material bound with an item, such as non-contemporaneous documents or fragments.
  element accMat {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
addDesc =
  
  ## (addition description) – Provides a description of significant additions found within an item, such as marginalia or other annotations.
  element addDesc {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
binding =
  
  ## (binding) – Contains a description of one binding, i.e. type of covering, boards, etc. applied to an item.
  element binding {
    head*,
    (condition | decoNote | dimensions | p)*,
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.lang.attributes,
    
    ##
    attribute contemporary { data.BOOLEAN }?,
    empty
  }
bindingDesc =
  
  ## (binding description) – Describes the present and former bindings of an item.
  element bindingDesc {
    head*,
    ((binding*, (condition | decoNote | p)*)
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
catchwords =
  
  ## Describes the system used to ensure correct ordering of the quires making up an item, typically by means of annotations at the foot of the page.
  element catchwords {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
collation =
  
  ## Records a description of how the leaves or bifolia of an item are physically arranged.
  element collation {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
colophon =
  
  ## Contains a statement providing information regarding the date, place, agency, or reason for production of the item.
  element colophon {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
decoDesc =
  
  ## (decoration description) – Contains a description of the decoration of an item.
  element decoDesc {
    ((head*, (condition | decoNote | p)*)
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
decoNote =
  
  ## (decoration note) – Contains a description of one or more decorative features of an item.
  element decoNote {
    ((head*, (condition | decoNote | p)*)
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
explicit =
  
  ## Contains the explicit of a manuscript item; that is, the closing words of the text proper, exclusive of any rubric or colophon which might follow it.
  element explicit {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
foliation =
  
  ## Describes the numbering system or systems used to count the leaves or pages in a codex.
  element foliation {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
heraldry =
  
  ## Contains a heraldic formula or phrase, typically found as part of a blazon, coat of arms, etc.
  element heraldry {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
layout =
  
  ## Describes how text is laid out on the page, including information about any ruling, pricking, or other evidence of page-preparation techniques.
  element layout {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    
    ## Specifies the number of columns per page.
    attribute cols {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    
    ## Specifies the number of ruled text lines per column.
    attribute ruledlines {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    
    ## Specifies the number of written text lines per column.
    attribute writtenlines {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    
    ## Specifies the number of ruled staves per column.
    attribute ruledstaves {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    
    ## Specifies the number of written staves per column.
    attribute writtenstaves {
      list { xsd:nonNegativeInteger, xsd:nonNegativeInteger? }
    }?,
    empty
  }
layoutDesc =
  
  ## (layout description) – Collects layout descriptions.
  element layoutDesc {
    ((head*, (p | layout)*)
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
locus =
  
  ## Defines a location within a manuscript or manuscript component, usually as a (possibly discontinuous) sequence of folio references.
  element locus {
    (text | locus | rend | symbol)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    
    ## Identifies the foliation scheme in terms of which the location is being specified by pointing to some foliation element defining it, or to some other equivalent resource.
    attribute scheme { data.URI }?,
    
    ## Specifies the starting point of the location in a normalized form.
    attribute from { data.WORD }?,
    
    ## Specifies the end-point of the location in a normalized form.
    attribute to { data.WORD }?,
    empty
  }
locusGrp =
  
  ## (locus group) – Groups locations which together form a distinct but discontinuous item within a manuscript or manuscript part, according to a specific foliation.
  element locusGrp {
    locus*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    
    ## Identifies the foliation scheme in terms of which the location is being specified by pointing to some foliation element defining it, or to some other equivalent resource.
    attribute scheme { data.URI }?,
    empty
  }
rubric =
  
  ## Contains a string of words through which a manuscript signals the beginning or end of a text division, often with an assertion as to its author and title, which is in some way set off from the text itself, usually in red ink, or by use of different size or type of script, or some other such visual device.
  element rubric {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ##
    attribute func {
      
      ## Signals beginning of a text division.
      "initial"
      | 
        ## Makrs the end of a text division.
        "final"
    }?,
    empty
  }
scriptDesc =
  
  ## (script description) – Contains a description of the letters or characters used in an autographic item.
  element scriptDesc {
    ((head*, p*, scriptNote*) | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
scriptNote =
  
  ## (script note) – Describes a particular script distinguished within the description of an autographic item.
  element scriptNote {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
seal =
  
  ## A single seal or similar attachment.
  element seal {
    ((head*, (condition | decoNote | p)*)
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.lang.attributes,
    
    ##
    attribute contemporary { data.BOOLEAN }?,
    empty
  }
sealDesc =
  
  ## (seal description) – Describes the seals or similar external attachments applied to an item.
  element sealDesc {
    ((head*,
      (seal* | (condition | decoNote | p)*))
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
secFolio =
  
  ## (second folio) – Marks the word or words taken from a fixed point in a codex (typically the beginning of the second leaf) in order to provide a unique identifier for the item.
  element secFolio {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
signatures =
  
  ## Provides a description of the leaf or quire signatures found within a codex.
  element signatures {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
stamp =
  
  ## Contains a word or phrase describing an official mark indicating ownership, genuineness, validity, etc.
  element stamp {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
support =
  
  ## Provides a description of the physical support material of a written item.
  element support {
    head*,
    (condition | decoNote | dimensions | p)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
supportDesc =
  
  ## (support description) – Groups elements describing the physical support material of an item.
  element supportDesc {
    ((head*,
      (p* | (support?, foliation?, collation?, condition?)))
     | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    
    ## Short, project-defined name for the material composing the majority of the support.
    ## Suggested values include: 1] paper; 2] parch; 3] mixed
    attribute material {
      
      ## Paper.
      "paper"
      | 
        ## Parchment.
        "parch"
      | 
        ## Mixed materials.
        "mixed"
      | xsd:NMTOKEN
    }?,
    empty
  }
typeDesc =
  
  ## (type description) – Contains a description of the typefaces or other aspects of the printing of a printed source.
  element typeDesc {
    ((head*, p*, typeNote*) | (text | model.textPhraseLike.limited)*),
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
typeNote =
  
  ## (type note) – Describes a particular font or other significant typographic feature of a printed resource.
  element typeNote {
    macro.struc-unstrucContent,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
model.addressPart = model.geogNamePart | postBox | postCode | street
model.addressPart_alternation =
  model.geogNamePart_alternation | postBox | postCode | street
model.addressPart_sequence =
  model.geogNamePart_sequence, postBox, postCode, street
model.addressPart_sequenceOptional =
  model.geogNamePart_sequenceOptional?, postBox?, postCode?, street?
model.addressPart_sequenceOptionalRepeatable =
  model.geogNamePart_sequenceOptionalRepeatable*,
  postBox*,
  postCode*,
  street*
model.addressPart_sequenceRepeatable =
  model.geogNamePart_sequenceRepeatable+, postBox+, postCode+, street+
model.geogNamePart =
  bloc | country | district | geogFeat | region | settlement
model.geogNamePart_alternation =
  bloc | country | district | geogFeat | region | settlement
model.geogNamePart_sequence =
  bloc, country, district, geogFeat, region, settlement
model.geogNamePart_sequenceOptional =
  bloc?, country?, district?, geogFeat?, region?, settlement?
model.geogNamePart_sequenceOptionalRepeatable =
  bloc*, country*, district*, geogFeat*, region*, settlement*
model.geogNamePart_sequenceRepeatable =
  bloc+, country+, district+, geogFeat+, region+, settlement+
model.nameLike.agent = corpName | persName
model.nameLike.agent_alternation = corpName | persName
model.nameLike.agent_sequence = corpName, persName
model.nameLike.agent_sequenceOptional = corpName?, persName?
model.nameLike.agent_sequenceOptionalRepeatable = corpName*, persName*
model.nameLike.agent_sequenceRepeatable = corpName+, persName+
model.nameLike.geogName = geogName
model.nameLike.geogName_alternation = geogName
model.nameLike.geogName_sequence = geogName
model.nameLike.geogName_sequenceOptional = geogName?
model.nameLike.geogName_sequenceOptionalRepeatable = geogName*
model.nameLike.geogName_sequenceRepeatable = geogName+
model.nameLike.label = periodName | styleName
model.nameLike.label_alternation = periodName | styleName
model.nameLike.label_sequence = periodName, styleName
model.nameLike.label_sequenceOptional = periodName?, styleName?
model.nameLike.label_sequenceOptionalRepeatable =
  periodName*, styleName*
model.nameLike.label_sequenceRepeatable = periodName+, styleName+
model.nameLike.place = model.nameLike.geogName | model.repositoryLike
model.nameLike.place_alternation =
  model.nameLike.geogName_alternation | model.repositoryLike_alternation
model.nameLike.place_sequence =
  model.nameLike.geogName_sequence, model.repositoryLike_sequence
model.nameLike.place_sequenceOptional =
  model.nameLike.geogName_sequenceOptional?,
  model.repositoryLike_sequenceOptional?
model.nameLike.place_sequenceOptionalRepeatable =
  model.nameLike.geogName_sequenceOptionalRepeatable*,
  model.repositoryLike_sequenceOptionalRepeatable*
model.nameLike.place_sequenceRepeatable =
  model.nameLike.geogName_sequenceRepeatable+,
  model.repositoryLike_sequenceRepeatable+
model.persNamePart =
  addName | famName | foreName | genName | nameLink | roleName
addName =
  
  ## (additional name) – Contains an additional name component, such as a nickname, epithet, or alias, or any other descriptive phrase used within a personal name.
  element addName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
bloc =
  
  ## Contains the name of a geopolitical unit consisting of two or more nation states or countries.
  element bloc {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
corpName =
  
  ## (corporate name) – Identifies an organization or group of people that acts as a single entity.
  element corpName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
country =
  
  ## Contains the name of a geopolitical unit, such as a nation, country, colony, or commonwealth, larger than or administratively superior to a region and smaller than a bloc.
  element country {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
district =
  
  ## Contains the name of any kind of subdivision of a settlement, such as a parish, ward, or other administrative or geographic unit.
  element district {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
famName =
  
  ## (family name) – Contains a family (inherited) name, as opposed to a given, baptismal, or nick name.
  element famName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike
     | nameLink)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
foreName =
  
  ## Contains a forename, given or baptismal name.
  element foreName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
genName =
  
  ## (generational name component) – Contains a name component used to distinguish otherwise similar names on the basis of the relative ages or generations of the persons named.
  element genName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
geogFeat =
  
  ## (geographical feature name) – Contains a common noun identifying a geographical feature.
  element geogFeat {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
geogName =
  
  ## (geographic name) – The proper noun designation for a place, natural feature, or political jurisdiction.
  element geogName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
nameLink =
  
  ## (name link) – Contains a connecting phrase or link used within a name but not regarded as part of it, such as "van der" or "of", "from", etc.
  element nameLink {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
periodName =
  
  ## (period name) – A label that describes a period of time, such as 'Baroque' or '3rd Style period'.
  element periodName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
persName =
  
  ## (personal name) – Designation for an individual, including any or all of that individual's forenames, surnames, honorific titles, and added names.
  element persName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike
     | model.persNamePart)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
postBox =
  
  ## (postal box or post office box) contains a number or other identifier for some postal delivery point other than a street address.
  element postBox {
    (text | model.editLike | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
postCode =
  
  ## (postal code) contains a numerical or alphanumeric code used as part of a postal address to simplify sorting or delivery of mail.
  element postCode {
    (text | model.editLike | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
region =
  
  ## Contains the name of an administrative unit such as a state, province, or county, larger than a settlement, but smaller than a country.
  element region {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
roleName =
  
  ## (role name) – Contains a name component which indicates that the referent has a particular role or position in society, such as an official title or rank.
  element roleName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
settlement =
  
  ## Contains the name of a settlement such as a city, town, or village identified as a single geopolitical or administrative unit.
  element settlement {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
street =
  
  ## full street address including any name or number identifying a building as well as the name of the street or route on which it is located.
  element street {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
styleName =
  
  ## (style name) – A label for a characteristic style of writing or performance, such as 'bebop' or 'rock-n-roll'.
  element styleName {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
att.episema.log.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.plist.attributes,
  att.staffIdent.attributes,
  att.targetEval.attributes
att.hispanTick.log.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.plist.attributes,
  att.staffIdent.attributes,
  att.targetEval.attributes
att.liquescent.log.attributes = empty
att.nc.log.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.staffIdent.attributes,
  att.nc.log.attribute.oct,
  att.nc.log.attribute.pname
att.nc.log.attribute.oct =
  
  ## Captures written octave information.
  attribute oct {
    xsd:nonNegativeInteger { maxInclusive = "9" }
    | xsd:token { pattern = "unknown" }
  }?
att.nc.log.attribute.pname =
  
  ## Contains a written pitch name.
  attribute pname {
    xsd:token { pattern = "[a-g]|unknown" }
  }?
att.ncForm.attributes =
  att.ncForm.attribute.angled,
  att.ncForm.attribute.con,
  att.ncForm.attribute.curve,
  att.ncForm.attribute.hooked,
  att.ncForm.attribute.ligated,
  att.ncForm.attribute.rellen,
  att.ncForm.attribute.s-shape,
  att.ncForm.attribute.tilt
att.ncForm.attribute.angled =
  
  ##
  attribute angled { data.BOOLEAN }?
att.ncForm.attribute.con =
  
  ## Connection to the previous component within the same neume; this attribute should not be used for the first component of a neume.
  attribute con {
    
    ## Gapped; not connected.
    "g"
    | 
      ## Looped.
      "l"
    | 
      ## Extended.
      "e"
  }?
att.ncForm.attribute.curve =
  
  ## Records direction of curvature.
  attribute curve {
    
    ## Anti-clockwise curvature.
    "a"
    | 
      ## Clockwise curvature.
      "c"
  }?
att.ncForm.attribute.hooked =
  
  ## Pen stroke has an extension; specific to Hispanic notation.
  attribute hooked { data.BOOLEAN }?
att.ncForm.attribute.ligated =
  
  ## Indicates participation in a ligature.
  attribute ligated { data.BOOLEAN }?
att.ncForm.attribute.rellen =
  
  ## Length of the pen stroke relative to the previous component within the same neume; this attribute should not be used for the first component of a neume.
  attribute rellen {
    
    ## Longer.
    "l"
    | 
      ## Shorter.
      "s"
  }?
att.ncForm.attribute.s-shape =
  
  ## Direction of the initial direction for an s-shaped pen stroke; i.e., "w" for the standard letter S, "e" for its mirror image, "s" for the letter S turned 90-degrees anti-clockwise, and "n" for its mirror image.
  attribute s-shape { data.COMPASSDIRECTION.basic }?
att.ncForm.attribute.tilt =
  
  ## Direction of the pen stroke.
  attribute tilt { data.COMPASSDIRECTION }?
att.ncGrp.log.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.staffIdent.attributes,
  att.sylText.attributes
att.neume.log.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.staffIdent.attributes,
  att.sylText.attributes
att.oriscus.log.attributes = empty
att.quilisma.log.attributes = empty
att.signifLet.log.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.plist.attributes,
  att.staffIdent.attributes,
  att.targetEval.attributes
att.strophicus.log.attributes = empty
att.syllable.log.attributes = att.alignment.attributes
model.eventLike.neumes = neume
model.eventLike.neumes_alternation = neume
model.eventLike.neumes_sequence = neume
model.eventLike.neumes_sequenceOptional = neume?
model.eventLike.neumes_sequenceOptionalRepeatable = neume*
model.eventLike.neumes_sequenceRepeatable = neume+
model.layerPart.neumes = model.eventLike.neumes | model.syllableLike
model.layerPart.neumes_alternation =
  model.eventLike.neumes_alternation | model.syllableLike_alternation
model.layerPart.neumes_sequence =
  model.eventLike.neumes_sequence, model.syllableLike_sequence
model.layerPart.neumes_sequenceOptional =
  model.eventLike.neumes_sequenceOptional?,
  model.syllableLike_sequenceOptional?
model.layerPart.neumes_sequenceOptionalRepeatable =
  model.eventLike.neumes_sequenceOptionalRepeatable*,
  model.syllableLike_sequenceOptionalRepeatable*
model.layerPart.neumes_sequenceRepeatable =
  model.eventLike.neumes_sequenceRepeatable+,
  model.syllableLike_sequenceRepeatable+
model.neumeComponentModifierLike =
  liquescent | oriscus | quilisma | strophicus
model.neumeModifierLike = episema | hispanTick | signifLet
model.neumePart = nc | ncGrp
model.sectionPart.neumes = notAllowed
model.sectionPart.neumes_alternation = notAllowed
model.sectionPart.neumes_sequence = empty
model.sectionPart.neumes_sequenceOptional = empty
model.sectionPart.neumes_sequenceOptionalRepeatable = empty
model.sectionPart.neumes_sequenceRepeatable = notAllowed
model.staffPart.neumes = notAllowed
model.staffPart.neumes_alternation = notAllowed
model.staffPart.neumes_sequence = empty
model.staffPart.neumes_sequenceOptional = empty
model.staffPart.neumes_sequenceOptionalRepeatable = empty
model.staffPart.neumes_sequenceRepeatable = notAllowed
model.syllableLike = syllable
model.syllableLike_alternation = syllable
model.syllableLike_sequence = syllable
model.syllableLike_sequenceOptional = syllable?
model.syllableLike_sequenceOptionalRepeatable = syllable*
model.syllableLike_sequenceRepeatable = syllable+
model.syllablePart =
  model.verseLike
  | model.midiLike
  | model.eventLike.neumes
  | model.controlEventLike
  | model.eventLike
  | model.sylLike
episema =
  
  ## Episema.
  element episema {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.episema.anl.attributes,
    att.episema.ges.attributes,
    att.episema.log.attributes,
    att.episema.vis.attributes,
    empty
  }
hispanTick =
  
  ## Hispanic tick.
  element hispanTick {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.hispanTick.anl.attributes,
    att.hispanTick.ges.attributes,
    att.hispanTick.log.attributes,
    att.hispanTick.vis.attributes,
    empty
  }
liquescent =
  
  ## Liquescent.
  element liquescent {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.liquescent.anl.attributes,
    att.liquescent.ges.attributes,
    att.liquescent.log.attributes,
    att.liquescent.vis.attributes,
    empty
  }
nc =
  
  ## Sign representing a single pitched event, although the exact pitch may not be known.
  element nc {
    (model.appLike
     | model.editLike
     | model.neumeComponentModifierLike
     | model.neumeModifierLike
     | model.transcriptionLike)*,
    att.basic.attributes,
    att.classed.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    att.nc.anl.attributes,
    att.nc.ges.attributes,
    att.nc.log.attributes,
    att.nc.vis.attributes,
    
    ## Designation which characterizes the element in some sense, using any convenient classification scheme or typology that employs single-token labels.
    ## Suggested values include: 1] apostropha; 2] bistropha; 3] climacus; 4] clivis; 5] oriscus; 6] pes; 7] pessubpunctis; 8] porrectus; 9] porrectusflexus; 10] pressusmaior; 11] pressusmaior; 12] pressusminor; 13] pressusminor; 14] punctum; 15] quilisma; 16] scandicus; 17] strophicus; 18] torculus; 19] torculusresupinus; 20] tristropha; 21] virga; 22] virgastrata
    attribute type {
      list {
        (
         ##
         "apostropha"
         | 
           ##
           "bistropha"
         | 
           ##
           "climacus"
         | 
           ##
           "clivis"
         | 
           ##
           "oriscus"
         | 
           ##
           "pes"
         | 
           ##
           "pessubpunctis"
         | 
           ##
           "porrectus"
         | 
           ##
           "porrectusflexus"
         | 
           ##
           "pressusmaior"
         | 
           ##
           "pressusmaior"
         | 
           ##
           "pressusminor"
         | 
           ##
           "pressusminor"
         | 
           ##
           "punctum"
         | 
           ##
           "quilisma"
         | 
           ##
           "scandicus"
         | 
           ##
           "strophicus"
         | 
           ##
           "torculus"
         | 
           ##
           "torculusresupinus"
         | 
           ##
           "tristropha"
         | 
           ##
           "virga"
         | 
           ##
           "virgastrata"
         | xsd:NMTOKEN)+
      }
    }?,
    empty
  }
ncGrp =
  
  ## Collection of one or more neume components.
  element ncGrp {
    (model.appLike
     | model.editLike
     | model.neumeModifierLike
     | model.transcriptionLike
     | nc
     | ncGrp)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.ncGrp.anl.attributes,
    att.ncGrp.ges.attributes,
    att.ncGrp.log.attributes,
    att.ncGrp.vis.attributes,
    empty
  }
neume =
  
  ## Sign representing one or more musical pitches.
  element neume {
    (model.appLike
     | model.editLike
     | model.neumeModifierLike
     | model.neumePart
     | model.transcriptionLike)*,
    att.basic.attributes,
    att.classed.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    att.neume.anl.attributes,
    att.neume.ges.attributes,
    att.neume.log.attributes,
    att.neume.vis.attributes,
    
    ## Designation which characterizes the element in some sense, using any convenient classification scheme or typology that employs single-token labels.
    ## Suggested values include: 1] apostropha; 2] bistropha; 3] climacus; 4] clivis; 5] oriscus; 6] pes; 7] pessubpunctis; 8] porrectus; 9] porrectusflexus; 10] pressusmaior; 11] pressusmaior; 12] pressusminor; 13] pressusminor; 14] punctum; 15] quilisma; 16] scandicus; 17] strophicus; 18] torculus; 19] torculusresupinus; 20] tristropha; 21] virga; 22] virgastrata
    attribute type {
      list {
        (
         ##
         "apostropha"
         | 
           ##
           "bistropha"
         | 
           ##
           "climacus"
         | 
           ##
           "clivis"
         | 
           ##
           "oriscus"
         | 
           ##
           "pes"
         | 
           ##
           "pessubpunctis"
         | 
           ##
           "porrectus"
         | 
           ##
           "porrectusflexus"
         | 
           ##
           "pressusmaior"
         | 
           ##
           "pressusmaior"
         | 
           ##
           "pressusminor"
         | 
           ##
           "pressusminor"
         | 
           ##
           "punctum"
         | 
           ##
           "quilisma"
         | 
           ##
           "scandicus"
         | 
           ##
           "strophicus"
         | 
           ##
           "torculus"
         | 
           ##
           "torculusresupinus"
         | 
           ##
           "tristropha"
         | 
           ##
           "virga"
         | 
           ##
           "virgastrata"
         | xsd:NMTOKEN)+
      }
    }?,
    empty
  }
oriscus =
  
  ## Oriscus.
  element oriscus {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.oriscus.anl.attributes,
    att.oriscus.ges.attributes,
    att.oriscus.log.attributes,
    att.oriscus.vis.attributes,
    empty
  }
quilisma =
  
  ## Quilisma.
  element quilisma {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.quilisma.anl.attributes,
    att.quilisma.ges.attributes,
    att.quilisma.log.attributes,
    att.quilisma.vis.attributes,
    empty
  }
signifLet =
  
  ## Significantive letter(s).
  element signifLet {
    (text
     | model.textPhraseLike.limited
     | model.graphicPrimitiveLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.signifLet.anl.attributes,
    att.signifLet.ges.attributes,
    att.signifLet.log.attributes,
    att.signifLet.vis.attributes,
    empty
  }
strophicus =
  
  ## Strophicus.
  element strophicus {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.strophicus.anl.attributes,
    att.strophicus.ges.attributes,
    att.strophicus.log.attributes,
    att.strophicus.vis.attributes,
    empty
  }
syllable =
  
  ## Neume notation can be thought of as "neumed text". Therefore, the syllable element provides high-level organization in this repertoire.
  element syllable {
    (model.annotLike
     | model.appLike
     | model.divLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.milestoneLike.music
     | model.neumeModifierLike
     | model.scoreDefLike
     | model.staffDefLike
     | model.staffGrpLike
     | model.syllablePart
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.syllable.anl.attributes,
    att.syllable.ges.attributes,
    att.syllable.log.attributes,
    att.syllable.vis.attributes,
    empty
  }
att.alignment.attributes = att.alignment.attribute.when
att.alignment.attribute.when =
  [
    a:documentation [
      "Indicates the point of occurrence of this feature along a time line. Its value must be the ID of a "
      ns1:code [ "<when>" ]
      " element elsewhere in the document."
    ]
  ]
  attribute when { data.URI }?
sch:pattern [
  id = "mei-att.alignment-check_whenTarget-constraint-rule-81"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@when"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@when attribute should\x{a}" ~
      "            have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:when/@xml:id"
      "A\x{a}" ~
      "            value in @when should correspond to the @xml:id attribute of a when\x{a}" ~
      "            element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
avFile =
  
  ## (audio/video file) – References an external digital audio or video file.
  element avFile {
    (clip*)
    >> sch:pattern [
         id = "mei-avFile-avFile_child_of_clip-constraint-rule-82"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clip/mei:avFile"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:*) = 0"
             "An avFile child of clip cannot have\x{a}" ~
             "            children."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.internetMedia.attributes,
    att.facsimile.attributes,
    att.metadataPointing.attributes,
    att.pointing.attributes,
    empty
  }
clip =
  
  ## Defines a time segment of interest within a recording or within a digital audio or video file.
  element clip {
    avFile*,
    (when*)
    >> sch:pattern [
         id =
           "mei-clip-betype_required_when_begin_or_end-constraint-rule-83"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clip[@begin or @end]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "@betype or ancestor::mei:*[@betype]"
             "When @begin or @end\x{a}" ~
             "            is used, @betype should appear on clip or one of its ancestors."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.dataPointing.attributes,
    att.mediaBounds.attributes,
    att.metadataPointing.attributes,
    att.startId.attributes,
    empty
  }
performance =
  
  ## A presentation of one or more musical works.
  element performance {
    recording*,
    att.common.attributes,
    att.metadataPointing.attributes,
    empty
  }
recording =
  
  ## A recorded performance.
  element recording {
    avFile*,
    when*,
    (clip*)
    >> sch:pattern [
         id =
           "mei-recording-betype_required_when_begin_or_end-constraint-rule-84"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:recording[@begin or @end]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "@betype"
             "When @begin or @end is used, @betype should be\x{a}" ~
             "            present."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.dataPointing.attributes,
    att.mediaBounds.attributes,
    att.metadataPointing.attributes,
    att.startId.attributes,
    empty
  }
when =
  
  ## Indicates a point in time either absolutely (using the absolute attribute), or relative to another when element (using the since, interval and inttype attributes).
  element when {
    empty
    >> sch:pattern [
         id = "mei-when-check_when_interval-constraint-rule-85"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:when[@interval]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@since"
             "@since must be present when @interval is used."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test =
               "every $i in tokenize(@since, '\s+') satisfies substring($i,2)=//mei:when/@xml:id"
             "The value in @since should correspond to the @xml:id attribute of a when\x{a}" ~
             "            element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:when[matches(@interval, '^[0-9]+$')]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(@inttype eq 'time')"
             "When @interval contains an integer value,\x{a}" ~
             "            @inttype cannot be 'time'."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:when[matches(@interval, ':')]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@inttype eq 'time'"
             "When @interval contains a time value, @inttype must\x{a}" ~
             "            be 'time'."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-when-check_when_absolute-constraint-rule-88"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:when[@absolute]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "@abstype or ancestor::mei:*[@betype]"
             "When @absolute is\x{a}" ~
             "            present, @abstype should be present or @betype should be present on an\x{a}" ~
             "            ancestor."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.dataPointing.attributes,
    
    ## Provides an absolute value for the time point.
    attribute absolute { text }?,
    
    ## Specifies the time interval between this time point and the one designated by the since attribute. This attribute can only be interpreted meaningfully in conjunction with the inttype attribute.
    attribute interval {
      xsd:decimal { minInclusive = "1" }
      | xsd:time
    }?,
    
    ## Specifies the kind of values used in the absolute attribute.
    attribute abstype { data.BETYPE }?,
    
    ## Specifies the kind of values used in the interval attribute.
    attribute inttype { data.BETYPE }?,
    (
     ## Identifies the reference point for determining the time of the current when element, which is obtained by adding the interval to the time of the reference point. The value should be the ID of another when element within the same parent element. If the since attribute is omitted and the absolute attribute is not specified, then the reference point is understood to be the immediately preceding when element.
     attribute since { data.URI }?)
    >> sch:pattern [
         id = "mei-when-since-check_sinceTarget-constraint-rule-89"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "@since"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(normalize-space(.) eq '')"
             "@since attribute\x{a}" ~
             "                should have content."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test =
               "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:when/@xml:id"
             "The value in @since should correspond to the @xml:id attribute of a when\x{a}" ~
             "                element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }
model.locrefLike = ptr | ref
model.locrefLike_alternation = ptr | ref
model.locrefLike_sequence = ptr, ref
model.locrefLike_sequenceOptional = ptr?, ref?
model.locrefLike_sequenceOptionalRepeatable = ptr*, ref*
model.locrefLike_sequenceRepeatable = ptr+, ref+
ptr =
  
  ## (pointer) – Defines a traversible pointer to another location, using only attributes to describe the destination.
  element ptr {
    empty,
    att.common.attributes,
    att.internetMedia.attributes,
    att.metadataPointing.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    empty
  }
ref =
  
  ## (reference) – Defines a traversible reference to another location. May contain text and sub-elements that describe the destination.
  element ref {
    (text | model.textPhraseLike)*,
    att.common.attributes,
    att.internetMedia.attributes,
    att.lang.attributes,
    att.metadataPointing.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    empty
  }
att.accid.log.attributes =
  att.accidental.attributes,
  att.controlEvent.attributes,
  att.accid.log.attribute.func
att.accid.log.attribute.func =
  
  ## Records the function of an accidental.
  attribute func {
    
    ## Cautionary accidental.
    "caution"
    | 
      ## Editorial accidental.
      "edit"
  }?
att.accidental.attributes = att.accidental.attribute.accid
att.accidental.attribute.accid =
  
  ## Captures a written accidental.
  attribute accid { data.ACCIDENTAL.WRITTEN }?
att.ambitus.anl.attributes = att.intervalHarmonic.attributes
att.ambitus.ges.attributes = empty
att.ambitus.log.attributes = empty
att.ambitus.vis.attributes = empty
att.ambNote.log.attributes =
  att.accidental.attributes,
  att.coloration.attributes,
  att.duration.logical.attributes,
  att.pitched.attributes
att.anchoredText.anl.attributes = empty
att.anchoredText.ges.attributes = empty
att.anchoredText.vis.attributes =
  att.visualOffset.attributes, att.xy.attributes
att.annot.log.attributes =
  att.alignment.attributes,
  att.duration.additive.attributes,
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.staffIdent.attributes,
  att.startEndId.attributes,
  att.timestamp.logical.attributes,
  att.timestamp2.logical.attributes
att.artic.log.attributes =
  att.articulation.attributes, att.controlEvent.attributes
att.articulation.attributes = att.articulation.attribute.artic
att.articulation.attribute.artic =
  [
    a:documentation [
      "Encodes the written articulation(s). Articulations are normally encoded in order from the note head outward; that is, away from the stem. See additional notes at att.vis.note. Only articulations should be encoded in the artic attribute; for example, fingerings should be encoded using the "
      ns1:code [ "<fing>" ]
      " element."
    ]
  ]
  attribute artic {
    list { data.ARTICULATION+ }
  }?
att.attacca.log.attributes =
  att.controlEvent.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes,
  att.attacca.log.attribute.target
att.attacca.log.attribute.target =
  
  ## Indicates the next section or movement to be performed.
  attribute target { data.URI }?
sch:pattern [
  id =
    "mei-att.attacca.log-target-check_attaccaTarget-constraint-rule-90"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:attacca/@target"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@target attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[local-name()                    eq 'section' or local-name() eq 'mdiv']/@xml:id"
      "The value in @target should correspond to the @xml:id attribute of a section or\x{a}" ~
      "                mdiv element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.audience.attributes = att.audience.attribute.audience
att.audience.attribute.audience =
  
  ## The intended audience.
  attribute audience {
    
    ## Internal use only.
    "private"
    | 
      ## Available to all audiences.
      "public"
  }?
att.augmentDots.attributes = att.augmentDots.attribute.dots
att.augmentDots.attribute.dots =
  
  ## Records the number of augmentation dots required by a written dotted duration.
  attribute dots { data.AUGMENTDOT }?
sch:pattern [
  id =
    "mei-att.augmentDots-dots-dots_attribute_requires_dur-constraint-rule-91"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@dots]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@dur"
      "An element with a dots attribute must also have a dur\x{a}" ~
      "                attribute."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.authorized.attributes =
  att.canonical.attributes,
  att.authorized.attribute.auth,
  att.authorized.attribute.auth.uri
att.authorized.attribute.auth =
  
  ## A name or label associated with a controlled vocabulary or other authoritative source for this element or its content.
  attribute auth { xsd:string }?
att.authorized.attribute.auth.uri =
  
  ## A web-accessible location of the controlled vocabulary or other authoritative source of identification or definition for this element or its content. This attribute may contain a complete URI or a partial URI which is completed by the value of the codedval attribute.
  attribute auth.uri { data.URI }?
att.barLine.log.attributes =
  att.meterConformance.bar.attributes, att.barLine.log.attribute.form
att.barLine.log.attribute.form =
  
  ## Records the appearance and usually the function of the bar line.
  attribute form { data.BARRENDITION }?
att.barring.attributes =
  att.barring.attribute.bar.len,
  att.barring.attribute.bar.method,
  att.barring.attribute.bar.place
att.barring.attribute.bar.len =
  
  ## States the length of barlines in virtual units. The value must be greater than 0 and is typically equal to 2 times (the number of staff lines - 1); e.g., a value of '8' for a 5-line staff.
  attribute bar.len {
    xsd:decimal { minExclusive = "0" }
  }?
att.barring.attribute.bar.method =
  
  ## Records the method of barring.
  attribute bar.method { data.BARMETHOD }?
sch:pattern [
  id = "mei-att.barring-bar.method-check_barmethod-constraint-rule-92"
  "\x{a}" ~
  "      "
  sch:rule [
    context =
      "@bar.method[parent::*[matches(local-name(), '(staffDef|measure)')]]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "not(. eq 'mensur')"
      '"mensur" not allowed in this\x{a}' ~
      "                context."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.barring.attribute.bar.place =
  
  ## Denotes the staff location of bar lines, if the length is non-standard; that is, not equal to 2 times (the number of staff lines - 1).
  attribute bar.place { data.STAFFLOC }?
att.basic.attributes = att.id.attributes, att.basic.attribute.xmlbase
att.basic.attribute.xmlbase =
  
  ## Provides a base URI reference with which applications can resolve relative URI references into absolute URI references.
  attribute xml:base { data.URI }?
att.bibl.attributes = att.bibl.attribute.analog
att.bibl.attribute.analog =
  
  ## Contains a reference to a field or element in another descriptive encoding system to which this MEI element is comparable.
  attribute analog { xsd:string }?
att.caesura.log.attributes =
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.staffIdent.attributes,
  att.startId.attributes,
  att.timestamp.logical.attributes
att.calendared.attributes = att.calendared.attribute.calendar
att.calendared.attribute.calendar =
  
  ## Indicates the calendar system to which a date belongs, for example, Gregorian, Julian, Roman, Mosaic, Revolutionary, Islamic, etc.
  attribute calendar { xsd:NMTOKEN }?
att.canonical.attributes = att.canonical.attribute.codedval
att.canonical.attribute.codedval =
  [
    a:documentation [
      "A value that represents or identifies other data. Often, it is a primary key in the database or a unique value in the coded list identified by the "
      ns1:code [ "@auth" ]
      " or "
      ns1:code [ "@auth.uri" ]
      " attributes."
    ]
  ]
  attribute codedval {
    list { xsd:NMTOKEN+ }
  }?
att.chord.log.attributes =
  att.articulation.attributes,
  att.augmentDots.attributes,
  att.chord.log.cmn.attributes,
  att.cue.attributes,
  att.duration.logical.attributes,
  att.event.attributes,
  att.sylText.attributes
att.classed.attributes = att.classed.attribute.class
att.classed.attribute.class =
  
  ## Contains one or more URIs which denote classification terms that apply to the entity bearing this attribute.
  attribute class {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.classed-class-check_classURI-constraint-rule-93"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@class"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:category/@xml:id or matches($i, '^([a-z]+://|\.{1,2}/)')"
      "The value in @class must either correspond to the @xml:id attribute of a category\x{a}" ~
      "                element or be an external URL."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.clef.log.attributes =
  att.clefShape.attributes,
  att.lineLoc.attributes,
  att.octave.attributes,
  att.octaveDisplacement.attributes,
  att.clef.log.attribute.cautionary
att.clef.log.attribute.cautionary =
  
  ## Records the function of the clef. A "cautionary" clef does not change the following pitches.
  attribute cautionary { data.BOOLEAN }?
att.cleffing.log.attributes =
  att.cleffing.log.attribute.clef.shape,
  att.cleffing.log.attribute.clef.line,
  att.cleffing.log.attribute.clef.dis,
  att.cleffing.log.attribute.clef.dis.place
att.cleffing.log.attribute.clef.shape =
  
  ## Encodes a value for the clef symbol.
  attribute clef.shape { data.CLEFSHAPE }?
att.cleffing.log.attribute.clef.line =
  
  ## Contains a default value for the position of the clef. The value must be in the range between 1 and the number of lines on the staff. The numbering of lines starts with the lowest line of the staff.
  attribute clef.line { data.CLEFLINE }?
att.cleffing.log.attribute.clef.dis =
  
  ## Records the amount of octave displacement to be applied to the clef.
  attribute clef.dis { data.OCTAVE.DIS }?
att.cleffing.log.attribute.clef.dis.place =
  
  ## Records the direction of octave displacement to be applied to the clef.
  attribute clef.dis.place { data.STAFFREL.basic }?
sch:pattern [
  id =
    "mei-att.cleffing.log-clef_shape_requires_clef_line-constraint-rule-94"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[matches(@clef.shape, '[FCG]')]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@clef.line"
      "An 'F', 'C', or 'G' clef requires that its position be\x{a}" ~
      "            specified."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[matches(@clef.shape, '(TAB|perc)')]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@lines"
      "A TAB or percussion clef requires that the number of lines be\x{a}" ~
      "            specified."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.clefGrp.log.attributes = empty
att.clefShape.attributes = att.clefShape.attribute.shape
att.clefShape.attribute.shape =
  
  ## Describes a clef's shape.
  attribute shape { data.CLEFSHAPE }?
sch:pattern [
  id = "mei-att.clefShape-shape_requires_line-constraint-rule-96"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:clef[matches(@shape, '[FCG]')]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@line"
      "When @shape is present, @line must also be\x{a}" ~
      "            specified."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.color.attributes = att.color.attribute.color
att.color.attribute.color =
  
  ## Used to indicate visual appearance. Do not confuse this with the musical term 'color' as used in pre-CMN notation.
  attribute color { data.COLOR }?
att.coloration.attributes = att.coloration.attribute.colored
att.coloration.attribute.colored =
  
  ## Indicates this feature is 'colored'; that is, it is a participant in a change in rhythmic values. In mensural notation, coloration is indicated by colored notes (red, black, etc.) where void notes would otherwise occur. In CMN, coloration is indicated by an inverse color; that is, the note head is void when it would otherwise be filled and vice versa.
  attribute colored { data.BOOLEAN }?
att.common.attributes =
  att.basic.attributes,
  att.labelled.attributes,
  att.linking.attributes,
  att.nNumberLike.attributes,
  att.responsibility.attributes,
  att.typed.attributes
att.controlEvent.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.partIdent.attributes,
  att.plist.attributes,
  att.staffIdent.attributes,
  att.targetEval.attributes,
  att.timestamp.logical.attributes,
  att.timestamp.gestural.attributes
att.coordinated.attributes =
  att.coordinated.attribute.ulx,
  att.coordinated.attribute.uly,
  att.coordinated.attribute.lrx,
  att.coordinated.attribute.lry
att.coordinated.attribute.ulx =
  
  ## Indicates the upper-left corner x coordinate.
  attribute ulx { xsd:nonNegativeInteger }?
att.coordinated.attribute.uly =
  
  ## Indicates the upper-left corner y coordinate.
  attribute uly { xsd:nonNegativeInteger }?
att.coordinated.attribute.lrx =
  
  ## Indicates the lower-right corner x coordinate.
  attribute lrx { xsd:nonNegativeInteger }?
att.coordinated.attribute.lry =
  
  ## Indicates the lower-left corner x coordinate.
  attribute lry { xsd:nonNegativeInteger }?
att.cue.attributes = att.cue.attribute.cue
att.cue.attribute.cue =
  
  ##
  attribute cue { data.BOOLEAN }?
att.curvature.attributes =
  att.curvature.attribute.bezier,
  att.curvature.attribute.bulge,
  att.curvature.attribute.curvedir
att.curvature.attribute.bezier =
  
  ## Records the placement of Bezier control points as a series of pairs of space-separated values; e.g., 19 45 -32 118.
  attribute bezier {
    list { (xsd:decimal, xsd:decimal)+ }
  }?
att.curvature.attribute.bulge =
  
  ## Describes a curve as one or more pairs of values with respect to an imaginary line connecting the starting and ending points of the curve. The first value captures a distance to the left (positive value) or right (negative value) of the line, expressed in virtual units. The second value of each pair represents a point along the line, expressed as a percentage of the line's length. N.B. An MEI virtual unit (VU) is half the distance between adjacent staff lines.
  attribute bulge {
    list { (xsd:decimal, data.PERCENT)+ }
  }?
att.curvature.attribute.curvedir =
  
  ## Describes a curve with a generic term indicating the direction of curvature.
  attribute curvedir {
    
    ## Upward curve.
    "above"
    | 
      ## Downward curve.
      "below"
    | 
      ## A "meandering" curve, both above and below the items it pertains to.
      "mixed"
  }?
att.curveRend.attributes =
  att.curveRend.attribute.lform, att.curveRend.attribute.lwidth
att.curveRend.attribute.lform =
  
  ## Describes the line style of a curve.
  attribute lform { data.LINEFORM }?
att.curveRend.attribute.lwidth =
  
  ## Width of a curved line.
  attribute lwidth { data.LINEWIDTH }?
att.custos.log.attributes =
  att.pitched.attributes, att.custos.log.attribute.target
att.custos.log.attribute.target =
  
  ## Encodes the target note when its pitch differs from the pitch at which the custos appears.
  attribute target { data.URI }?
sch:pattern [
  id = "mei-att.custos.log-target-check_custosTarget-constraint-rule-97"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:custos/@target"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@target attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:note/@xml:id"
      "The value in @target should correspond to the @xml:id attribute of a note\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.datable.attributes =
  att.datable.attribute.enddate,
  att.datable.attribute.isodate,
  att.datable.attribute.notafter,
  att.datable.attribute.notbefore,
  att.datable.attribute.startdate
att.datable.attribute.enddate =
  
  ## Contains the end point of a date range in standard ISO form.
  attribute enddate { data.ISODATE }?
att.datable.attribute.isodate =
  
  ## Provides the value of a textual date in standard ISO form.
  attribute isodate { data.ISODATE }?
att.datable.attribute.notafter =
  
  ## Contains an upper boundary for an uncertain date in standard ISO form.
  attribute notafter { data.ISODATE }?
att.datable.attribute.notbefore =
  
  ## Contains a lower boundary, in standard ISO form, for an uncertain date.
  attribute notbefore { data.ISODATE }?
att.datable.attribute.startdate =
  
  ## Contains the starting point of a date range in standard ISO form.
  attribute startdate { data.ISODATE }?
att.dataPointing.attributes = att.dataPointing.attribute.data
att.dataPointing.attribute.data =
  
  ## Used to link metadata elements to one or more data-containing elements.
  attribute data {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.dataPointing-data-check_dataTarget-constraint-rule-98"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@data"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@data attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:music]/@xml:id"
      "The value in @data should correspond to the @xml:id attribute of a descendant of\x{a}" ~
      "                the music element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.mdiv.log.attributes = att.alignment.attributes
att.metadataPointing.attributes = att.metadataPointing.attribute.decls
att.metadataPointing.attribute.decls =
  
  ## Identifies one or more metadata elements (other than classification terms) within the header, which are understood to apply to the element bearing this attribute and its content.
  attribute decls {
    list { data.URI+ }
  }?
sch:pattern [
  id =
    "mei-att.metadataPointing-decls-check_declsTarget-constraint-rule-99"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@decls"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@decls attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id"
      "Each value in @decls should correspond to the @xml:id attribute of an element\x{a}" ~
      "                within the metadata header."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "every $i in tokenize(., '\s+') satisfies not(substring($i,2)=//mei:term/@xml:id)"
      "No value in @decls should correspond to the @xml:id attribute of a classification\x{a}" ~
      "                term. Use @class for this purpose."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.dimensions.attributes = att.height.attributes, att.width.attributes
att.dir.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.distances.attributes =
  att.distances.attribute.dynam.dist,
  att.distances.attribute.harm.dist,
  att.distances.attribute.text.dist
att.distances.attribute.dynam.dist =
  
  ## Records the default distance from the staff for dynamic marks.
  attribute dynam.dist { data.MEASUREMENTREL }?
att.distances.attribute.harm.dist =
  
  ## Records the default distance from the staff of harmonic indications, such as guitar chord grids or functional labels.
  attribute harm.dist { data.MEASUREMENTREL }?
att.distances.attribute.text.dist =
  
  ## Determines how far from the staff to render text elements.
  attribute text.dist { data.MEASUREMENTREL }?
att.dot.log.attributes =
  att.controlEvent.attributes, att.dot.log.attribute.form
att.dot.log.attribute.form =
  
  ## Records the function of the dot.
  attribute form {
    
    ## Augmentation dot.
    "aug"
    | 
      ## Dot of division.
      "div"
  }?
att.duration.additive.attributes = att.duration.additive.attribute.dur
att.duration.additive.attribute.dur =
  
  ## When a duration cannot be represented as a single power-of-two value, multiple space-separated values that add up to the total duration may be used.
  attribute dur {
    list { data.DURATION+ }
  }?
att.duration.default.attributes =
  att.duration.default.attribute.dur.default,
  att.duration.default.attribute.num.default,
  att.duration.default.attribute.numbase.default
att.duration.default.attribute.dur.default =
  
  ## Contains a default duration in those situations when the first note, rest, chord, etc. in a measure does not have a duration specified.
  attribute dur.default { data.DURATION }?
att.duration.default.attribute.num.default =
  
  ## Along with numbase.default, describes the default duration as a ratio. num.default is the first value in the ratio.
  attribute num.default { xsd:positiveInteger }?
att.duration.default.attribute.numbase.default =
  
  ## Along with num.default, describes the default duration as a ratio. numbase.default is the second value in the ratio.
  attribute numbase.default { xsd:positiveInteger }?
att.duration.logical.attributes = att.duration.logical.attribute.dur
att.duration.logical.attribute.dur =
  
  ## Records the duration of a feature using the relative durational values provided by the data.DURATION datatype.
  attribute dur { data.DURATION }?
att.duration.ratio.attributes =
  att.duration.ratio.attribute.num, att.duration.ratio.attribute.numbase
att.duration.ratio.attribute.num =
  
  ## Along with numbase, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute num { xsd:positiveInteger }?
att.duration.ratio.attribute.numbase =
  
  ## Along with num, describes duration as a ratio. num is the first value in the ratio, while numbase is the second.
  attribute numbase { xsd:positiveInteger }?
att.dynam.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.enclosingChars.attributes = att.enclosingChars.attribute.enclose
att.enclosingChars.attribute.enclose =
  
  ## Records the characters often used to mark accidentals, articulations, and sometimes notes as having a cautionary or editorial function. For an example of cautionary accidentals enclosed in parentheses, see Read, p. 131, ex. 9-14.
  attribute enclose { data.ENCLOSURE }?
att.ending.log.attributes = att.alignment.attributes
att.endings.attributes = att.endings.attribute.ending.rend
att.endings.attribute.ending.rend =
  
  ## Describes where ending marks should be displayed.
  attribute ending.rend {
    
    ## Ending rendered only above top staff.
    "top"
    | 
      ## Ending rendered above staves that have bar lines drawn across them.
      "barred"
    | 
      ## Endings rendered above staff groups.
      "grouped"
  }?
att.event.attributes =
  att.alignment.attributes,
  att.layerIdent.attributes,
  att.staffIdent.attributes,
  att.timestamp.gestural.attributes,
  att.timestamp.logical.attributes
att.evidence.attributes =
  att.evidence.attribute.cert, att.evidence.attribute.evidence
att.evidence.attribute.cert =
  
  ## Signifies the degree of certainty or precision associated with a feature.
  attribute cert { data.CERTAINTY }?
att.evidence.attribute.evidence =
  
  ## Indicates the nature of the evidence supporting the reliability or accuracy of the intervention or interpretation.
  ## Suggested values include: 1] internal; 2] external; 3] conjecture
  attribute evidence {
    
    ## There is evidence within the document to support the intervention.
    "internal"
    | 
      ## There is evidence outside the document to support the intervention.
      "external"
    | 
      ## The assertion has been made by the editor, cataloguer, or scholar on the basis of their expertise.
      "conjecture"
    | xsd:NMTOKEN
  }?
att.extender.attributes =
  att.lineRend.attributes, att.extender.attribute.extender
att.extender.attribute.extender =
  
  ## Indicates the presence of an extension symbol, typically a line.
  attribute extender { data.BOOLEAN }?
att.extent.attributes =
  att.measurement.attributes,
  att.ranging.attributes,
  att.extent.attribute.extent
att.extent.attribute.extent =
  
  ## Captures a measurement, count, or description. When extent contains a numeric value, use the unit attribute to indicate the measurement unit.
  attribute extent { xsd:string }?
sch:pattern [
  id = "mei-att.extent-extent-check_extent-constraint-rule-100"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@extent[matches(normalize-space(.), '^\d+(\.\d+)?$')]"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "../@unit"
      "The @unit attribute is\x{a}" ~
      "                recommended."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@extent[matches(., '\d+(\.\d+)?\s')]"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "../@unit"
      "Separation into value (@extent) and unit\x{a}" ~
      "                (@unit) is recommended."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.fermataPresent.attributes = att.fermataPresent.attribute.fermata
att.fermataPresent.attribute.fermata =
  [
    a:documentation [
      "Indicates the attachment of a fermata to this element. If visual information about the fermata needs to be recorded, then a "
      ns1:code [ "<fermata>" ]
      " element should be employed instead."
    ]
  ]
  attribute fermata { data.STAFFREL.basic }?
att.filing.attributes = att.filing.attribute.nonfiling
att.filing.attribute.nonfiling =
  
  ## Holds the number of initial characters (such as those constituting an article or preposition) that should not be used for sorting a title or name.
  attribute nonfiling { xsd:positiveInteger }?
att.grpSym.log.attributes =
  att.staffGroupingSym.attributes,
  att.startEndId.attributes,
  att.grpSym.log.attribute.level
att.grpSym.log.attribute.level =
  
  ## Indicates the nesting level of staff grouping symbols.
  attribute level { xsd:positiveInteger }?
att.handIdent.attributes = att.handIdent.attribute.hand
att.handIdent.attribute.hand =
  [
    a:documentation [
      "Signifies the hand responsible for an action. The value must be the ID of a "
      ns1:code [ "<hand>" ]
      " element declared in the header."
    ]
  ]
  attribute hand { data.URI }?
sch:pattern [
  id = "mei-att.handIdent-hand-check_handTarget-constraint-rule-102"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@hand"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@hand attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:hand/@xml:id"
      "Each value in @hand should correspond to the @xml:id attribute of a hand\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.height.attributes = att.height.attribute.height
att.height.attribute.height =
  
  ## Measurement of the vertical dimension of an entity.
  attribute height { data.MEASUREMENTABS }?
att.horizontalAlign.attributes = att.horizontalAlign.attribute.halign
att.horizontalAlign.attribute.halign =
  
  ## Records horizontal alignment.
  attribute halign { data.HORIZONTALALIGNMENT }?
att.id.attributes = att.id.attribute.xmlid
att.id.attribute.xmlid =
  
  ## Regularizes the naming of an element and thus facilitates building links between it and other resources. Each id attribute within a document must have a unique value.
  attribute xml:id { xsd:ID }?
att.internetMedia.attributes = att.internetMedia.attribute.mimetype
att.internetMedia.attribute.mimetype =
  
  ## Specifies the applicable MIME (multimedia internet mail extension) type. The value should be a valid MIME media type defined by the Internet Engineering Task Force in RFC 2046.
  attribute mimetype { xsd:string }?
att.joined.attributes = att.joined.attribute.join
att.joined.attribute.join =
  
  ## Used for linking visually separate entities that form a single logical entity, for example, multiple slurs broken across a system break that form a single musical phrase. Also used to indicate a measure which metrically completes the current one. Record the identifiers of the separately encoded components, excluding the one carrying the attribute.
  attribute join {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.joined-join-check_joinTarget-constraint-rule-103"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@join"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@join attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @join should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.keyAccid.log.attributes =
  att.accidental.attributes, att.pitched.attributes
att.keySig.log.attributes = att.keySig.log.attribute.sig
att.keySig.log.attribute.sig =
  
  ## Written key signature.
  attribute sig {
    list { data.KEYFIFTHS+ }
  }?
att.keySigDefault.log.attributes =
  att.keySigDefault.log.attribute.key.sig
att.keySigDefault.log.attribute.key.sig =
  
  ## Written key signature.
  attribute key.sig {
    list { data.KEYFIFTHS+ }
  }?
att.labelled.attributes = att.labelled.attribute.label
att.labelled.attribute.label =
  
  ## Captures text to be used to generate a label for the element to which it's attached, a "tool tip" or prefatory text, for example. Should not be used to record document content.
  attribute label { xsd:string }?
att.lang.attributes =
  att.lang.attribute.xmllang, att.lang.attribute.translit
att.lang.attribute.xmllang =
  
  ## Identifies the language of the element's content. The values for this attribute are language 'tags' as defined in BCP 47. All language tags that make use of private use sub-tags must be documented in a corresponding language element in the MEI header whose id attribute is the same as the language tag's value.
  attribute xml:lang { xsd:language }?
att.lang.attribute.translit =
  
  ## Specifies the transliteration technique used.
  attribute translit { xsd:NMTOKEN }?
att.layer.log.attributes =
  att.meterConformance.attributes, att.layer.log.attribute.def
att.layer.log.attribute.def =
  
  ## Provides a mechanism for linking the layer to a layerDef element.
  attribute def { data.URI }?
sch:pattern [
  id = "mei-att.layer.log-def-check_defTarget_layer-constraint-rule-104"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:layer/@def"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@def attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:layerDef/@xml:id"
      "The value in @def should correspond to the @xml:id attribute of a layerDef\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.layerDef.log.attributes =
  att.duration.default.attributes,
  att.layerDef.log.cmn.attributes,
  att.octaveDefault.attributes,
  att.transposition.attributes
att.layerIdent.attributes = att.layerIdent.attribute.layer
att.layerIdent.attribute.layer =
  
  ## Identifies the layer to which a feature applies.
  attribute layer {
    list { xsd:positiveInteger+ }
  }?
att.lineLoc.attributes = att.lineLoc.attribute.line
att.lineLoc.attribute.line =
  
  ## Indicates the line upon which a feature stands. The value must be in the range between 1 and the number of lines on the staff. The numbering of lines starts with the lowest line of the staff.
  attribute line { data.CLEFLINE }?
att.lineRend.attributes =
  att.lineRend.base.attributes,
  att.lineRend.attribute.lendsym,
  att.lineRend.attribute.lendsym.size,
  att.lineRend.attribute.lstartsym,
  att.lineRend.attribute.lstartsym.size
att.lineRend.attribute.lendsym =
  
  ## Symbol rendered at end of line.
  attribute lendsym { data.LINESTARTENDSYMBOL }?
att.lineRend.attribute.lendsym.size =
  
  ## Holds the relative size of the line-end symbol.
  attribute lendsym.size { data.FONTSIZESCALE }?
att.lineRend.attribute.lstartsym =
  
  ## Symbol rendered at start of line.
  attribute lstartsym { data.LINESTARTENDSYMBOL }?
att.lineRend.attribute.lstartsym.size =
  
  ## Holds the relative size of the line-start symbol.
  attribute lstartsym.size { data.FONTSIZESCALE }?
att.lineRend.base.attributes =
  att.lineRend.base.attribute.lform,
  att.lineRend.base.attribute.lsegs,
  att.lineRend.base.attribute.lwidth
att.lineRend.base.attribute.lform =
  
  ## Describes the line style of a line.
  attribute lform { data.LINEFORM }?
att.lineRend.base.attribute.lsegs =
  
  ## Describes the number of segments into which a dashed or dotted line may be divided, or the number of "peaks" of a wavy line; a pair of space-separated values (minimum and maximum, respectively) provides a range between which a rendering system-supplied value may fall, while a single value indicates a fixed amount of space; that is, the minimum and maximum values are equal.
  attribute lsegs {
    list {
      xsd:positiveInteger { minInclusive = "2" },
      xsd:positiveInteger { minInclusive = "2" }?
    }
  }?
sch:pattern [
  id = "mei-att.lineRend.base-lsegs-check_lsegs-constraint-rule-105"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@lsegs"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "matches(../@lform, '(dashed|dotted|wavy)')"
      "@lform attribute\x{a}" ~
      '                matching "dashed", "dotted", or "wavy" required.'
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.lineRend.base.attribute.lwidth =
  
  ## Width of a line.
  attribute lwidth { data.LINEWIDTH }?
att.linking.attributes =
  att.linking.attribute.copyof,
  att.linking.attribute.corresp,
  att.linking.attribute.follows,
  att.linking.attribute.next,
  att.linking.attribute.precedes,
  att.linking.attribute.prev,
  att.linking.attribute.sameas,
  att.linking.attribute.synch
att.linking.attribute.copyof =
  
  ## Points to an element of which the current element is a copy.
  attribute copyof { data.URI }?
sch:pattern [
  id =
    "mei-att.linking-copyof-When_copyof_element_empty-constraint-rule-106"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@copyof]"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "count(child::*[not(comment() or processing-instruction())]) = 0"
      "An\x{a}" ~
      "                element with a copyof attribute can only have comment or processing instruction\x{a}" ~
      "                descendents."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
sch:pattern [
  id = "mei-att.linking-copyof-check_copyofTarget-constraint-rule-107"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@copyof"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@copyof attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "The\x{a}" ~
      "                value in @copyof should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.linking.attribute.corresp =
  
  ## Used to point to other elements that correspond to this one in a generic fashion.
  attribute corresp {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.linking-corresp-check_correspTarget-constraint-rule-108"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@corresp"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@corresp attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @corresp should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.linking.attribute.follows =
  
  ## points to one or more events in a user-defined collection that are known to be predecessors of the current element.
  attribute follows {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.linking-follows-check_followsTarget-constraint-rule-109"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@follows"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@follows attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @follows must correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.linking.attribute.next =
  
  ## Used to point to the next event(s) in a user-defined collection.
  attribute next {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.linking-next-check_nextTarget-constraint-rule-110"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@next"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@next attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @next should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.linking.attribute.precedes =
  
  ## Points to one or more events in a user-defined collection that are known to be successors of the current element.
  attribute precedes {
    list { data.URI+ }
  }?
sch:pattern [
  id =
    "mei-att.linking-precedes-check_precedesTarget-constraint-rule-111"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@precedes"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@precedes attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @precedes must correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.linking.attribute.prev =
  
  ## Points to the previous event(s) in a user-defined collection.
  attribute prev {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.linking-prev-check_prevTarget-constraint-rule-112"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@prev"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@prev attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @prev should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.linking.attribute.sameas =
  
  ## Points to an element that is the same as the current element but is not a literal copy of the current element.
  attribute sameas {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.linking-sameas-check_sameasTarget-constraint-rule-113"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@sameas"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@sameas attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @sameas should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.linking.attribute.synch =
  
  ## Points to elements that are synchronous with the current element.
  attribute synch {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.linking-synch-check_synchTarget-constraint-rule-114"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@synch"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@synch attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @synch should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.lyricStyle.attributes =
  att.lyricStyle.attribute.lyric.align,
  att.lyricStyle.attribute.lyric.fam,
  att.lyricStyle.attribute.lyric.name,
  att.lyricStyle.attribute.lyric.size,
  att.lyricStyle.attribute.lyric.style,
  att.lyricStyle.attribute.lyric.weight
att.lyricStyle.attribute.lyric.align =
  
  ## Describes the alignment of lyric syllables associated with a note or chord.
  attribute lyric.align { data.MEASUREMENTREL }?
att.lyricStyle.attribute.lyric.fam =
  
  ## Sets the font family default value for lyrics.
  attribute lyric.fam { data.FONTFAMILY }?
att.lyricStyle.attribute.lyric.name =
  
  ## Sets the font name default value for lyrics.
  attribute lyric.name { data.FONTNAME }?
att.lyricStyle.attribute.lyric.size =
  
  ## Sets the default font size value for lyrics.
  attribute lyric.size { data.FONTSIZE }?
att.lyricStyle.attribute.lyric.style =
  
  ## Sets the default font style value for lyrics.
  attribute lyric.style { data.FONTSTYLE }?
att.lyricStyle.attribute.lyric.weight =
  
  ## Sets the default font weight value for lyrics.
  attribute lyric.weight { data.FONTWEIGHT }?
att.measurement.attributes = att.measurement.attribute.unit
att.measurement.attribute.unit =
  
  ## Indicates the unit of measurement.
  ## Suggested values include: 1] byte; 2] char; 3] cm; 4] deg; 5] in; 6] issue; 7] ft; 8] m; 9] mm; 10] page; 11] pc; 12] pt; 13] px; 14] rad; 15] record; 16] vol; 17] vu
  attribute unit {
    
    ## Byte.
    "byte"
    | 
      ## Character.
      "char"
    | 
      ## Centimeter.
      "cm"
    | 
      ## Degree.
      "deg"
    | 
      ## Inch.
      "in"
    | 
      ## Serial issue.
      "issue"
    | 
      ## Foot.
      "ft"
    | 
      ## Meter.
      "m"
    | 
      ## Millimeter.
      "mm"
    | 
      ## Page.
      "page"
    | 
      ## Pica.
      "pc"
    | 
      ## Point.
      "pt"
    | 
      ## Pixel.
      "px"
    | 
      ## Radian.
      "rad"
    | 
      ## Record.
      "record"
    | 
      ## Serial volume.
      "vol"
    | 
      ## MEI virtual unit.
      "vu"
    | xsd:NMTOKEN
  }?
att.measureNumbers.attributes =
  att.measureNumbers.attribute.mnum.visible
att.measureNumbers.attribute.mnum.visible =
  
  ## Indicates whether measure numbers should be displayed.
  attribute mnum.visible { data.BOOLEAN }?
att.mediaBounds.attributes =
  att.mediaBounds.attribute.begin,
  att.mediaBounds.attribute.end,
  att.mediaBounds.attribute.betype
att.mediaBounds.attribute.begin =
  
  ## Specifies a point where the relevant content begins. A numerical value must be less and a time value must be earlier than that given by the end attribute.
  attribute begin { text }?
att.mediaBounds.attribute.end =
  
  ## Specifies a point where the relevant content ends. If not specified, the end of the content is assumed to be the end point. A numerical value must be greater and a time value must be later than that given by the begin attribute.
  attribute end { text }?
att.mediaBounds.attribute.betype =
  
  ## Type of values used in the begin/end attributes. The begin and end attributes can only be interpreted meaningfully in conjunction with this attribute.
  attribute betype { data.BETYPE }?
att.medium.attributes = att.medium.attribute.medium
att.medium.attribute.medium =
  
  ## Describes the writing medium.
  attribute medium { xsd:string }?
att.meiVersion.attributes = att.meiVersion.attribute.meiversion
att.meiVersion.attribute.meiversion =
  
  ## Specifies a generic MEI version label.
  [ a:defaultValue = "4.0.1" ]
  attribute meiversion {
    
    ## First release of MEI 4
    "4.0.0"
    | 
      ## Bugfix Release 4.0.1
      "4.0.1"
  }?
att.mensur.log.attributes =
  att.duration.ratio.attributes,
  att.mensural.shared.attributes,
  att.slashCount.attributes,
  att.mensur.log.attribute.dot,
  att.mensur.log.attribute.sign
att.mensur.log.attribute.dot =
  
  ## Specifies whether a dot is to be added to the base symbol.
  attribute dot { data.BOOLEAN }?
att.mensur.log.attribute.sign =
  
  ## The base symbol in the mensuration sign/time signature of mensural notation.
  attribute sign { data.MENSURATIONSIGN }?
att.meterConformance.attributes = att.meterConformance.attribute.metcon
att.meterConformance.attribute.metcon =
  
  ## Indicates the relationship between the content of a staff or layer and the prevailing meter.
  attribute metcon {
    
    ## Complete; i.e., conformant with the prevailing meter.
    "c"
    | 
      ## Incomplete; i.e., not enough beats.
      "i"
    | 
      ## Overfull; i.e., too many beats.
      "o"
  }?
att.meterConformance.bar.attributes =
  att.meterConformance.bar.attribute.metcon,
  att.meterConformance.bar.attribute.control
att.meterConformance.bar.attribute.metcon =
  
  ## Indicates the relationship between the content of a measure and the prevailing meter.
  attribute metcon { data.BOOLEAN }?
att.meterConformance.bar.attribute.control =
  [
    a:documentation [
      'Indicates whether or not a bar line is "controlling"; that is, if it indicates a point of alignment across all the parts. Bar lines within a score are usually controlling; that is, they "line up". Bar lines within parts may or may not be controlling. When applied to '
      ns1:code [ "<measure>" ]
      ", this attribute indicates the nature of the right barline but not the left."
    ]
  ]
  attribute control { data.BOOLEAN }?
att.meterSig.log.attributes =
  att.meterSig.log.attribute.count,
  att.meterSig.log.attribute.sym,
  att.meterSig.log.attribute.unit
att.meterSig.log.attribute.count =
  
  ## Captures the number of beats in a measure, that is, the top number of the meter signature. It must contain a decimal number or an additive expression that evaluates to a decimal number, such as 2+3.
  attribute count {
    xsd:string { pattern = "\d+(\.\d+)?(\s*\+\s*\d+(\.\d+)?)*" }
  }?
att.meterSig.log.attribute.sym =
  
  ## Indicates the use of a meter symbol instead of a numeric meter signature, that is, 'C' for common time or 'C' with a slash for cut time.
  attribute sym { data.METERSIGN }?
att.meterSig.log.attribute.unit =
  
  ## Contains the number indicating the beat unit, that is, the bottom number of the meter signature.
  attribute unit { xsd:decimal }?
att.meterSigDefault.log.attributes =
  att.meterSigDefault.log.attribute.meter.count,
  att.meterSigDefault.log.attribute.meter.unit,
  att.meterSigDefault.log.attribute.meter.sym
att.meterSigDefault.log.attribute.meter.count =
  
  ## Captures the number of beats in a measure, that is, the top number of the meter signature. It must contain a decimal number or an additive expression that evaluates to a decimal number, such as 2+3.
  attribute meter.count {
    xsd:string { pattern = "\d+(\.\d+)?(\s*\+\s*\d+(\.\d+)?)*" }
  }?
att.meterSigDefault.log.attribute.meter.unit =
  
  ## Contains the number indicating the beat unit, that is, the bottom number of the meter signature.
  attribute meter.unit { xsd:decimal }?
att.meterSigDefault.log.attribute.meter.sym =
  
  ## Indicates the use of a meter symbol instead of a numeric meter signature, that is, 'C' for common time or 'C' with a slash for cut time.
  attribute meter.sym { data.METERSIGN }?
att.mmTempo.attributes =
  att.mmTempo.attribute.mm,
  att.mmTempo.attribute.mm.unit,
  att.mmTempo.attribute.mm.dots
att.mmTempo.attribute.mm =
  
  ## Used to describe tempo in terms of beats (often the meter signature denominator) per minute, ala M.M. (Maezel's Metronome). Do not confuse this attribute with midi.bpm or midi.mspb. In MIDI, a beat is always defined as a quarter note, *not the numerator of the time signature or the metronomic indication*.
  attribute mm { data.TEMPOVALUE }?
att.mmTempo.attribute.mm.unit =
  
  ## Captures the metronomic unit.
  attribute mm.unit { data.DURATION }?
att.mmTempo.attribute.mm.dots =
  
  ## Records the number of augmentation dots required by a dotted metronome unit.
  attribute mm.dots { data.AUGMENTDOT }?
att.multinumMeasures.attributes =
  att.multinumMeasures.attribute.multi.number
att.multinumMeasures.attribute.multi.number =
  
  ## Indicates whether programmatically calculated counts of multiple measures of rest (mRest) and whole measure repeats (mRpt) in parts should be rendered.
  attribute multi.number { data.BOOLEAN }?
att.name.attributes =
  att.authorized.attributes,
  att.datable.attributes,
  att.filing.attributes,
  att.name.attribute.nymref,
  att.name.attribute.role
att.name.attribute.nymref =
  
  ## Used to record a pointer to the regularized form of the name elsewhere in the document.
  attribute nymref { data.URI }?
sch:pattern [
  id = "mei-att.name-nymref-check_nymrefTarget-constraint-rule-115"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@nymref"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@nymref attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "The\x{a}" ~
      "                value in @nymref should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.name.attribute.role =
  
  ## Used to specify further information about the entity referenced by this name, for example, the occupation of a person or the status of a place.
  attribute role { text }?
att.nInteger.attributes = att.nInteger.attribute.n
att.nInteger.attribute.n =
  
  ## Provides a numeric designation that indicates an element's position in a sequence of similar elements. Its value must be a non-negative integer.
  attribute n { xsd:nonNegativeInteger }?
att.nNumberLike.attributes = att.nNumberLike.attribute.n
att.nNumberLike.attribute.n =
  
  ## Provides a number-like designation that indicates an element's position in a sequence of similar elements. May not contain space characters.
  attribute n { data.WORD }?
att.notationStyle.attributes =
  att.notationStyle.attribute.music.name,
  att.notationStyle.attribute.music.size
att.notationStyle.attribute.music.name =
  
  ## Sets the default music font name.
  attribute music.name { data.MUSICFONT }?
att.notationStyle.attribute.music.size =
  
  ## Sets the default music font size.
  attribute music.size { data.FONTSIZE }?
att.note.log.attributes =
  att.augmentDots.attributes,
  att.coloration.attributes,
  att.cue.attributes,
  att.duration.logical.attributes,
  att.event.attributes,
  att.note.log.cmn.attributes,
  att.note.log.mensural.attributes,
  att.pitched.attributes
att.noteHeads.attributes =
  att.noteHeads.attribute.head.altsym,
  att.noteHeads.attribute.head.auth,
  att.noteHeads.attribute.head.color,
  att.noteHeads.attribute.head.fill,
  att.noteHeads.attribute.head.fillcolor,
  att.noteHeads.attribute.head.mod,
  att.noteHeads.attribute.head.rotation,
  att.noteHeads.attribute.head.shape,
  att.noteHeads.attribute.head.visible
att.noteHeads.attribute.head.altsym =
  [
    a:documentation [
      "Provides a way of pointing to a user-defined symbol. It must contain a reference to an ID of a "
      ns1:code [ "<symbolDef>" ]
      " element elsewhere in the document."
    ]
  ]
  attribute head.altsym { data.URI }?
sch:pattern [
  id =
    "mei-att.noteHeads-head.altsym-check_head.altsymTarget-constraint-rule-116"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@head.altsym"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@head.altsym attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:symbolDef/@xml:id"
      "The value in @head.altsym should correspond to the @xml:id attribute of a symbolDef\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.noteHeads.attribute.head.auth =
  [
    a:documentation [
      "A name or label associated with the controlled vocabulary from which a numerical value of "
      ns1:code [ "@head.shape" ]
      " is taken.\x{a}" ~
      "Suggested values include: 1] smufl"
    ]
  ]
  attribute head.auth {
    
    ## Standard Music Font Layout.
    "smufl"
    | xsd:NMTOKEN
  }?
sch:pattern [
  id = "mei-att.noteHeads-head.auth-check_head.auth-constraint-rule-117"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[lower-case(@head.auth) eq 'smufl']"
    "\x{a}" ~
    "         "
    sch:assert [
      test =
        "matches(@head.shape, '^#x') or matches(@head.shape, '^U+')"
      "When\x{a}" ~
      "                @head.auth matches 'smufl', @head.shape must contain a numeric glyph reference in\x{a}" ~
      '                hexadecimal notation, e.g. "#xE000" or "U+E000".'
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.noteHeads.attribute.head.color =
  
  ## Captures the overall color of a notehead.
  attribute head.color { data.COLOR }?
att.noteHeads.attribute.head.fill =
  
  ## Describes how/if the notehead is filled.
  attribute head.fill { data.FILL }?
att.noteHeads.attribute.head.fillcolor =
  
  ## Captures the fill color of a notehead if different from the overall note color.
  attribute head.fillcolor { data.COLOR }?
att.noteHeads.attribute.head.mod =
  
  ## Records any additional symbols applied to the notehead.
  attribute head.mod {
    list { data.NOTEHEADMODIFIER+ }
  }?
att.noteHeads.attribute.head.rotation =
  
  ## Describes rotation applied to the basic notehead shape. A positive value rotates the notehead in a counter-clockwise fashion, while negative values produce clockwise rotation.
  attribute head.rotation { data.ROTATION }?
att.noteHeads.attribute.head.shape =
  
  ## Used to override the head shape normally used for the given duration.
  attribute head.shape { data.HEADSHAPE }?
sch:pattern [
  id =
    "mei-att.noteHeads-head.shape-check_headshape_num-constraint-rule-118"
  "\x{a}" ~
  "      "
  sch:rule [
    context =
      "mei:*[(matches(@head.shape, '#x') or matches(@head.shape, 'U+')) and (lower-case(@head.auth) eq 'smufl')]"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "matches(normalize-space(@head.shape), '^(#x|U\+)E([0-9AB][0-9A-F][0-9A-F]|C[0-9A][0-9A-F]|CB[0-9A-F])$')"
      "SMuFL version 1.18 uses the range U+E000 - U+ECBF."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.noteHeads.attribute.head.visible =
  
  ## Indicates if a feature should be rendered when the notation is presented graphically or sounded when it is presented in an aural form.
  attribute head.visible { data.BOOLEAN }?
att.octave.attributes = att.octave.attribute.oct
att.octave.attribute.oct =
  
  ## Captures written octave information.
  attribute oct { data.OCTAVE }?
att.octaveDefault.attributes = att.octaveDefault.attribute.oct.default
att.octaveDefault.attribute.oct.default =
  
  ## Contains a default octave specification for use when the first note, rest, chord, etc. in a measure does not have an octave value specified.
  attribute oct.default { data.OCTAVE }?
att.octaveDisplacement.attributes =
  att.octaveDisplacement.attribute.dis,
  att.octaveDisplacement.attribute.dis.place
att.octaveDisplacement.attribute.dis =
  
  ## Records the amount of octave displacement.
  attribute dis { data.OCTAVE.DIS }?
att.octaveDisplacement.attribute.dis.place =
  
  ## Records the direction of octave displacement.
  attribute dis.place { data.STAFFREL.basic }?
att.oneLineStaff.attributes = att.oneLineStaff.attribute.ontheline
att.oneLineStaff.attribute.ontheline =
  
  ## Determines the placement of notes on a 1-line staff. A value of 'true' places all notes on the line, while a value of 'false' places stems-up notes above the line and stems-down notes below the line.
  attribute ontheline { data.BOOLEAN }?
att.optimization.attributes = att.optimization.attribute.optimize
att.optimization.attribute.optimize =
  
  ## Indicates whether staves without notes, rests, etc. should be displayed. When the value is 'true', empty staves are displayed.
  attribute optimize { data.BOOLEAN }?
att.origin.layerIdent.attributes =
  att.origin.layerIdent.attribute.origin.layer
att.origin.layerIdent.attribute.origin.layer =
  
  ## identifies the layer on which referenced notation occurs.
  attribute origin.layer {
    list { xsd:positiveInteger+ }
  }?
att.origin.staffIdent.attributes =
  att.origin.staffIdent.attribute.origin.staff
att.origin.staffIdent.attribute.origin.staff =
  
  ## signifies the staff on which referenced notation occurs. Defaults to the same value as the local staff. Mandatory when applicable.
  attribute origin.staff {
    list { xsd:positiveInteger+ }
  }?
att.origin.startEndId.attributes =
  att.origin.startEndId.attribute.origin.startid,
  att.origin.startEndId.attribute.origin.endid
att.origin.startEndId.attribute.origin.startid =
  
  ## indicates the first element in a sequence of events.
  attribute origin.startid { data.URI }?
att.origin.startEndId.attribute.origin.endid =
  
  ## indicates the final element in a sequence of events.
  attribute origin.endid { data.URI }?
att.origin.timestamp.logical.attributes =
  att.origin.timestamp.logical.attribute.origin.tstamp,
  att.origin.timestamp.logical.attribute.origin.tstamp2
att.origin.timestamp.logical.attribute.origin.tstamp =
  
  ## encodes the starting point of musical material in terms of musical time, i.e., a (potentially negative) count of measures plus a beat location.
  attribute origin.tstamp { data.MEASUREBEATOFFSET }?
att.origin.timestamp.logical.attribute.origin.tstamp2 =
  [
    a:documentation [
      "encodes the ending point of musical material in terms of musical time, i.e., a count of measures plus a beat location. The values are relative to the measure identified by "
      ns1:code [ "@origin.tstamp" ]
      "."
    ]
  ]
  attribute origin.tstamp2 { data.MEASUREBEAT }?
sch:pattern [
  id =
    "mei-att.origin.timestamp.logical-origin.tstamp2-origin.tstamp2_requires_origin.tstamp-constraint-rule-119"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@origin.tstamp2]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@origin.tstamp"
      "When @origin.tstamp2 is used @origin.tstamp must\x{a}" ~
      "                also be present."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.ornam.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.ornamentAccid.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.pad.log.attributes = att.event.attributes, att.width.attributes
att.pages.attributes =
  att.pages.attribute.page.height,
  att.pages.attribute.page.width,
  att.pages.attribute.page.topmar,
  att.pages.attribute.page.botmar,
  att.pages.attribute.page.leftmar,
  att.pages.attribute.page.rightmar,
  att.pages.attribute.page.panels,
  att.pages.attribute.page.scale
att.pages.attribute.page.height =
  
  ## Specifies the height of the page; may be expressed in real-world units or staff steps.
  attribute page.height { data.MEASUREMENTABS }?
att.pages.attribute.page.width =
  
  ## Describes the width of the page; may be expressed in real-world units or staff steps.
  attribute page.width { data.MEASUREMENTABS }?
att.pages.attribute.page.topmar =
  
  ## Indicates the amount of whitespace at the top of a page.
  attribute page.topmar { data.MEASUREMENTABS }?
att.pages.attribute.page.botmar =
  
  ## Indicates the amount of whitespace at the bottom of a page.
  attribute page.botmar { data.MEASUREMENTABS }?
att.pages.attribute.page.leftmar =
  
  ## Indicates the amount of whitespace at the left side of a page.
  attribute page.leftmar { data.MEASUREMENTABS }?
att.pages.attribute.page.rightmar =
  
  ## Indicates the amount of whitespace at the right side of a page.
  attribute page.rightmar { data.MEASUREMENTABS }?
att.pages.attribute.page.panels =
  
  ## Indicates the number of logical pages to be rendered on a single physical page.
  attribute page.panels { data.PAGE.PANELS }?
att.pages.attribute.page.scale =
  
  ## Indicates how the page should be scaled when rendered.
  attribute page.scale { data.PGSCALE }?
att.part.log.attributes = empty
att.partIdent.attributes =
  att.partIdent.attribute.part, att.partIdent.attribute.partstaff
att.partIdent.attribute.part =
  
  ## Indicates the part in which the current feature should appear. Use '%all' when the feature should occur in every part.
  attribute part {
    list {
      xsd:token { pattern = "(%all|#[\i][\c]+)" }+
    }
  }?
sch:pattern [
  id = "mei-att.partIdent-part-check_part_attr_all-constraint-rule-120"
  "\x{a}" ~
  "      "
  sch:rule [
    context =
      "@part[some $i in tokenize(., '\s+') satisfies (matches($i, '^%all$'))]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "count(tokenize(., '\s+')) = 1"
      "'%all' cannot be mixed with other\x{a}" ~
      "                values."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.partIdent.attribute.partstaff =
  
  ## Signifies the part staff on which a notated feature occurs. Use '%all' when the feature should occur on every staff.
  attribute partstaff {
    list {
      xsd:token { pattern = "(%all|\d+(-\d+)?)" }+
    }
  }?
sch:pattern [
  id =
    "mei-att.partIdent-partstaff-check_partstaff_attr_all-constraint-rule-121"
  "\x{a}" ~
  "      "
  sch:rule [
    context =
      "@partstaff[some $i in tokenize(., '\s+') satisfies (matches($i, '^%all$'))]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "count(tokenize(., '\s+')) = 1"
      "'%all' cannot be mixed with other\x{a}" ~
      "                values."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.parts.log.attributes = empty
att.pb.log.attributes = att.alignment.attributes
att.phrase.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes
att.pitch.attributes = att.pitch.attribute.pname
att.pitch.attribute.pname =
  
  ## Contains a written pitch name.
  attribute pname { data.PITCHNAME }?
att.pitched.attributes = att.pitch.attributes, att.octave.attributes
att.placement.attributes = att.placement.attribute.place
att.placement.attribute.place =
  
  ## Captures the placement of the item with respect to the staff with which it is associated.
  attribute place { data.STAFFREL }?
att.plist.attributes = att.plist.attribute.plist
att.plist.attribute.plist =
  
  ## When the target attribute is present, plist identifies the active participants; that is, those entities pointed "from", in a relationship with the specified target(s). When the target attribute is not present, it identifies participants in a mutual relationship.
  attribute plist {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.plist-plist-check_plistTarget-constraint-rule-122"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@plist"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@plist attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "Each\x{a}" ~
      "                value in @plist should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.pointing.attributes =
  att.pointing.attribute.xlinkactuate,
  att.pointing.attribute.xlinkrole,
  att.pointing.attribute.xlinkshow,
  att.pointing.attribute.target,
  att.pointing.attribute.targettype
att.pointing.attribute.xlinkactuate =
  
  ## Defines whether a link occurs automatically or must be requested by the user.
  attribute xlink:actuate {
    
    ## Load the target resource(s) immediately.
    "onLoad"
    | 
      ## Load the target resource(s) upon user request.
      "onRequest"
    | 
      ## Do not permit loading of the target resource(s).
      "none"
    | 
      ## Behavior other than allowed by the other values of this attribute.
      "other"
  }?
att.pointing.attribute.xlinkrole =
  
  ## Characterization of the relationship between resources. The value of the role attribute must be a URI.
  attribute xlink:role { data.URI }?
att.pointing.attribute.xlinkshow =
  
  ## Defines how a remote resource is rendered.
  attribute xlink:show {
    
    ## Open in a new window.
    "new"
    | 
      ## Load the referenced resource in the same window.
      "replace"
    | 
      ## Embed the referenced resource at the point of the link.
      "embed"
    | 
      ## Do not permit traversal to the referenced resource.
      "none"
    | 
      ## Behavior other than permitted by the other values of this attribute.
      "other"
  }?
att.pointing.attribute.target =
  
  ## Identifies passive participants in a relationship; that is, the entities pointed "to".
  attribute target {
    list { data.URI+ }
  }?
att.pointing.attribute.targettype =
  
  ## Characterization of target resource(s) using any convenient classification scheme or typology.
  attribute targettype { xsd:NMTOKEN }?
att.quantity.attributes =
  att.measurement.attributes,
  att.ranging.attributes,
  att.quantity.attribute.quantity
att.quantity.attribute.quantity =
  
  ## Numeric value capturing a measurement or count. Can only be interpreted in combination with the unit attribute.
  attribute quantity {
    xsd:decimal { minInclusive = "0" }
  }?
att.ranging.attributes =
  att.ranging.attribute.atleast,
  att.ranging.attribute.atmost,
  att.ranging.attribute.min,
  att.ranging.attribute.max,
  att.ranging.attribute.confidence
att.ranging.attribute.atleast =
  
  ## Gives a minimum estimated value for an approximate measurement.
  attribute atleast { xsd:decimal }?
att.ranging.attribute.atmost =
  
  ## Gives a maximum estimated value for an approximate measurement.
  attribute atmost { xsd:decimal }?
att.ranging.attribute.min =
  
  ## Where the measurement summarizes more than one observation or a range of values, supplies the minimum value observed.
  attribute min { xsd:decimal }?
att.ranging.attribute.max =
  
  ## Where the measurement summarizes more than one observation or a range of values, supplies the maximum value observed.
  attribute max { xsd:decimal }?
att.ranging.attribute.confidence =
  
  ## Specifies the degree of statistical confidence (between zero and one) that a value falls within the range specified by min and max, or the proportion of observed values that fall within that range.
  attribute confidence { data.CONFIDENCE }?
sch:pattern [
  id = "mei-att.ranging-confidence-check_confidence-constraint-rule-123"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:*[@confidence]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@min and @max"
      "The attributes @min and @max are required when\x{a}" ~
      "                @confidence is present."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.responsibility.attributes = att.responsibility.attribute.resp
att.responsibility.attribute.resp =
  
  ## Indicates the agent(s) responsible for some aspect of the text's transcription, editing, or encoding. Its value must point to one or more identifiers declared in the document header.
  attribute resp {
    list { data.URI+ }
  }?
sch:pattern [
  id =
    "mei-att.responsibility-resp-check_respTarget-constraint-rule-124"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@resp"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@resp attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[ancestor::mei:meiHead]/@xml:id"
      "The value in @resp should correspond to the @xml:id attribute of an element within\x{a}" ~
      "                the metadata header."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.rest.log.attributes =
  att.augmentDots.attributes,
  att.cue.attributes,
  att.duration.logical.attributes,
  att.event.attributes,
  att.rest.log.cmn.attributes
att.sb.log.attributes = att.alignment.attributes
att.scalable.attributes = att.scalable.attribute.scale
att.scalable.attribute.scale =
  
  ## Scale factor to be applied to the feature to make it the desired display size.
  attribute scale { data.PERCENT }?
att.score.log.attributes = empty
att.scoreDef.log.attributes =
  att.cleffing.log.attributes,
  att.duration.default.attributes,
  att.keySigDefault.log.attributes,
  att.meterSigDefault.log.attributes,
  att.octaveDefault.attributes,
  att.transposition.attributes,
  att.scoreDef.log.cmn.attributes,
  att.scoreDef.log.mensural.attributes
att.section.log.attributes = att.alignment.attributes
att.sequence.attributes = att.sequence.attribute.seq
att.sequence.attribute.seq =
  
  ## Used to assign a sequence number related to the order in which the encoded features carrying this attribute are believed to have occurred.
  attribute seq { xsd:positiveInteger }?
att.slashCount.attributes = att.slashCount.attribute.slash
att.slashCount.attribute.slash =
  
  ## Indicates the number of slashes present.
  attribute slash { data.SLASH }?
att.slurPresent.attributes = att.slurPresent.attribute.slur
att.slurPresent.attribute.slur =
  [
    a:documentation [
      "Indicates that this element participates in a slur. If visual information about the slur needs to be recorded, then a "
      ns1:code [ "<slur>" ]
      " element should be employed."
    ]
  ]
  attribute slur {
    list { data.SLUR+ }
  }?
att.source.attributes = att.source.attribute.source
att.source.attribute.source =
  [
    a:documentation [
      "Contains a list of one or more pointers indicating the sources which attest to a given reading. Each value should correspond to the ID of a "
      ns1:code [ "<source>" ]
      " or "
      ns1:code [ "<manifestation>" ]
      "element located in the document header."
    ]
  ]
  attribute source {
    list { data.URI+ }
  }?
sch:pattern [
  id = "mei-att.source-source-check_sourceTarget-constraint-rule-125"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@source"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@source attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*[local-name() eq 'source' or local-name() eq 'manifestation']/@xml:id"
      "Each value in @source should correspond to the @xml:id attribute of a source or\x{a}" ~
      "                manifestation element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.space.log.attributes =
  att.augmentDots.attributes,
  att.duration.logical.attributes,
  att.event.attributes
att.spacing.attributes =
  att.spacing.attribute.spacing.packexp,
  att.spacing.attribute.spacing.packfact,
  att.spacing.attribute.spacing.staff,
  att.spacing.attribute.spacing.system
att.spacing.attribute.spacing.packexp =
  
  ## Describes a note's spacing relative to its time value.
  attribute spacing.packexp { xsd:decimal }?
att.spacing.attribute.spacing.packfact =
  
  ## Describes the note spacing of output.
  attribute spacing.packfact { xsd:decimal }?
att.spacing.attribute.spacing.staff =
  
  ## Specifies the minimum amount of space between adjacent staves in the same system; measured from the bottom line of the staff above to the top line of the staff below.
  attribute spacing.staff { data.MEASUREMENTREL }?
att.spacing.attribute.spacing.system =
  
  ## Describes the space between adjacent systems; a pair of space-separated values (minimum and maximum, respectively) provides a range between which a rendering system-supplied value may fall, while a single value indicates a fixed amount of space; that is, the minimum and maximum values are equal.
  attribute spacing.system {
    list { data.MEASUREMENTREL, data.MEASUREMENTREL? }
  }?
att.staff.log.attributes =
  att.meterConformance.attributes, att.staff.log.attribute.def
att.staff.log.attribute.def =
  
  ## Provides a mechanism for linking the staff to a staffDef element.
  attribute def { data.URI }?
sch:pattern [
  id = "mei-att.staff.log-def-check_defTarget_staff-constraint-rule-126"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:staff/@def"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@def attribute should\x{a}" ~
      "                have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:staffDef/@xml:id"
      "The value in @def should correspond to the @xml:id attribute of a staffDef\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.staffDef.log.attributes =
  att.cleffing.log.attributes,
  att.duration.default.attributes,
  att.keySigDefault.log.attributes,
  att.meterSigDefault.log.attributes,
  att.notationType.attributes,
  att.octaveDefault.attributes,
  att.transposition.attributes,
  att.staffDef.log.cmn.attributes,
  att.staffDef.log.mensural.attributes,
  att.staffDef.log.attribute.lines
att.staffDef.log.attribute.lines =
  
  ## Indicates the number of staff lines.
  attribute lines { xsd:nonNegativeInteger }?
att.staffGroupingSym.attributes = att.staffGroupingSym.attribute.symbol
att.staffGroupingSym.attribute.symbol =
  
  ## Specifies the symbol used to group a set of staves.
  attribute symbol {
    
    ## Curved symbol, i.e., {.
    "brace"
    | 
      ## Square symbol, i.e., [, but with curved/angled top and bottom segments.
      "bracket"
    | 
      ## Square symbol, i.e., [, with horizontal top and bottom segments.
      "bracketsq"
    | 
      ## Line symbol, i.e., |, (wide) line without top and bottom curved/horizontal segments.
      "line"
    | 
      ## Grouping symbol missing.
      "none"
  }?
att.staffGrp.log.attributes = empty
att.staffIdent.attributes = att.staffIdent.attribute.staff
att.staffIdent.attribute.staff =
  
  ## Signifies the staff on which a notated event occurs or to which a control event applies. Mandatory when applicable.
  attribute staff {
    list { xsd:positiveInteger+ }
  }?
att.staffItems.attributes =
  att.staffItems.attribute.aboveorder,
  att.staffItems.attribute.beloworder,
  att.staffItems.attribute.betweenorder
att.staffItems.attribute.aboveorder =
  
  ## Describes vertical order of items printed above a staff, from closest to farthest away from the staff.
  attribute aboveorder {
    list { data.STAFFITEM+ }
  }?
att.staffItems.attribute.beloworder =
  
  ## Describes vertical order of items printed below a staff, from closest to farthest away from the staff.
  attribute beloworder {
    list { data.STAFFITEM+ }
  }?
att.staffItems.attribute.betweenorder =
  
  ## Describes vertical order of items printed between staves, from top to bottom.
  attribute betweenorder {
    list { data.STAFFITEM+ }
  }?
att.staffLoc.attributes = att.staffLoc.attribute.loc
att.staffLoc.attribute.loc =
  
  ## Holds the staff location of the feature.
  attribute loc { data.STAFFLOC }?
att.staffLoc.pitched.attributes =
  att.staffLoc.pitched.attribute.ploc,
  att.staffLoc.pitched.attribute.oloc
att.staffLoc.pitched.attribute.ploc =
  
  ## Captures staff location in terms of written pitch name.
  attribute ploc { data.PITCHNAME }?
att.staffLoc.pitched.attribute.oloc =
  
  ## Records staff location in terms of written octave.
  attribute oloc { data.OCTAVE }?
att.startEndId.attributes =
  att.startId.attributes, att.startEndId.attribute.endid
att.startEndId.attribute.endid =
  
  ## Indicates the final element in a sequence of events to which the feature applies.
  attribute endid { data.URI }?
sch:pattern [
  id = "mei-att.startEndId-endid-check_endidTarget-constraint-rule-127"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@endid"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@endid attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "The\x{a}" ~
      "                value in @endid should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.startId.attributes = att.startId.attribute.startid
att.startId.attribute.startid =
  
  ## Holds a reference to the first element in a sequence of events to which the feature applies.
  attribute startid { data.URI }?
sch:pattern [
  id = "mei-att.startId-startid-check_startidTarget-constraint-rule-128"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@startid"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@startid attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:*/@xml:id"
      "The\x{a}" ~
      "                value in @startid should correspond to the @xml:id attribute of an\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.stems.attributes =
  att.stems.cmn.attributes,
  att.stems.attribute.stem.dir,
  att.stems.attribute.stem.len,
  att.stems.attribute.stem.mod,
  att.stems.attribute.stem.pos,
  att.stems.attribute.stem.visible,
  att.stems.attribute.stem.x,
  att.stems.attribute.stem.y
att.stems.attribute.stem.dir =
  
  ## Describes the direction of a stem.
  attribute stem.dir { data.STEMDIRECTION }?
att.stems.attribute.stem.len =
  
  ## Encodes the stem length.
  attribute stem.len { data.MEASUREMENTABS }?
att.stems.attribute.stem.mod =
  
  ## Encodes any stem "modifiers"; that is, symbols rendered on the stem, such as tremolo or Sprechstimme indicators.
  attribute stem.mod { data.STEMMODIFIER }?
att.stems.attribute.stem.pos =
  
  ## Records the position of the stem in relation to the note head(s).
  attribute stem.pos { data.STEMPOSITION }?
att.stems.attribute.stem.visible =
  
  ## Determines whether a stem should be displayed.
  attribute stem.visible { data.BOOLEAN }?
att.stems.attribute.stem.x =
  
  ## Records the output x coordinate of the stem's attachment point.
  attribute stem.x { xsd:decimal }?
att.stems.attribute.stem.y =
  
  ## Records the output y coordinate of the stem's attachment point.
  attribute stem.y { xsd:decimal }?
att.syl.log.attributes =
  att.syl.log.attribute.con, att.syl.log.attribute.wordpos
att.syl.log.attribute.con =
  
  ## Describes the symbols typically used to indicate breaks between syllables and their functions.
  attribute con {
    
    ## Space (word separator).
    "s"
    | 
      ## Dash (syllable separator).
      "d"
    | 
      ## Underscore (syllable extension).
      "u"
    | 
      ## Tilde (syllable elision).
      "t"
    | 
      ## Circumflex [angled line above] (syllable elision).
      "c"
    | 
      ## Caron [angled line below] (syllable elision).
      "v"
    | 
      ## Inverted breve [curved line above] (syllable elision).
      "i"
    | 
      ## Breve [curved line below] (syllable elision).
      "b"
  }?
att.syl.log.attribute.wordpos =
  
  ## Records the position of a syllable within a word.
  attribute wordpos {
    
    ## (initial) first syllable.
    "i"
    | 
      ## (medial) neither first nor last syllable.
      "m"
    | 
      ## (terminal) last syllable.
      "t"
  }?
att.sylText.attributes = att.sylText.attribute.syl
att.sylText.attribute.syl =
  
  ## Holds an associated sung text syllable.
  attribute syl { xsd:string }?
att.symbol.log.attributes = att.startId.attributes
att.systems.attributes =
  att.systems.attribute.system.leftline,
  att.systems.attribute.system.leftmar,
  att.systems.attribute.system.rightmar,
  att.systems.attribute.system.topmar
att.systems.attribute.system.leftline =
  
  ## Indicates whether the staves are joined at the left by a continuous line. The default value is "true". Do not confuse this with the heavy vertical line used as a grouping symbol.
  attribute system.leftline { data.BOOLEAN }?
att.systems.attribute.system.leftmar =
  
  ## Describes the amount of whitespace at the left system margin relative to page.leftmar.
  attribute system.leftmar { data.MEASUREMENTABS }?
att.systems.attribute.system.rightmar =
  
  ## Describes the amount of whitespace at the right system margin relative to page.rightmar.
  attribute system.rightmar { data.MEASUREMENTABS }?
att.systems.attribute.system.topmar =
  
  ## Describes the distance from page's top edge to the first system; used for first page only.
  attribute system.topmar { data.MEASUREMENTABS }?
att.targetEval.attributes = att.targetEval.attribute.evaluate
att.targetEval.attribute.evaluate =
  
  ## Specifies the intended meaning when a participant in a relationship is itself a pointer.
  attribute evaluate {
    
    ## If an element pointed to is itself a pointer, then the target of that pointer will be taken, and so on, until an element is found which is not a pointer.
    "all"
    | 
      ## If an element pointed to is itself a pointer, then its target (whether a pointer or not) is taken as the target of this pointer.
      "one"
    | 
      ## No further evaluation of targets is carried out beyond that needed to find the element(s) specified in plist or target attribute.
      "none"
  }?
att.tempo.log.attributes =
  att.controlEvent.attributes,
  att.mmTempo.attributes,
  att.startId.attributes,
  att.tempo.log.attribute.func
att.tempo.log.attribute.func =
  
  ## Records the function of a tempo indication.
  attribute func {
    
    ## Marks a gradual change of tempo, such as "accel." or "rit."
    "continuous"
    | 
      ## Represents a static tempo instruction, such as a textual term like "Adagio", a metronome marking like "♩=70", or a combination of text and metronome indication.
      "instantaneous"
    | 
      ## Captures a change in pulse rate (tempo) and/or pulse grouping (subdivision) in an "equation" of the form [tempo before change] = [tempo after change].
      "metricmod"
    | 
      ## Indicates a change in pulse rate (tempo) and/or pulse grouping (subdivision) in an "equation" of the form [tempo after change] = [tempo before change]. The term "precedente" often appears following the "equation" to distinguish this kind of historical usage from the modern metric modulation form.
      "precedente"
  }?
att.textRendition.attributes =
  att.textRendition.attribute.altrend, att.textRendition.attribute.rend
att.textRendition.attribute.altrend =
  
  ## Used to extend the values of the rend attribute.
  attribute altrend {
    list { xsd:NMTOKEN+ }
  }?
att.textRendition.attribute.rend =
  
  ## Captures the appearance of the element's contents using MEI-defined descriptors.
  attribute rend {
    list { data.TEXTRENDITION+ }
  }?
att.textStyle.attributes =
  att.textStyle.attribute.text.fam,
  att.textStyle.attribute.text.name,
  att.textStyle.attribute.text.size,
  att.textStyle.attribute.text.style,
  att.textStyle.attribute.text.weight
att.textStyle.attribute.text.fam =
  
  ## Provides a default value for the font family name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.fam { data.FONTFAMILY }?
att.textStyle.attribute.text.name =
  
  ## Provides a default value for the font name of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.name { data.FONTNAME }?
att.textStyle.attribute.text.size =
  
  ## Provides a default value for the font size of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.size { data.FONTSIZE }?
att.textStyle.attribute.text.style =
  
  ## Provides a default value for the font style of text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.style { data.FONTSTYLE }?
att.textStyle.attribute.text.weight =
  
  ## Provides a default value for the font weight for text (other than lyrics) when this information is not provided on the individual elements.
  attribute text.weight { data.FONTWEIGHT }?
att.tiePresent.attributes = att.tiePresent.attribute.tie
att.tiePresent.attribute.tie =
  [
    a:documentation [
      "Indicates that this element participates in a tie. If visual information about the tie needs to be recorded, then a "
      ns1:code [ "<tie>" ]
      " element should be employed."
    ]
  ]
  attribute tie {
    list { data.TIE+ }
  }?
att.timestamp.logical.attributes =
  att.timestamp.logical.attribute.tstamp
att.timestamp.logical.attribute.tstamp =
  
  ## Encodes the onset time in terms of musical time, i.e., beats[.fractional beat part], as expressed in the written time signature.
  attribute tstamp { data.BEAT }?
att.timestamp2.logical.attributes =
  att.timestamp2.logical.attribute.tstamp2
att.timestamp2.logical.attribute.tstamp2 =
  
  ## Encodes the ending point of an event, i.e., a count of measures plus a beat location in the ending measure.
  attribute tstamp2 { data.MEASUREBEAT }?
att.transposition.attributes =
  att.transposition.attribute.trans.diat,
  att.transposition.attribute.trans.semi
att.transposition.attribute.trans.diat =
  
  ## Records the amount of diatonic pitch shift, e.g., C to C♯ = 0, C to D♭ = 1, necessary to calculate the sounded pitch from the written one.
  attribute trans.diat { xsd:decimal }?
att.transposition.attribute.trans.semi =
  
  ## Records the amount of pitch shift in semitones, e.g., C to C♯ = 1, C to D♭ = 1, necessary to calculate the sounded pitch from the written one.
  attribute trans.semi { xsd:decimal }?
att.tupletPresent.attributes = att.tupletPresent.attribute.tuplet
att.tupletPresent.attribute.tuplet =
  [
    a:documentation [
      "Indicates that this feature participates in a tuplet. If visual information about the tuplet needs to be recorded, then a "
      ns1:code [ "<tuplet>" ]
      " element should be employed."
    ]
  ]
  attribute tuplet {
    list { data.TUPLET+ }
  }?
att.typed.attributes = att.classed.attributes, att.typed.attribute.type
att.typed.attribute.type =
  
  ## Designation which characterizes the element in some sense, using any convenient classification scheme or typology that employs single-token labels.
  attribute type {
    list { xsd:NMTOKEN+ }
  }?
att.typography.attributes =
  att.typography.attribute.fontfam,
  att.typography.attribute.fontname,
  att.typography.attribute.fontsize,
  att.typography.attribute.fontstyle,
  att.typography.attribute.fontweight
att.typography.attribute.fontfam =
  
  ## Contains the name of a font-family.
  attribute fontfam { data.FONTFAMILY }?
att.typography.attribute.fontname =
  
  ## Holds the name of a font.
  attribute fontname { data.FONTNAME }?
att.typography.attribute.fontsize =
  
  ## Indicates the size of a font expressed in printers' points, i.e., 1/72nd of an inch, relative terms, e.g., "small", "larger", etc., or percentage values relative to "normal" size, e.g., "125%". 
  attribute fontsize { data.FONTSIZE }?
att.typography.attribute.fontstyle =
  
  ## Records the style of a font, i.e, italic, oblique, or normal.
  attribute fontstyle { data.FONTSTYLE }?
att.typography.attribute.fontweight =
  
  ## Used to indicate bold type.
  attribute fontweight { data.FONTWEIGHT }?
att.verticalAlign.attributes = att.verticalAlign.attribute.valign
att.verticalAlign.attribute.valign =
  
  ## Records vertical alignment.
  attribute valign { data.VERTICALALIGNMENT }?
att.verticalGroup.attributes = att.verticalGroup.attribute.vgrp
att.verticalGroup.attribute.vgrp =
  
  ## Provides a label for members of a vertically aligned group.
  attribute vgrp { xsd:positiveInteger }?
att.visibility.attributes = att.visibility.attribute.visible
att.visibility.attribute.visible =
  
  ## Indicates if a feature should be rendered when the notation is presented graphically or sounded when it is presented in an aural form.
  attribute visible { data.BOOLEAN }?
att.visualOffset.attributes =
  att.visualOffset.ho.attributes,
  att.visualOffset.to.attributes,
  att.visualOffset.vo.attributes
att.visualOffset.ho.attributes = att.visualOffset.ho.attribute.ho
att.visualOffset.ho.attribute.ho =
  
  ## Records a horizontal adjustment to a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute ho { data.MEASUREMENTREL }?
att.visualOffset.to.attributes = att.visualOffset.to.attribute.to
att.visualOffset.to.attribute.to =
  
  ## Records a timestamp adjustment of a feature's programmatically-determined location in terms of musical time; that is, beats.
  attribute to { data.TSTAMPOFFSET }?
att.visualOffset.vo.attributes = att.visualOffset.vo.attribute.vo
att.visualOffset.vo.attribute.vo =
  
  ## Records the vertical adjustment of a feature's programmatically-determined location in terms of staff interline distance; that is, in units of 1/2 the distance between adjacent staff lines.
  attribute vo { data.MEASUREMENTREL }?
att.visualOffset2.attributes =
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.visualOffset2.vo.attributes
att.visualOffset2.ho.attributes =
  att.visualOffset2.ho.attribute.startho,
  att.visualOffset2.ho.attribute.endho
att.visualOffset2.ho.attribute.startho =
  
  ## Records the horizontal adjustment of a feature's programmatically-determined start point.
  attribute startho { data.MEASUREMENTREL }?
att.visualOffset2.ho.attribute.endho =
  
  ## Records the horizontal adjustment of a feature's programmatically-determined end point.
  attribute endho { data.MEASUREMENTREL }?
att.visualOffset2.to.attributes =
  att.visualOffset2.to.attribute.startto,
  att.visualOffset2.to.attribute.endto
att.visualOffset2.to.attribute.startto =
  
  ## Records a timestamp adjustment of a feature's programmatically-determined start point.
  attribute startto { data.TSTAMPOFFSET }?
att.visualOffset2.to.attribute.endto =
  
  ## Records a timestamp adjustment of a feature's programmatically-determined end point.
  attribute endto { data.TSTAMPOFFSET }?
att.visualOffset2.vo.attributes =
  att.visualOffset2.vo.attribute.startvo,
  att.visualOffset2.vo.attribute.endvo
att.visualOffset2.vo.attribute.startvo =
  
  ## Records a vertical adjustment of a feature's programmatically-determined start point.
  attribute startvo { data.MEASUREMENTREL }?
att.visualOffset2.vo.attribute.endvo =
  
  ## Records a vertical adjustment of a feature's programmatically-determined end point.
  attribute endvo { data.MEASUREMENTREL }?
att.voltaGroupingSym.attributes =
  att.voltaGroupingSym.attribute.voltasym
att.voltaGroupingSym.attribute.voltasym =
  
  ## Specifies the symbol used to group lyrics.
  attribute voltasym {
    
    ## Curved symbol, i.e., {.
    "brace"
    | 
      ## Square symbol, i.e., [, but with curved/angled top and bottom segments.
      "bracket"
    | 
      ## Square symbol, i.e., [, with horizontal top and bottom segments.
      "bracketsq"
    | 
      ## Line symbol, i.e., |, (wide) line without top and bottom curved/horizontal segments.
      "line"
    | 
      ## Grouping symbol missing.
      "none"
  }?
att.whitespace.attributes = att.whitespace.attribute.xmlspace
att.whitespace.attribute.xmlspace =
  
  ## Allows one to signal to an application whether an element's white space is "significant". The behavior of xml:space cascades to all descendant elements, but it can be turned off locally by setting the xml:space attribute to the value "default".
  attribute xml:space {
    
    ## Allows the application to handle white space as necessary. Not including an xml:space attribute produces the same result as using the default value.
    "default"
    | 
      ## Instructs the application to maintain white space "as-is", suggesting that it might have meaning.
      "preserve"
  }?
att.width.attributes = att.width.attribute.width
att.width.attribute.width =
  
  ## Measurement of the horizontal dimension of an entity.
  attribute width { data.MEASUREMENTABS }?
att.xy.attributes = att.xy.attribute.x, att.xy.attribute.y
att.xy.attribute.x =
  
  ## Encodes an x coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute x { xsd:decimal }?
att.xy.attribute.y =
  
  ## Encodes a y coordinate for a feature in an output coordinate system. When it is necessary to record the placement of a feature in a facsimile image, use the facs attribute.
  attribute y { xsd:decimal }?
att.xy2.attributes = att.xy2.attribute.x2, att.xy2.attribute.y2
att.xy2.attribute.x2 =
  
  ## Encodes the optional 2nd x coordinate.
  attribute x2 { xsd:decimal }?
att.xy2.attribute.y2 =
  
  ## Encodes the optional 2nd y coordinate.
  attribute y2 { xsd:decimal }?
model.addressLike = address
model.addressLike_alternation = address
model.addressLike_sequence = address
model.addressLike_sequenceOptional = address?
model.addressLike_sequenceOptionalRepeatable = address*
model.addressLike_sequenceRepeatable = address+
model.annotLike = annot
model.annotLike_alternation = annot
model.annotLike_sequence = annot
model.annotLike_sequenceOptional = annot?
model.annotLike_sequenceOptionalRepeatable = annot*
model.annotLike_sequenceRepeatable = annot+
model.biblLike = bibl | biblStruct
model.biblLike_alternation = bibl | biblStruct
model.biblLike_sequence = bibl, biblStruct
model.biblLike_sequenceOptional = bibl?, biblStruct?
model.biblLike_sequenceOptionalRepeatable = bibl*, biblStruct*
model.biblLike_sequenceRepeatable = bibl+, biblStruct+
model.biblPart =
  perfDuration
  | model.editionLike
  | model.respLike
  | biblScope
  | creation
  | genre
  | imprint
  | physLoc
  | recipient
  | relatedItem
  | series
  | textLang
model.captionLike = caption
model.chordPart =
  fermata
  | artic
  | note
  | tabDurSym
  | abzug
  | tabBarre
  | ensembleLine
  | separee
model.controlEventLike =
  bend
  | gliss
  | model.stageDirLike
  | sp
  | cpMark
  | metaMark
  | model.fingeringLike
  | model.controlEventLike.harmony
  | caesura
  | dir
  | dynam
  | ornam
  | phrase
  | tempo
  | vibrato
model.controlEventLike_alternation =
  bend
  | gliss
  | model.stageDirLike_alternation
  | sp
  | cpMark
  | metaMark
  | model.fingeringLike_alternation
  | model.controlEventLike.harmony_alternation
  | caesura
  | dir
  | dynam
  | ornam
  | phrase
  | tempo
  | vibrato
model.controlEventLike_sequence =
  bend,
  gliss,
  model.stageDirLike_sequence,
  sp,
  cpMark,
  metaMark,
  model.fingeringLike_sequence,
  model.controlEventLike.harmony_sequence,
  caesura,
  dir,
  dynam,
  ornam,
  phrase,
  tempo,
  vibrato
model.controlEventLike_sequenceOptional =
  bend?,
  gliss?,
  model.stageDirLike_sequenceOptional?,
  sp?,
  cpMark?,
  metaMark?,
  model.fingeringLike_sequenceOptional?,
  model.controlEventLike.harmony_sequenceOptional?,
  caesura?,
  dir?,
  dynam?,
  ornam?,
  phrase?,
  tempo?,
  vibrato?
model.controlEventLike_sequenceOptionalRepeatable =
  bend*,
  gliss*,
  model.stageDirLike_sequenceOptionalRepeatable*,
  sp*,
  cpMark*,
  metaMark*,
  model.fingeringLike_sequenceOptionalRepeatable*,
  model.controlEventLike.harmony_sequenceOptionalRepeatable*,
  caesura*,
  dir*,
  dynam*,
  ornam*,
  phrase*,
  tempo*,
  vibrato*
model.controlEventLike_sequenceRepeatable =
  bend+,
  gliss+,
  model.stageDirLike_sequenceRepeatable+,
  sp+,
  cpMark+,
  metaMark+,
  model.fingeringLike_sequenceRepeatable+,
  model.controlEventLike.harmony_sequenceRepeatable+,
  caesura+,
  dir+,
  dynam+,
  ornam+,
  phrase+,
  tempo+,
  vibrato+
model.dateLike = date
model.dateLike_alternation = date
model.dateLike_sequence = date
model.dateLike_sequenceOptional = date?
model.dateLike_sequenceOptionalRepeatable = date*
model.dateLike_sequenceRepeatable = date+
model.dimLike = depth | dim | height | width
model.dimLike_alternation = depth | dim | height | width
model.dimLike_sequence = depth, dim, height, width
model.dimLike_sequenceOptional = depth?, dim?, height?, width?
model.dimLike_sequenceOptionalRepeatable = depth*, dim*, height*, width*
model.dimLike_sequenceRepeatable = depth+, dim+, height+, width+
model.editionLike = edition
model.editorialLike = abbr | expan | instrName | instrConfig
model.editorialLike_alternation = abbr | expan | instrName | instrConfig
model.editorialLike_sequence = abbr, expan, instrName, instrConfig
model.editorialLike_sequenceOptional =
  abbr?, expan?, instrName?, instrConfig?
model.editorialLike_sequenceOptionalRepeatable =
  abbr*, expan*, instrName*, instrConfig*
model.editorialLike_sequenceRepeatable =
  abbr+, expan+, instrName+, instrConfig+
model.endingLike = ending
model.eventLike =
  model.keySigLike
  | model.meterSigLike
  | barLine
  | chord
  | clef
  | clefGrp
  | custos
  | note
  | pad
  | rest
  | space
  | tabGrp
model.headLike = head
model.identifierLike = identifier
model.identifierLike_alternation = identifier
model.identifierLike_sequence = identifier
model.identifierLike_sequenceOptional = identifier?
model.identifierLike_sequenceOptionalRepeatable = identifier*
model.identifierLike_sequenceRepeatable = identifier+
model.imprintPart = distributor | publisher | pubPlace
model.incipLike = incip
model.instrDefLike = instrDef
model.keyAccidLike = keyAccid
model.keySigLike = keySig
model.keySigLike_alternation = keySig
model.keySigLike_sequence = keySig
model.keySigLike_sequenceOptional = keySig?
model.keySigLike_sequenceOptionalRepeatable = keySig*
model.keySigLike_sequenceRepeatable = keySig+
model.labelLike = label | labelAbbr
model.layerDefLike = layerDef
model.layerLike = layer
model.layerLike_alternation = layer
model.layerLike_sequence = layer
model.layerLike_sequenceOptional = layer?
model.layerLike_sequenceOptionalRepeatable = layer*
model.layerLike_sequenceRepeatable = layer+
model.layerPart =
  model.layerPart.cmn
  | model.eventLike
  | model.layerPart.mensuralAndNeumes
model.layerPart.mensuralAndNeumes =
  model.layerPart.mensural | model.midiLike | model.layerPart.neumes
model.lbLike = lb
model.lbLike_alternation = lb
model.lbLike_sequence = lb
model.lbLike_sequenceOptional = lb?
model.lbLike_sequenceOptionalRepeatable = lb*
model.lbLike_sequenceRepeatable = lb+
model.mdivLike = mdiv
model.measurementLike = model.numLike
model.measurementLike_alternation = model.numLike_alternation
model.measurementLike_sequence = model.numLike_sequence
model.measurementLike_sequenceOptional = model.numLike_sequenceOptional?
model.measurementLike_sequenceOptionalRepeatable =
  model.numLike_sequenceOptionalRepeatable*
model.measurementLike_sequenceRepeatable =
  model.numLike_sequenceRepeatable+
model.meterSigLike = meterSig | meterSigGrp
model.meterSigLike_alternation = meterSig | meterSigGrp
model.meterSigLike_sequence = meterSig, meterSigGrp
model.meterSigLike_sequenceOptional = meterSig?, meterSigGrp?
model.meterSigLike_sequenceOptionalRepeatable = meterSig*, meterSigGrp*
model.meterSigLike_sequenceRepeatable = meterSig+, meterSigGrp+
model.milestoneLike.music = model.pbLike | cb | colLayout | sb
model.milestoneLike.text = model.lbLike | model.pbLike | cb | colLayout
model.nameLike = model.nameLike.agent | model.nameLike.place | name
model.nameLike_alternation =
  model.nameLike.agent_alternation
  | model.nameLike.place_alternation
  | name
model.nameLike_sequence =
  model.nameLike.agent_sequence, model.nameLike.place_sequence, name
model.nameLike_sequenceOptional =
  model.nameLike.agent_sequenceOptional?,
  model.nameLike.place_sequenceOptional?,
  name?
model.nameLike_sequenceOptionalRepeatable =
  model.nameLike.agent_sequenceOptionalRepeatable*,
  model.nameLike.place_sequenceOptionalRepeatable*,
  name*
model.nameLike_sequenceRepeatable =
  model.nameLike.agent_sequenceRepeatable+,
  model.nameLike.place_sequenceRepeatable+,
  name+
model.noteModifierLike = accid | artic | dot | model.fretGlyphLike
model.noteModifierLike_alternation =
  accid | artic | dot | model.fretGlyphLike_alternation
model.noteModifierLike_sequence =
  accid, artic, dot, model.fretGlyphLike_sequence
model.noteModifierLike_sequenceOptional =
  accid?, artic?, dot?, model.fretGlyphLike_sequenceOptional?
model.noteModifierLike_sequenceOptionalRepeatable =
  accid*, artic*, dot*, model.fretGlyphLike_sequenceOptionalRepeatable*
model.noteModifierLike_sequenceRepeatable =
  accid+, artic+, dot+, model.fretGlyphLike_sequenceRepeatable+
model.numLike = num
model.numLike_alternation = num
model.numLike_sequence = num
model.numLike_sequenceOptional = num?
model.numLike_sequenceOptionalRepeatable = num*
model.numLike_sequenceRepeatable = num+
model.paracontentPart =
  model.stageDirLike
  | model.editLike
  | model.transcriptionLike
  | model.tableLike
  | model.textPhraseLike
  | model.lgLike
  | model.listLike
  | model.quoteLike
model.partLike = part
model.partsLike = parts
model.pbLike = pb
model.pbLike_alternation = pb
model.pbLike_sequence = pb
model.pbLike_sequenceOptional = pb?
model.pbLike_sequenceOptionalRepeatable = pb*
model.pbLike_sequenceRepeatable = pb+
model.pLike = p
model.pLike_alternation = p
model.pLike_sequence = p
model.pLike_sequenceOptional = p?
model.pLike_sequenceOptionalRepeatable = p*
model.pLike_sequenceRepeatable = p+
model.relationLike = relation | relationList
model.relationLike_alternation = relation | relationList
model.relationLike_sequence = relation, relationList
model.relationLike_sequenceOptional = relation?, relationList?
model.relationLike_sequenceOptionalRepeatable = relation*, relationList*
model.relationLike_sequenceRepeatable = relation+, relationList+
model.rendLike = rend | stack
model.rendLike_alternation = rend | stack
model.rendLike_sequence = rend, stack
model.rendLike_sequenceOptional = rend?, stack?
model.rendLike_sequenceOptionalRepeatable = rend*, stack*
model.rendLike_sequenceRepeatable = rend+, stack+
model.repositoryLike = repository
model.repositoryLike_alternation = repository
model.repositoryLike_sequence = repository
model.repositoryLike_sequenceOptional = repository?
model.repositoryLike_sequenceOptionalRepeatable = repository*
model.repositoryLike_sequenceRepeatable = repository+
model.resourceLike = facsimile | genDesc | performance
model.respLike = model.respLikePart | respStmt
model.respLikePart =
  arranger
  | author
  | composer
  | contributor
  | editor
  | funder
  | librettist
  | lyricist
  | sponsor
model.respLikePart_alternation =
  arranger
  | author
  | composer
  | contributor
  | editor
  | funder
  | librettist
  | lyricist
  | sponsor
model.respLikePart_sequence =
  arranger,
  author,
  composer,
  contributor,
  editor,
  funder,
  librettist,
  lyricist,
  sponsor
model.respLikePart_sequenceOptional =
  arranger?,
  author?,
  composer?,
  contributor?,
  editor?,
  funder?,
  librettist?,
  lyricist?,
  sponsor?
model.respLikePart_sequenceOptionalRepeatable =
  arranger*,
  author*,
  composer*,
  contributor*,
  editor*,
  funder*,
  librettist*,
  lyricist*,
  sponsor*
model.respLikePart_sequenceRepeatable =
  arranger+,
  author+,
  composer+,
  contributor+,
  editor+,
  funder+,
  librettist+,
  lyricist+,
  sponsor+
model.scoreDefLike = scoreDef
model.scoreLike = score
model.scorePart =
  model.endingLike
  | model.scorePart.mensuralAndNeumes
  | model.sectionLike
model.scorePart.mensuralAndNeumes = notAllowed
model.sectionLike = section
model.sectionPart =
  model.sectionPart.cmn
  | model.endingLike
  | model.scoreDefLike
  | model.sectionLike
  | model.sectionPart.mensuralAndNeumes
  | model.staffDefLike
model.sectionPart.mensuralAndNeumes =
  model.sectionPart.mensural
  | model.sectionPart.neumes
  | model.staffLike
model.staffDefLike = staffDef
model.staffDefPart =
  model.staffDefPart.mensural
  | model.keySigLike
  | model.meterSigLike
  | clef
  | clefGrp
  | tuning
model.staffGrpLike = staffGrp
model.staffLike = staff
model.staffLike_alternation = staff
model.staffLike_sequence = staff
model.staffLike_sequenceOptional = staff?
model.staffLike_sequenceOptionalRepeatable = staff*
model.staffLike_sequenceRepeatable = staff+
model.staffPart =
  model.ossiaLike
  | model.layerLike
  | model.staffPart.mensuralAndNeumes
  | tabBarre
  | connectingLine
model.staffPart.mensuralAndNeumes =
  model.staffPart.mensural | model.staffPart.neumes
model.sylLike = syl
model.textComponentLike =
  model.tableLike
  | model.pLike
  | model.lgLike
  | model.listLike
  | model.quoteLike
model.textComponentLike_alternation =
  model.tableLike_alternation
  | model.pLike_alternation
  | model.lgLike_alternation
  | model.listLike_alternation
  | model.quoteLike_alternation
model.textComponentLike_sequence =
  model.tableLike_sequence,
  model.pLike_sequence,
  model.lgLike_sequence,
  model.listLike_sequence,
  model.quoteLike_sequence
model.textComponentLike_sequenceOptional =
  model.tableLike_sequenceOptional?,
  model.pLike_sequenceOptional?,
  model.lgLike_sequenceOptional?,
  model.listLike_sequenceOptional?,
  model.quoteLike_sequenceOptional?
model.textComponentLike_sequenceOptionalRepeatable =
  model.tableLike_sequenceOptionalRepeatable*,
  model.pLike_sequenceOptionalRepeatable*,
  model.lgLike_sequenceOptionalRepeatable*,
  model.listLike_sequenceOptionalRepeatable*,
  model.quoteLike_sequenceOptionalRepeatable*
model.textComponentLike_sequenceRepeatable =
  model.tableLike_sequenceRepeatable+,
  model.pLike_sequenceRepeatable+,
  model.lgLike_sequenceRepeatable+,
  model.listLike_sequenceRepeatable+,
  model.quoteLike_sequenceRepeatable+
model.textPhraseLike = model.pbLike | model.textPhraseLike.limited
model.textPhraseLike.limited =
  model.figureLike
  | model.msInline
  | model.addressPart
  | model.nameLike.label
  | model.locrefLike
  | model.addressLike
  | model.annotLike
  | model.biblLike
  | model.dateLike
  | model.dimLike
  | model.editorialLike
  | model.identifierLike
  | model.lbLike
  | model.measurementLike
  | model.nameLike
  | model.relationLike
  | model.rendLike
  | model.titleLike
  | dedicatee
  | dimensions
  | extent
  | symbol
  | term
  | model.qLike
  | seg
model.textPhraseLike.limited_alternation =
  model.figureLike_alternation
  | model.msInline_alternation
  | model.addressPart_alternation
  | model.nameLike.label_alternation
  | model.locrefLike_alternation
  | model.addressLike_alternation
  | model.annotLike_alternation
  | model.biblLike_alternation
  | model.dateLike_alternation
  | model.dimLike_alternation
  | model.editorialLike_alternation
  | model.identifierLike_alternation
  | model.lbLike_alternation
  | model.measurementLike_alternation
  | model.nameLike_alternation
  | model.relationLike_alternation
  | model.rendLike_alternation
  | model.titleLike_alternation
  | dedicatee
  | dimensions
  | extent
  | symbol
  | term
  | model.qLike_alternation
  | seg
model.textPhraseLike.limited_sequence =
  model.figureLike_sequence,
  model.msInline_sequence,
  model.addressPart_sequence,
  model.nameLike.label_sequence,
  model.locrefLike_sequence,
  model.addressLike_sequence,
  model.annotLike_sequence,
  model.biblLike_sequence,
  model.dateLike_sequence,
  model.dimLike_sequence,
  model.editorialLike_sequence,
  model.identifierLike_sequence,
  model.lbLike_sequence,
  model.measurementLike_sequence,
  model.nameLike_sequence,
  model.relationLike_sequence,
  model.rendLike_sequence,
  model.titleLike_sequence,
  dedicatee,
  dimensions,
  extent,
  symbol,
  term,
  model.qLike_sequence,
  seg
model.textPhraseLike.limited_sequenceOptional =
  model.figureLike_sequenceOptional?,
  model.msInline_sequenceOptional?,
  model.addressPart_sequenceOptional?,
  model.nameLike.label_sequenceOptional?,
  model.locrefLike_sequenceOptional?,
  model.addressLike_sequenceOptional?,
  model.annotLike_sequenceOptional?,
  model.biblLike_sequenceOptional?,
  model.dateLike_sequenceOptional?,
  model.dimLike_sequenceOptional?,
  model.editorialLike_sequenceOptional?,
  model.identifierLike_sequenceOptional?,
  model.lbLike_sequenceOptional?,
  model.measurementLike_sequenceOptional?,
  model.nameLike_sequenceOptional?,
  model.relationLike_sequenceOptional?,
  model.rendLike_sequenceOptional?,
  model.titleLike_sequenceOptional?,
  dedicatee?,
  dimensions?,
  extent?,
  symbol?,
  term?,
  model.qLike_sequenceOptional?,
  seg?
model.textPhraseLike.limited_sequenceOptionalRepeatable =
  model.figureLike_sequenceOptionalRepeatable*,
  model.msInline_sequenceOptionalRepeatable*,
  model.addressPart_sequenceOptionalRepeatable*,
  model.nameLike.label_sequenceOptionalRepeatable*,
  model.locrefLike_sequenceOptionalRepeatable*,
  model.addressLike_sequenceOptionalRepeatable*,
  model.annotLike_sequenceOptionalRepeatable*,
  model.biblLike_sequenceOptionalRepeatable*,
  model.dateLike_sequenceOptionalRepeatable*,
  model.dimLike_sequenceOptionalRepeatable*,
  model.editorialLike_sequenceOptionalRepeatable*,
  model.identifierLike_sequenceOptionalRepeatable*,
  model.lbLike_sequenceOptionalRepeatable*,
  model.measurementLike_sequenceOptionalRepeatable*,
  model.nameLike_sequenceOptionalRepeatable*,
  model.relationLike_sequenceOptionalRepeatable*,
  model.rendLike_sequenceOptionalRepeatable*,
  model.titleLike_sequenceOptionalRepeatable*,
  dedicatee*,
  dimensions*,
  extent*,
  symbol*,
  term*,
  model.qLike_sequenceOptionalRepeatable*,
  seg*
model.textPhraseLike.limited_sequenceRepeatable =
  model.figureLike_sequenceRepeatable+,
  model.msInline_sequenceRepeatable+,
  model.addressPart_sequenceRepeatable+,
  model.nameLike.label_sequenceRepeatable+,
  model.locrefLike_sequenceRepeatable+,
  model.addressLike_sequenceRepeatable+,
  model.annotLike_sequenceRepeatable+,
  model.biblLike_sequenceRepeatable+,
  model.dateLike_sequenceRepeatable+,
  model.dimLike_sequenceRepeatable+,
  model.editorialLike_sequenceRepeatable+,
  model.identifierLike_sequenceRepeatable+,
  model.lbLike_sequenceRepeatable+,
  model.measurementLike_sequenceRepeatable+,
  model.nameLike_sequenceRepeatable+,
  model.relationLike_sequenceRepeatable+,
  model.rendLike_sequenceRepeatable+,
  model.titleLike_sequenceRepeatable+,
  dedicatee+,
  dimensions+,
  extent+,
  symbol+,
  term+,
  model.qLike_sequenceRepeatable+,
  seg+
model.titleLike = title
model.titleLike_alternation = title
model.titleLike_sequence = title
model.titleLike_sequenceOptional = title?
model.titleLike_sequenceOptionalRepeatable = title*
model.titleLike_sequenceRepeatable = title+
model.titlePagePart =
  accessRestrict
  | availability
  | byline
  | contents
  | dedication
  | perfDuration
  | perfMedium
  | plateNum
  | price
  | sysReq
  | useRestrict
  | model.dateLike
  | model.editionLike
  | model.identifierLike
  | model.respLikePart
  | model.titleLike
  | imprint
  | series
  | titlePart
  | argument
  | epigraph
  | imprimatur
accid =
  
  ## (accidental) – Records a temporary alteration to the pitch of a note.
  element accid {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.accid.log.attributes,
    att.accid.vis.attributes,
    att.accid.ges.attributes,
    att.accid.anl.attributes,
    empty
  }
actor =
  
  ## Name of an actor appearing within a cast list.
  element actor {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
address =
  
  ## Contains a postal address, for example of a publisher, an organization, or an individual.
  element address {
    (addrLine+ | model.addressPart+),
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
addrLine =
  
  ## (address line) – Single line of a postal address.
  element addrLine {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
ambitus =
  
  ## Range of a voice, instrument or piece.
  element ambitus {
    ambNote,
    ambNote,
    att.common.attributes,
    att.facsimile.attributes,
    att.ambitus.anl.attributes,
    att.ambitus.ges.attributes,
    att.ambitus.log.attributes,
    att.ambitus.vis.attributes,
    att.metadataPointing.attributes,
    empty
  }
ambNote =
  
  ## Highest or lowest pitch in a score, staff, or layer.
  element ambNote {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.ambNote.log.attributes,
    att.ambNote.vis.attributes,
    att.ambNote.ges.attributes,
    att.ambNote.anl.attributes,
    empty
  }
analytic =
  
  ## (analytic level) – Contains bibliographic elements describing an item (e.g. an article or poem) published within a monograph or journal and not as an independent publication.
  element analytic {
    (model.respLikePart | respStmt | title)*,
    biblScope*,
    identifier?,
    att.common.attributes,
    att.bibl.attributes,
    att.componentType.attributes,
    att.dataPointing.attributes,
    att.pointing.attributes,
    att.recordType.attributes,
    att.targetEval.attributes,
    empty
  }
annot =
  
  ## (annotation) – Provides a statement explaining the text or indicating the basis for an assertion.
  element annot {
    ((model.headLike*, model.textComponentLike*)
     | (text
        | model.editLike
        | model.textPhraseLike
        | model.transcriptionLike)*)
    >> sch:pattern [
         id = "mei-annot-Check_annot_data-constraint-rule-129"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:annot[@data]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::mei:notesStmt"
             "The @data attribute may only occur on an\x{a}" ~
             "            annotation within the notesStmt element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.annot.log.attributes,
    att.annot.vis.attributes,
    att.annot.ges.attributes,
    att.annot.anl.attributes,
    att.audience.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.plist.attributes,
    att.source.attributes,
    att.targetEval.attributes,
    empty
  }
arranger =
  
  ## A person or organization who transcribes a musical composition, usually for a different medium from that of the original; in an arrangement the musical substance remains essentially unchanged.
  element arranger {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
artic =
  
  ## (articulation) – An indication of how to play a note or chord.
  element artic {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.artic.log.attributes,
    att.artic.vis.attributes,
    att.artic.ges.attributes,
    att.artic.anl.attributes,
    empty
  }
author =
  
  ## The name of the creator of the intellectual content of a non-musical, literary work.
  element author {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
barLine =
  
  ## Vertical line drawn through one or more staves that divides musical notation into metrical units.
  element barLine {
    empty
    >> sch:pattern [
         id = "mei-barLine-Check_barLinetaktplace-constraint-rule-130"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:barLine[@taktplace]"
           "\x{a}" ~
           "               "
           sch:let [ name = "staff" value = "ancestor::mei:staff/@n" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "staffpos"
             value =
               "count(ancestor::mei:staff/preceding-sibling::mei:staff) + 1"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@taktplace) <= number(2 * preceding::mei:staffDef[@n=$staff and @lines][1]/@lines)"
             "The value of @taktplace must be less than or equal to two times the number of staff\x{a}" ~
             "            lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    att.barLine.log.attributes,
    att.barLine.vis.attributes,
    att.barLine.ges.attributes,
    att.barLine.anl.attributes,
    empty
  }
bibl =
  
  ## (bibliographic reference) – Provides a loosely-structured bibliographic citation in which the sub-components may or may not be explicitly marked.
  element bibl {
    (text | model.biblPart | model.imprintPart | model.textPhraseLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.pointing.attributes,
    empty
  }
biblList =
  
  ## List of bibliographic references.
  element biblList {
    model.headLike*,
    (((label?, model.biblLike) | biblList)*)
    >> sch:pattern [
         id = "mei-biblList-checkBiblLabels-constraint-rule-131"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:biblList[mei:label]"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "count(mei:label) = count(mei:bibl)"
             "When labels are used,\x{a}" ~
             "            usually each bibliographic item has one."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
biblScope =
  
  ## (scope of citation) – Defines the scope of a bibliographic reference, for example as a list of page numbers, or a named subdivision of a larger work.
  element biblScope {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.extent.attributes,
    att.lang.attributes,
    
    ##
    attribute from { xsd:token }?,
    
    ##
    attribute to { xsd:token }?,
    empty
  }
biblStruct =
  
  ## (structured bibliographic citation) – Contains a bibliographic citation in which bibliographic sub-elements must appear in a specified order.
  element biblStruct {
    (analytic*,
     (monogr, series*)+,
     (model.annotLike | identifier | relatedItem)*),
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    att.pointing.attributes,
    att.recordType.attributes,
    att.targetEval.attributes,
    empty
  }
body =
  
  ## Contains the whole of a single musical text, excluding any front or back matter.
  element body {
    (model.divLike | model.mdivLike)+,
    att.common.attributes,
    att.metadataPointing.attributes,
    empty
  }
caesura =
  
  ## Break, pause, or interruption in the normal tempo of a composition. Typically indicated by "railroad tracks", i.e., two diagonal slashes.
  element caesura {
    empty
    >> sch:pattern [
         id =
           "mei-caesura-caesura_start-type_attributes_required-constraint-rule-132"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:caesura"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.caesura.anl.attributes,
    att.caesura.ges.attributes,
    att.caesura.log.attributes,
    att.caesura.vis.attributes,
    empty
  }
caption =
  
  ## A label which accompanies an illustration or a table.
  element caption {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
castGrp =
  
  ## (cast group) – Groups one or more individual castItem elements within a cast list.
  element castGrp {
    (castItem | castGrp | roleDesc)+,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
castItem =
  
  ## Contains a single entry within a cast list, describing either a single role or a list of non-speaking roles.
  element castItem {
    (text | role | roleDesc | actor | perfRes)+,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
castList =
  
  ## Contains a single cast list or dramatis personae.
  element castList {
    model.headLike*,
    (castItem | castGrp)+,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
cb =
  
  ## (column beginning) – An empty formatting element that forces text to begin in a new column.
  element cb {
    empty,
    att.basic.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.responsibility.attributes,
    att.source.attributes,
    att.typed.attributes,
    
    ## Records the column number.
    attribute n { xsd:positiveInteger }
    >> sch:pattern [
         id = "mei-cb-n-check_cb-constraint-rule-133"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:cb"
           "\x{a}" ~
           "               "
           sch:let [
             name = "totalColumns"
             value = "preceding::mei:colLayout[1]/@cols"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "preceding::mei:colLayout"
             "Column beginning must be preceded by a\x{a}" ~
             "                colLayout element."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@n <= $totalColumns"
             "The value of @n should be less than or equal\x{a}" ~
             "                to the value of @cols ("
             sch:value-of [ select = "$totalColumns" ]
             ") of the preceding\x{a}" ~
             "                colLayout element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    empty
  }
chord =
  
  ## A simultaneous sounding of two or more notes in the same layer *with the same duration*.
  element chord {
    (model.chordPart
     | model.appLike
     | model.editLike
     | model.sylLike
     | model.transcriptionLike
     | model.verseLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.chord.log.attributes,
    att.chord.vis.attributes,
    att.chord.ges.attributes,
    att.chord.anl.attributes,
    empty
  }
clef =
  
  ## Indication of the exact location of a particular note on the staff and, therefore, the other notes as well.
  element clef {
    empty
    >> sch:pattern [
         id = "mei-clef-Clef_position_lines-constraint-rule-134"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clef[ancestor::mei:staffDef[@lines]]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staffDef/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <= number(ancestor::mei:staffDef[@n=$thisstaff and @lines][1]/@lines)"
             "The clef position must be less than or equal to the number of lines of an ancestor\x{a}" ~
             "            staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-clef-Clef_position_nolines-constraint-rule-135"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:clef[ancestor::mei:staffDef[not(@lines)]]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staffDef/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <= number(preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines)"
             "The clef position must be less than or equal to the number of lines of a preceding\x{a}" ~
             "            staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.event.attributes,
    att.facsimile.attributes,
    att.clef.anl.attributes,
    att.clef.ges.attributes,
    att.clef.log.attributes,
    att.clef.vis.attributes,
    empty
  }
clefGrp =
  
  ## (clef group) – A set of simultaneously-occurring clefs.
  element clefGrp {
    clef+,
    att.common.attributes,
    att.event.attributes,
    att.facsimile.attributes,
    att.clefGrp.log.attributes,
    att.clefGrp.vis.attributes,
    att.clefGrp.ges.attributes,
    att.clefGrp.anl.attributes,
    empty
  }
colLayout =
  
  ## (column layout) – An empty formatting element that signals the start of columnar layout.
  element colLayout {
    empty,
    att.common.attributes,
    att.source.attributes,
    
    ## Records the number of columns.
    attribute cols { xsd:positiveInteger },
    empty
  }
composer =
  
  ## The name of the creator of the intellectual content of a musical work.
  element composer {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
contributor =
  
  ## Names of individuals, institutions, or organizations responsible for contributions to the intellectual content of a work, where the specialized elements for authors, editors, etc. do not suffice or do not apply.
  element contributor {
    ((text | model.textPhraseLike.limited)*)
    >> sch:pattern [
         id =
           "mei-contributor-check_contributor_role-constraint-rule-136"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:contributor"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(matches(normalize-space(lower-case(@role)),               '(arranger|author|composer|contributor|editor|funder|librettist|lyricist|sponsor)'))"
             "The value of @role must not contain the name of another element available in this\x{a}" ~
             "            context."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Used to specify the contributor's function.
    attribute role { text }?,
    empty
  }
creation =
  
  ## Non-bibliographic details of the creation of an intellectual entity, in narrative form, such as the date, place, and circumstances of its composition. More detailed information may be captured within the history element.
  element creation {
    model.headLike*,
    (text | dedication | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
custos =
  
  ## Symbol placed at the end of a line of music to indicate the first note of the next line. Sometimes called a "direct".
  element custos {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.source.attributes,
    att.custos.log.attributes,
    att.custos.vis.attributes,
    att.custos.ges.attributes,
    att.custos.anl.attributes,
    empty
  }
date =
  
  ## A string identifying a point in time or the time period between two such points.
  element date {
    (text | model.textPhraseLike)*,
    att.common.attributes,
    att.bibl.attributes,
    att.calendared.attributes,
    att.datable.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
dedicatee =
  
  ## Entity to whom a creative work is formally offered.
  element dedicatee {
    ((text | model.textPhraseLike.limited)*)
    >> sch:pattern [
         id = "mei-dedicatee-check_dedicatee-constraint-rule-137"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dedicatee"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(ancestor::mei:dedicatee)"
             "The dedicatee element may not be\x{a}" ~
             "            recursively nested."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
depth =
  
  ## Description of a measurement taken through a three-dimensional object.
  element depth {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.quantity.attributes,
    empty
  }
desc =
  
  ## (description) – Container for text that briefly describes the feature to which it is attached, including its intended usage, purpose, or application as appropriate.
  element desc {
    (text
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.source.attributes,
    empty
  }
dim =
  
  ## (dimension) – Any single dimensional specification.
  element dim {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.quantity.attributes,
    
    ## Aspect of the object being measured.
    ## Suggested values include: 1] alt; 2] angle; 3] circum; 4] depth; 5] diameter; 6] elevation; 7] height; 8] length; 9] radius; 10] relief; 11] width
    attribute form {
      
      ## Altitude. Refers to the distance above a given level, commonly mean sea level.
      "alt"
      | 
        ## Angle. Amount of rotation needed to bring one line or plane into coincidence with another.
        "angle"
      | 
        ## Circumference of a circular area.
        "circum"
      | 
        ## Dimension taken through an object or body of material, usually downward from an upper surface, horizontally inward from an outer surface, or from top to bottom of something regarded as one of several layers.
        "depth"
      | 
        ## Length of a straight line passing through the center of a circle or sphere and meeting the circumference or surface at each end.
        "diameter"
      | 
        ## Distance to which something has been raised or uplifted above a level, e.g. a hill's elevation above the surrounding country.
        "elevation"
      | 
        ## Denotes extent upward (as from foot to head) as well as any measurable distance above a given level.
        "height"
      | 
        ## Measure of the greatest dimension of a plane or solid figure.
        "length"
      | 
        ## Half the diameter of a circular, spherical, or cylindrical object.
        "radius"
      | 
        ## Projection of a figure or part from the plane on which it is formed.
        "relief"
      | 
        ## Extent from side to side; breadth.
        "width"
      | xsd:NMTOKEN
    },
    empty
  }
dimensions =
  
  ## Information about the physical size of an entity; usually includes numerical data.
  element dimensions {
    macro.struc-unstrucContent
    >> sch:pattern [
         id = "mei-dimensions-check_dimensions-constraint-rule-138"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:physDesc/mei:dimensions"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(count(mei:depth) > 1)"
             "The depth element may only appear\x{a}" ~
             "            once."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(count(mei:height) > 1)"
             "The height element may only appear\x{a}" ~
             "            once."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(count(mei:width) > 1)"
             "The width element may only appear\x{a}" ~
             "            once."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.lang.attributes,
    att.measurement.attributes,
    empty
  }
dir =
  [
    a:documentation [
      "(directive) – An instruction expressed as a combination of text and symbols — such as segno and coda symbols, fermatas over a bar line, etc., typically above, below, or between staves, but not on the staff — that is not encoded elsewhere in more specific elements, like "
      ns1:code [ "<tempo>" ]
      " or "
      ns1:code [ "<dynam>" ]
      "."
    ]
  ]
  element dir {
    ((text
      | model.textPhraseLike.limited
      | model.graphicPrimitiveLike
      | model.editLike
      | model.transcriptionLike
      | model.controlEventLike)*)
    >> sch:pattern [
         id =
           "mei-dir-dir_start-type_attributes_required-constraint-rule-139"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dir[not(ancestor::mei:syllable)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.technique.tablature.attributes,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.dir.log.attributes,
    att.dir.vis.attributes,
    att.dir.ges.attributes,
    att.dir.anl.attributes,
    empty
  }
distributor =
  
  ## Person or agency, other than a publisher, from which access (including electronic access) to a bibliographic entity may be obtained.
  element distributor {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
\div =
  
  ## (division) – Major structural division of text, such as a preface, chapter or section.
  element div {
    (model.headLike | model.milestoneLike.text)*,
    ((model.divLike | model.figureLike | model.textComponentLike | sp),
     model.milestoneLike.text*)*,
    att.basic.attributes,
    att.classed.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.lang.attributes,
    att.linking.attributes,
    att.metadataPointing.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    
    ## Characterizes the textual division in some sense, using any convenient classification scheme or typology that employs single-token labels.
    ## Suggested values include: 1] abstract; 2] ack; 3] appendix; 4] bibliography; 5] colophon; 6] contents; 7] dedication; 8] frontispiece; 9] glossary; 10] half-title; 11] index; 12] annotations; 13] preface
    attribute type {
      
      ## A summary of the content of a text as continuous prose.
      "abstract"
      | 
        ## A formal declaration of acknowledgment by the author in which persons and institutions are thanked for their part in the creation of a text.
        "ack"
      | 
        ## An ancillary self-contained section of a work, often providing additional but in some sense extra-canonical text.
        "appendix"
      | 
        ## A list of bibliographic citations.
        "bibliography"
      | 
        ## A statement appearing at the end of a book describing the conditions of its physical production.
        "colophon"
      | 
        ## A table of contents, specifying the structure of a work and listing its constituents. The list element should be used to mark its structure.
        "contents"
      | 
        ## A formal offering or dedication of a text to one or more persons or institutions by the author.
        "dedication"
      | 
        ## A pictorial frontispiece, possibly including some text.
        "frontispiece"
      | 
        ## A list of terms associated with definition texts (‘glosses’).
        "glossary"
      | 
        ## A page containing only the title of a book — as opposed to the title page, which also lists subtitle, author, imprint and similar data.
        "half-title"
      | 
        ## Any form of index to the work.
        "index"
      | 
        ## A section in which annotations on the text are gathered together.
        "annotations"
      | 
        ## A foreword or preface addressed to the reader in which the author or publisher explains the content, purpose, or origin of the text.
        "preface"
      | xsd:NMTOKENS
    }?,
    empty
  }
dot =
  
  ## Dot of augmentation or division.
  element dot {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.dot.log.attributes,
    att.dot.vis.attributes,
    att.dot.ges.attributes,
    att.dot.anl.attributes,
    empty
  }
dynam =
  
  ## (dynamic) – Indication of the volume of a note, phrase, or section of music.
  element dynam {
    ((text
      | model.textPhraseLike.limited
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-dynam-dynam_start-type_attributes_required-constraint-rule-140"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dynam"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             " Must have one of\x{a}" ~
             "            the attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-dynam-dynam_end-type_attributes-constraint-rule-141"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:dynam[@val2]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "When @val2 is present, either\x{a}" ~
             "            @dur, @dur.ges, @endid, or @tstamp2 must also be present."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.dynam.log.attributes,
    att.dynam.vis.attributes,
    att.dynam.ges.attributes,
    att.dynam.anl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
edition =
  
  ## (edition designation) – A word or text phrase that indicates a difference in either content or form between the item being described and a related item previously issued by the same publisher/distributor (e.g. 2nd edition, version 2.0, etc.), or simultaneously issued by either the same publisher/distributor or another publisher/distributor (e.g. large print edition, British edition, etc.).
  element edition {
    (text
     | model.textPhraseLike.limited
     | editor
     | respStmt
     | textLang)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    empty
  }
editor =
  
  ## The name of the individual(s), institution(s) or organization(s) acting in an editorial capacity.
  element editor {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
ending =
  
  ## Alternative ending for a repeated passage of music; i.e., prima volta, seconda volta, etc.
  element ending {
    expansion*,
    (model.annotLike
     | model.appLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.milestoneLike.music
     | model.relationLike
     | model.scoreDefLike
     | model.sectionLike
     | model.sectionPart.cmn
     | model.sectionPart.mensuralAndNeumes
     | model.staffDefLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.ending.anl.attributes,
    att.ending.ges.attributes,
    att.ending.log.attributes,
    att.ending.vis.attributes,
    att.facsimile.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    empty
  }
event =
  
  ## Contains a free-text event description.
  element event {
    model.headLike*,
    ((model.eventPart | castList | eventList)*
     | (model.pLike | model.tableLike | \list)*),
    biblList*,
    att.common.attributes,
    att.bibl.attributes,
    att.calendared.attributes,
    att.datable.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
eventList =
  
  ## Contains historical information given as a sequence of significant past events.
  element eventList {
    model.headLike*,
    ((name
      | model.addressLike
      | model.dateLike
      | model.nameLike.agent
      | model.nameLike.geogName)?,
     (event | eventList))*,
    biblList*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    empty
  }
expansion =
  
  ## Indicates how a section may be programmatically expanded into its 'through-composed' form.
  element expansion {
    empty,
    att.common.attributes,
    att.plist.attributes,
    att.source.attributes,
    att.targetEval.attributes,
    empty
  }
extent =
  
  ## Used to express size in terms other than physical dimensions, such as number of pages, records, bytes, physical components, etc.
  element extent {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.quantity.attributes,
    empty
  }
funder =
  
  ## Names of individuals, institutions, or organizations responsible for funding. Funders provide financial support for a project; they are distinct from sponsors, who provide intellectual support and authority.
  element funder {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
genre =
  
  ## Term or terms that designate a category characterizing a particular style, form, or content.
  element genre {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
group =
  
  ## Contains a composite musical text, grouping together a sequence of distinct musical texts (or groups of such musical texts) which are regarded as a unit for some purpose, for example, the collected works of a composer.
  element group {
    (music | group),
    (music | group)*,
    att.common.attributes,
    att.metadataPointing.attributes,
    empty
  }
grpSym =
  
  ## (group symbol) – A brace or bracket used to group two or more staves of a score or part.
  element grpSym {
    (model.labelLike*)
    >> sch:pattern [
         id =
           "mei-grpSym-check_grpSym_attributes_scoreDef-constraint-rule-142"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:grpSym[parent::mei:scoreDef]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid and @endid and @level"
             "In scoreDef, grpSym must have startid,\x{a}" ~
             "            endid, and level attributes."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-grpSym-check_grpSym_attributes_staffDef-constraint-rule-143"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:grpSym[parent::mei:staffGrp]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "not(@startid or @endid or @level)"
             "In staffGrp, grpSym must not have\x{a}" ~
             "            startid, endid, or level attributes."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.grpSym.log.attributes,
    att.grpSym.vis.attributes,
    att.grpSym.ges.attributes,
    att.grpSym.anl.attributes,
    empty
  }
head =
  
  ## (heading) – Contains any heading, for example, the title of a section of text, or the heading of a list.
  element head {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.xy.attributes,
    empty
  }
height =
  
  ## Description of the vertical size of an object.
  element height {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.quantity.attributes,
    empty
  }
identifier =
  
  ## An alpha-numeric string that establishes the identity of the described material.
  element identifier {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    empty
  }
imprint =
  
  ## Information relating to the publication or distribution of a bibliographic item.
  element imprint {
    (text
     | model.imprintPart
     | model.textPhraseLike
     | model.transcriptionLike
     | respStmt)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    empty
  }
incip =
  
  ## (incipit) – The opening music and/or words of a musical or textual work.
  element incip {
    model.headLike*,
    tempo?,
    role?,
    (clef | clefGrp)?,
    (perfRes | perfResList)?,
    key?,
    meter?,
    mensuration?,
    (model.annotLike
     | model.graphicLike
     | model.scoreLike
     | incipCode
     | incipText)*,
    att.common.attributes,
    att.bibl.attributes,
    empty
  }
keyAccid =
  
  ## (key accidental) – Accidental in a key signature.
  element keyAccid {
    empty
    >> sch:pattern [
         id = "mei-keyAccid-Check_keyAccidPlacement-constraint-rule-144"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:keyAccid"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "(@x and @y) or @pname or @loc"
             "One of the following is required: @x and\x{a}" ~
             "            @y attribute pair, @pname attribute, or @loc attribute. "
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.keyAccid.anl.attributes,
    att.keyAccid.ges.attributes,
    att.keyAccid.log.attributes,
    att.keyAccid.vis.attributes,
    
    ## Specifies whether enharmonic (written) values or implicit ("perform-able") values are allowed.
    attribute form {
      
      ## Only performed values (sharp, flat, natural) allowed.
      "implicit"
      | 
        ## All enharmonic (written) values allowed.
        "explicit"
    }?,
    empty
  }
keySig =
  
  ## (key signature) – Written key signature.
  element keySig {
    ((model.keyAccidLike | model.transcriptionLike)*)
    >> sch:pattern [
         id = "mei-keySig-check_keyAccid_oct-constraint-rule-145"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:keySig[mei:keyAccid[@oct]]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:keyAccid[@oct]) = count(mei:keyAccid)"
             "If the @oct attribute\x{a}" ~
             "            appears on any keyAccid element, it must be provided on all keyAccid\x{a}" ~
             "            elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-keySig-check_keySig_editorial-constraint-rule-146"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:keySig/mei:*[local-name() eq 'add' or local-name() eq 'corr'             or local-name() eq 'damage' or local-name() eq 'del' or local-name() eq 'orig' or              local-name() eq 'reg' or local-name() eq 'restore' or local-name() eq 'sic' or              local-name() eq 'supplied' or local-name() eq 'unclear']"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:keyAccid) = count(mei:*)"
             "Only keyAccid elements are allowed\x{a}" ~
             "            here."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.keySig.anl.attributes,
    att.keySig.ges.attributes,
    att.keySig.log.attributes,
    att.keySig.vis.attributes,
    empty
  }
label =
  [
    a:documentation [
      'A container for document text that identifies the feature to which it is attached. For a "tool tip" or other generated label, use the '
      ns1:code [ "@label" ]
      " attribute."
    ]
  ]
  element label {
    (text
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.source.attributes,
    empty
  }
labelAbbr =
  
  ## A label on the pages following the first.
  element labelAbbr {
    (text
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.source.attributes,
    empty
  }
layer =
  
  ## An independent stream of events on a staff.
  element layer {
    (model.annotLike
     | model.appLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.layerPart
     | model.milestoneLike.music
     | model.transcriptionLike)*,
    att.basic.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.metadataPointing.attributes,
    att.nInteger.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    att.layer.log.attributes,
    att.layer.vis.attributes,
    att.layer.ges.attributes,
    att.layer.anl.attributes,
    empty
  }
layerDef =
  
  ## (layer definition) – Container for layer meta-information.
  element layerDef {
    model.labelLike*,
    model.instrDefLike*,
    ambitus?,
    att.basic.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.metadataPointing.attributes,
    att.nInteger.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    att.layerDef.log.attributes,
    att.layerDef.vis.attributes,
    att.layerDef.ges.attributes,
    att.layerDef.anl.attributes,
    empty
  }
lb =
  
  ## (line beginning) – An empty formatting element that forces text to begin on a new line.
  element lb {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.source.attributes,
    empty
  }
lg =
  
  ## (line group) – May be used for any section of text that is organized as a group of lines; however, it is most often used for a group of verse lines functioning as a formal unit, e.g. a stanza, refrain, verse paragraph, etc.
  element lg {
    model.headLike*,
    (model.lLike | model.lgLike),
    (model.lLike | model.lgLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.lyrics.ges.attributes,
    att.lyrics.log.attributes,
    att.lyrics.vis.attributes,
    att.metadataPointing.attributes,
    att.xy.attributes,
    empty
  }
librettist =
  
  ## Person or organization who is a writer of the text of an opera, oratorio, etc.
  element librettist {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
lyricist =
  
  ## Person or organization who is a writer of the text of a song.
  element lyricist {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
mdiv =
  
  ## (musical division) – Contains a subdivision of the body of a musical text.
  element mdiv {
    ((model.scoreLike?, model.partsLike?) | model.mdivLike*),
    att.common.attributes,
    att.facsimile.attributes,
    att.metadataPointing.attributes,
    att.mdiv.anl.attributes,
    att.mdiv.ges.attributes,
    att.mdiv.log.attributes,
    att.mdiv.vis.attributes,
    empty
  }
mei =
  
  ## Contains a single MEI-conformant document, consisting of an MEI header and a musical text, either in isolation or as part of an meiCorpus element.
  element mei {
    meiHead,
    music
    >> sch:pattern [
         id = "mei-mei-Check_staff-constraint-rule-147"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:*[@staff]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "every $i in tokenize(normalize-space(@staff), '\s+') satisfies $i=//mei:staffDef/@n"
             "The values in @staff must correspond to @n attribute of a staffDef\x{a}" ~
             "            element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.id.attributes,
    att.meiVersion.attributes,
    att.responsibility.attributes,
    empty
  }
monogr =
  
  ## (monograph level) – Contains bibliographic elements describing an item, for example, a published book or journal, score, recording, or an unpublished manuscript.
  element monogr {
    ((((model.respLikePart | respStmt),
       (model.respLikePart | respStmt)*,
       model.titleLike+,
       (editor | model.identifierLike | respStmt)*)
      | (model.titleLike+,
         (model.respLikePart | model.identifierLike | respStmt)*))?,
     (model.annotLike | corpName)*,
     (model.editionLike, (model.identifierLike | editor | respStmt)*)*,
     imprint,
     (imprint | extent | biblScope)*),
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.pointing.attributes,
    att.recordType.attributes,
    att.targetEval.attributes,
    empty
  }
music =
  
  ## Contains a single musical text of any kind, whether unitary or composite, for example, an etude, opera, song cycle, symphony, or anthology of piano solos.
  element music {
    model.resourceLike*,
    macro.musicPart,
    att.common.attributes,
    att.meiVersion.attributes,
    att.metadataPointing.attributes,
    empty
  }
name =
  
  ## Proper noun or noun phrase.
  element name {
    ((text
      | model.textPhraseLike
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id = "mei-name-nameParts-constraint-rule-148"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:name"
           "\x{a}" ~
           "               "
           sch:assert [
             role = "warning"
             test = "not(mei:geogName or mei:persName or mei:corpName)"
             "Recommended practice is to use name elements to capture sub-parts of a generic\x{a}" ~
             "            name."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.basic.attributes,
    att.bibl.attributes,
    att.classed.attributes,
    att.edit.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.lang.attributes,
    att.linking.attributes,
    att.name.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    
    ## Characterizes the name in some sense, using any convenient classification scheme or typology that employs single-token labels.
    ## Suggested values include: 1] person; 2] corporation; 3] location; 4] process; 5] style; 6] time
    attribute type {
      
      ## A personal name.
      "person"
      | 
        ## Name of a corporate body.
        "corporation"
      | 
        ## Name of a location.
        "location"
      | 
        ## Name of a process or software application.
        "process"
      | 
        ## Name of a musical style; i.e., form, genre, technique, etc.
        "style"
      | 
        ## Name of a period of time.
        "time"
      | xsd:NMTOKENS
    }?,
    empty
  }
note =
  
  ## A single pitched event. 
  element note {
    (model.noteModifierLike
     | model.verseLike
     | model.sylLike
     | model.appLike
     | model.editLike
     | model.transcriptionLike)*,
    att.note.ges.tablature.attributes,
    att.note.ges.tablature.mod.attributes,
    att.common.attributes,
    att.facsimile.attributes,
    att.note.log.attributes,
    att.note.vis.attributes,
    att.note.ges.attributes,
    att.note.anl.attributes,
    
    ## Point to the first (pitched) note in the bend gesture.
    attribute pitchInflection.startId { data.URI }?,
    empty
  }
num =
  
  ## (number) – Numeric information in any form.
  element num {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.measurement.attributes,
    att.ranging.attributes,
    
    ## Numeric value capturing a measurement or count. Can only be interpreted in combination with the unit attribute.
    attribute value { xsd:decimal }?,
    empty
  }
ornam =
  
  ## An element indicating an ornament that is not a mordent, turn, or trill. 
  element ornam {
    ((text
      | model.textPhraseLike.limited
      | model.graphicPrimitiveLike
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-ornam-ornam_start-type_attributes_required-constraint-rule-149"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:ornam"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.ornam.log.attributes,
    att.ornam.vis.attributes,
    att.ornam.ges.attributes,
    att.ornam.anl.attributes,
    empty
  }
p =
  
  ## (paragraph) – One or more text phrases that form a logical prose passage.
  element p {
    (text | model.paracontentPart)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.metadataPointing.attributes,
    att.xy.attributes,
    empty
  }
pad =
  
  ## (padding) – An indication of extra visual space between notational elements.
  element pad {
    empty,
    att.common.attributes,
    att.pad.log.attributes,
    att.pad.vis.attributes,
    att.pad.ges.attributes,
    att.pad.anl.attributes,
    empty
  }
part =
  
  ## An alternative visual rendition of the score from the point of view of a particular performer (or group of performers).
  element part {
    (model.annotLike
     | model.appLike
     | model.divLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.milestoneLike.music
     | model.scoreDefLike
     | model.scorePart
     | model.staffDefLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.metadataPointing.attributes,
    att.part.log.attributes,
    att.part.vis.attributes,
    att.part.ges.attributes,
    att.part.anl.attributes,
    empty
  }
parts =
  
  ## Provides a container for performers' parts.
  element parts {
    model.partLike*,
    att.common.attributes,
    att.metadataPointing.attributes,
    att.parts.log.attributes,
    att.parts.vis.attributes,
    att.parts.ges.attributes,
    att.parts.anl.attributes,
    empty
  }
pb =
  
  ## (page beginning) – An empty formatting element that forces text to begin on a new page.
  element pb {
    macro.metaLike.page,
    att.common.attributes,
    att.facsimile.attributes,
    att.pointing.attributes,
    att.source.attributes,
    att.pb.anl.attributes,
    att.pb.ges.attributes,
    att.pb.log.attributes,
    att.pb.vis.attributes,
    empty
  }
pgDesc =
  
  ## (page description) – Contains a brief prose description of the appearance or description of the content of a physical page.
  element pgDesc {
    (text
     | model.graphicPrimitiveLike
     | model.textComponentLike
     | model.annotLike
     | model.locrefLike)*,
    att.common.attributes,
    att.lang.attributes,
    empty
  }
pgFoot =
  
  ## (page footer) – A running footer on the first page. Also, used to temporarily override a running footer on individual pages.
  element pgFoot {
    (text
     | model.textComponentLike
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike
     | model.appLike
     | anchoredText)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Records horizontal alignment of the page footer.
    attribute halign { data.HORIZONTALALIGNMENT }?,
    empty
  }
pgFoot2 =
  
  ## (page footer 2) – A running footer on the pages following the first.
  element pgFoot2 {
    (text
     | model.textComponentLike
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike
     | model.appLike
     | anchoredText)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Records horizontal alignment of the page footer. Use multiple values to capture an alternating pattern.
    attribute halign {
      list { data.HORIZONTALALIGNMENT+ }
    }?,
    empty
  }
pgHead =
  
  ## (page header) – A running header on the first page. Also, used to temporarily override a running header on individual pages.
  element pgHead {
    (text
     | model.textComponentLike
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike
     | model.appLike
     | anchoredText)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Records horizontal alignment of the page header.
    attribute halign { data.HORIZONTALALIGNMENT }?,
    empty
  }
pgHead2 =
  
  ## (page header 2) – A running header on the pages following the first.
  element pgHead2 {
    (text
     | model.textComponentLike
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike
     | model.appLike
     | anchoredText)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Records horizontal alignment of the page header. Use multiple values to capture an alternating pattern.
    attribute halign {
      list { data.HORIZONTALALIGNMENT+ }
    }?,
    empty
  }
phrase =
  
  ## Indication of 1) a "unified melodic idea" or 2) performance technique.
  element phrase {
    (curve*)
    >> sch:pattern [
         id =
           "mei-phrase-phrase_start-_and_end-type_attributes_required-constraint-rule-150"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:phrase"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@dur or @dur.ges or @endid or @tstamp2"
             "Must have one of the attributes:\x{a}" ~
             "            dur, dur.ges, endid, or tstamp2."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-phrase-phrase_containing_curve-constraint-rule-151"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:phrase[mei:curve[@bezier or @bulge or @curvedir or @lform or @lwidth or @ho or              @startho or @endho or @to or @startto or @endto or @vo or @startvo or @endvo or @x or @y or @x2 or @y2]]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@bezier or @bulge or @curvedir or @lform or @lwidth or @ho or @startho or @endho or                @to or @startto or @endto or @vo or @startvo or @endvo or @x or @y or @x2 or @y2)"
             role = "warning"
             "The visual attributes of the phrase (@bezier, @bulge, @curvedir, @lform,\x{a}" ~
             "            @lwidth, @ho, @startho, @endho, @to, @startto, @endto, @vo, @startvo, @endvo, @x, @y,\x{a}" ~
             "            @x2, and @y2) will be overridden by visual attributes of the contained curve\x{a}" ~
             "            elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.phrase.log.attributes,
    att.phrase.vis.attributes,
    att.phrase.ges.attributes,
    att.phrase.anl.attributes,
    empty
  }
physLoc =
  
  ## (physical location) – Groups information about the current physical location of a bibliographic item, such as the repository in which it is located and its shelf mark(s), and its previous locations.
  element physLoc {
    model.headLike*,
    (model.repositoryLike, model.identifierLike*)*,
    history?,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    empty
  }
publisher =
  
  ## Name of the organization responsible for the publication of a bibliographic item.
  element publisher {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
pubPlace =
  
  ## (publication place) – Name of the place where a bibliographic item was published.
  element pubPlace {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
recipient =
  
  ## The name of the individual(s), institution(s) or organization(s) receiving correspondence.
  element recipient {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
relatedItem =
  
  ## (related item) – Contains or references another bibliographic item which is related to the present one.
  element relatedItem {
    model.biblLike*,
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.facsimile.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    [
      a:documentation [
        "Describes the relationship between the entity identified by the "
        ns1:code [ "<relatedItem>" ]
        " element and the resource described in the parent element, i.e., "
        ns1:code [ "<bibl>" ]
        ", "
        ns1:code [ "<source>" ]
        " or "
        ns1:code [ "<relatedItem>" ]
        "."
      ]
    ]
    attribute rel { data.MODSRELATIONSHIP },
    empty
  }
relation =
  
  ## Describes a relationship or linkage amongst entities.
  element relation {
    empty
    >> sch:pattern [
         id = "mei-relation-FRBR_relation-constraint-rule-152"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:relationList/mei:relation[parent::mei:work or parent::mei:expression or                        parent::mei:source or parent::mei:item]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "matches(@rel, 'hasAbridgement') or             matches(@rel, 'hasAbridgement') or             matches(@rel, 'isAbridgementOf') or             matches(@rel, 'hasAdaptation') or             matches(@rel, 'isAdaptationOf') or             matches(@rel, 'hasAlternate') or             matches(@rel, 'isAlternateOf') or             matches(@rel, 'hasArrangement') or             matches(@rel, 'isArrangementOf') or             matches(@rel, 'hasComplement') or             matches(@rel, 'isComplementOf') or             matches(@rel, 'hasEmbodiment') or             matches(@rel, 'isEmbodimentOf') or             matches(@rel, 'hasExemplar') or             matches(@rel, 'isExemplarOf') or             matches(@rel, 'hasImitation') or             matches(@rel, 'isImitationOf') or             matches(@rel, 'hasPart') or             matches(@rel, 'isPartOf') or             matches(@rel, 'hasRealization') or             matches(@rel, 'isRealizationOf') or             matches(@rel, 'hasReconfiguration') or             matches(@rel, 'isReconfigurationOf') or             matches(@rel, 'hasReproduction') or             matches(@rel, 'isReproductionOf') or             matches(@rel, 'hasRevision') or             matches(@rel, 'isRevisionOf') or             matches(@rel, 'hasSuccessor') or             matches(@rel, 'isSuccessorOf') or             matches(@rel, 'hasSummarization') or             matches(@rel, 'isSummarizationOf') or             matches(@rel, 'hasSupplement') or             matches(@rel, 'isSupplementOf') or             matches(@rel, 'hasTransformation') or             matches(@rel, 'isTransformationOf') or             matches(@rel, 'hasTranslation') or             matches(@rel, 'isTranslationOf')"
             "Within work, expression, source, or item, the value of the rel attribute must match one\x{a}" ~
             "            of the following: hasAbridgement, isAbridgementOf, hasAdaptation, isAdaptationOf,\x{a}" ~
             "            hasAlternate, isAlternateOf, hasArrangement, isArrangementOf, hasComplement,\x{a}" ~
             "            isComplementOf, hasEmbodiment, isEmbodimentOf, hasExemplar, isExemplarOf, hasImitation,\x{a}" ~
             "            isImitationOf, hasPart, isPartOf, hasRealization, isRealizationOf, hasReconfiguration,\x{a}" ~
             "            isReconfigurationOf, hasReproduction, isReproductionOf, hasRevision, isRevisionOf,\x{a}" ~
             "            hasSuccessor, isSuccessorOf, hasSummarization, isSummarizationOf, hasSupplement,\x{a}" ~
             "            isSupplementOf, hasTransformation, isTransformationOf, hasTranslation,\x{a}" ~
             "            isTranslationOf"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@target"
             "Within work, expression, source or item, the target attribute\x{a}" ~
             "            must be present."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.evidence.attributes,
    att.plist.attributes,
    att.pointing.attributes,
    att.targetEval.attributes,
    
    ## Describes the relationship between the entities identified by the plist and target attributes.
    attribute rel { data.RELATIONSHIP },
    empty
  }
relationList =
  
  ## Gathers relation elements.
  element relationList {
    model.headLike*, model.relationLike*, att.common.attributes, empty
  }
rend =
  
  ## (render) – A formatting element indicating special visual rendering, e.g., bold or italicized, of a text word or phrase.
  element rend {
    (text
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.color.attributes,
    att.common.attributes,
    att.horizontalAlign.attributes,
    att.lang.attributes,
    att.textRendition.attributes,
    att.typography.attributes,
    att.verticalAlign.attributes,
    att.whitespace.attributes,
    
    ## A positive value for rotation rotates the text in a counter-clockwise fashion, while negative values produce clockwise rotation.
    attribute rotation { data.DEGREES }?,
    empty
  }
repository =
  
  ## Institution, agency, or individual which holds a bibliographic item.
  element repository {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.name.attributes,
    empty
  }
resp =
  
  ## (responsibility) – A phrase describing the nature of intellectual responsibility.
  element resp {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.datable.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
respStmt =
  
  ## (responsibility statement) – Transcription of text that names one or more individuals, groups, or in rare cases, mechanical processes, responsible for creation, realization, production, funding, or distribution of the intellectual or artistic content.
  element respStmt {
    model.headLike*,
    ((name | resp | model.nameLike.agent)*)
    >> sch:pattern [
         id = "mei-respStmt-check_respStmt-constraint-rule-153"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:respStmt[not(ancestor::mei:change)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "(mei:resp and (mei:name or mei:corpName or mei:persName)) or              count(mei:*[@role]) = count(mei:*) and count(mei:*) > 0"
             role = "warning"
             "At least one element pair (a resp element and a name-like element) is\x{a}" ~
             "            recommended. Alternatively, each name-like element may have a @role\x{a}" ~
             "            attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    empty
  }
rest =
  
  ## A non-sounding event found in the source being transcribed.
  element rest {
    ((dot
      | tabDurSym
      | model.appLike
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id = "mei-rest-Check_restline-constraint-rule-154"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:rest[@line]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staff/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "number(@line) <= number(preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines)"
             "The value of @line must be less than or equal to the number of lines on the\x{a}" ~
             "            staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.rest.log.attributes,
    att.rest.vis.attributes,
    att.rest.ges.attributes,
    att.rest.anl.attributes,
    empty
  }
role =
  
  ## Name of a dramatic role, as given in a cast list.
  element role {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
roleDesc =
  
  ## (role description) – Describes a character's role in a drama.
  element roleDesc {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
sb =
  
  ## (system beginning) – An empty formatting element that forces musical notation to begin on a new line.
  element sb {
    custos?,
    att.common.attributes,
    att.facsimile.attributes,
    att.source.attributes,
    att.sb.anl.attributes,
    att.sb.ges.attributes,
    att.sb.log.attributes,
    att.sb.vis.attributes,
    empty
  }
score =
  
  ## Full score view of the musical content.
  element score {
    (model.annotLike
     | model.appLike
     | model.divLike
     | model.editLike
     | model.graphicPrimitiveLike
     | model.milestoneLike.music
     | model.relationLike
     | model.scoreDefLike
     | model.scorePart
     | model.staffDefLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.metadataPointing.attributes,
    att.score.log.attributes,
    att.score.vis.attributes,
    att.score.ges.attributes,
    att.score.anl.attributes,
    empty
  }
scoreDef =
  
  ## (score definition) – Container for score meta-information.
  element scoreDef {
    model.chordTableLike?,
    model.symbolTableLike?,
    model.keySigLike?,
    model.meterSigLike?,
    pgHead?,
    pgHead2?,
    pgFoot?,
    pgFoot2?,
    instrGrp?,
    model.staffGrpLike?,
    grpSym*,
    ambitus?,
    att.common.attributes,
    att.scoreDef.log.attributes,
    att.scoreDef.vis.attributes,
    att.scoreDef.ges.attributes,
    att.scoreDef.anl.attributes,
    empty
  }
section =
  
  ## Segment of music data.
  element section {
    expansion*,
    ((model.annotLike
      | model.appLike
      | model.divLike
      | model.editLike
      | model.graphicPrimitiveLike
      | model.milestoneLike.music
      | model.relationLike
      | model.sectionPart
      | model.transcriptionLike)*)
    >> sch:pattern [
         id = "mei-section-Check_sectionexpansion-constraint-rule-155"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:section[mei:expansion]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "descendant::mei:section|descendant::mei:ending|descendant::mei:rdg"
             "A\x{a}" ~
             "            section containing an expansion element must have descendant section, ending, or rdg\x{a}" ~
             "            elements."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.metadataPointing.attributes,
    att.pointing.attributes,
    att.section.anl.attributes,
    att.section.ges.attributes,
    att.section.log.attributes,
    att.section.vis.attributes,
    att.targetEval.attributes,
    empty
  }
series =
  
  ## Contains information about the serial publication in which a bibliographic item has appeared.
  element series {
    (text
     | model.identifierLike
     | model.locrefLike
     | model.milestoneLike.text
     | model.titleLike
     | editor
     | extent
     | respStmt
     | textLang)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
space =
  
  ## A placeholder used to fill an incomplete measure, layer, etc. most often so that the combined duration of the events equals the number of beats in the measure.
  element space {
    empty,
    att.common.attributes,
    att.facsimile.attributes,
    att.space.log.attributes,
    att.space.vis.attributes,
    att.space.ges.attributes,
    att.space.anl.attributes,
    empty
  }
speaker =
  
  ## Contains a specialized form of heading or label, giving the name of one or more speakers in a dramatic text or fragment.
  element speaker {
    (text
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
sponsor =
  
  ## Names of sponsoring individuals, organizations or institutions. Sponsors give their intellectual authority to a project; they are to be distinguished from funders, who provide the funding but do not necessarily take intellectual responsibility.
  element sponsor {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.evidence.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
stack =
  
  ## (stacked text) – An inline table with a single column.
  element stack {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Indicates the delimiter used to mark the portions of text that are to be stacked.
    attribute delim { xsd:string }?,
    
    ## Specifies how the stacked text components should be aligned.
    attribute align {
      
      ## Left justified.
      "left"
      | 
        ## Right justified.
        "right"
      | 
        ## Centered.
        "center"
      | 
        ## Aligned on right-most digit.
        "rightdigit"
    }?,
    empty
  }
staff =
  
  ## A group of equidistant horizontal lines on which notes are placed in order to represent pitch or a grouping element for individual 'strands' of notes, rests, etc. that may or may not actually be rendered on staff lines; that is, both diastematic and non-diastematic signs.
  element staff {
    ((model.annotLike
      | model.appLike
      | model.editLike
      | model.graphicPrimitiveLike
      | model.milestoneLike.music
      | model.relationLike
      | model.staffDefLike
      | model.staffPart
      | model.transcriptionLike)*)
    >> sch:pattern [
         id = "mei-staff-checkStaff_n-constraint-rule-156"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staff[@n]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "preceding::mei:staffDef[@n=$thisstaff] or preceding::mei:staff[@n=$thisstaff]/mei:staffDef or mei:staffDef"
             "There must be a preceding staffDef with a matching value of @n, a preceding staff with\x{a}" ~
             "            a matching @n value containing a staffDef, or a staffDef child element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.basic.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.metadataPointing.attributes,
    att.nInteger.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    att.staff.log.attributes,
    att.staff.vis.attributes,
    att.staff.ges.attributes,
    att.staff.anl.attributes,
    empty
  }
staffDef =
  
  ## (staff definition) – Container for staff meta-information.
  element staffDef {
    model.labelLike*,
    (model.instrDefLike | model.layerDefLike | model.staffDefPart)*,
    (ambitus?)
    >> sch:pattern [
         id = "mei-staffDef-Check_staffDefn-constraint-rule-157"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[not(ancestor::mei:staff)]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@n"
             "StaffDef must have an n attribute."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"
             " Either\x{a}" ~
             "            @lines must be present or a preceding staffDef with the same value for @n and @lines\x{a}" ~
             "            must exist."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:clef) + count(mei:clefGrp) < 2"
             "Only one clef or clefGrp is\x{a}" ~
             "            permitted."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-staffDef-Check_ancestor_staff-constraint-rule-158"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[ancestor::mei:staff and @n]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::mei:staff/@n eq $thisstaff"
             "@n must have the same value as the\x{a}" ~
             "            current staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-staffDef-Check_ancestor_staff_lines-constraint-rule-159"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[ancestor::mei:staff and not(@n)]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "thisstaff"
             value = "ancestor::mei:staff/@n"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@lines or preceding::mei:staffDef[@n=$thisstaff and @lines]"
             " Either\x{a}" ~
             "            @lines must be present or a preceding staffDef with matching @n value and @lines must\x{a}" ~
             "            exist."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-staffDef-Check_clef_position_staffDef-constraint-rule-160"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@clef.line and @lines]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@clef.line) <= number(@lines)"
             "The clef position must be less\x{a}" ~
             "            than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-staffDef-Check_clef_position_staffDef_nolines-constraint-rule-161"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@clef.line and not(@lines)]"
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "stafflines"
             value =
               "preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "number(@clef.line) <= number($stafflines)"
             "The clef position must be\x{a}" ~
             "            less than or equal to the number of lines on the staff."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id = "mei-staffDef-Check_tab_strings_lines-constraint-rule-162"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@tab.strings and @lines]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$countTokens = @lines"
             "The tab.strings attribute must have the same\x{a}" ~
             "            number of values as there are staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-staffDef-Check_tab_strings_nolines-constraint-rule-163"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@tab.strings and not(@lines)]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@tab.strings), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "$countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines"
             "The\x{a}" ~
             "            tab.strings attribute must have the same number of values as there are staff\x{a}" ~
             "            lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@lines.color and @lines]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$countTokens = 1 or $countTokens = @lines"
             "The lines.color attribute\x{a}" ~
             "              must have either 1) a single value or 2) the same number of values as there are staff\x{a}" ~
             "              lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@lines.color and not(@lines)]"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countTokens"
             value =
               "count(tokenize(normalize-space(@lines.color), '\s'))"
           ]
           "\x{a}" ~
           "               "
           sch:let [ name = "thisstaff" value = "@n" ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "$countTokens = 1 or $countTokens = preceding::mei:staffDef[@n=$thisstaff and @lines][1]/@lines"
             "The lines.color attribute must have either 1) a single value or 2) the same number of\x{a}" ~
             "              values as there are staff lines."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@ppq][ancestor::mei:scoreDef[@ppq]]"
           "\x{a}" ~
           "               "
           sch:let [ name = "staffPPQ" value = "@ppq" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "scorePPQ"
             value = "ancestor::mei:scoreDef[@ppq][1]/@ppq"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "($scorePPQ mod $staffPPQ) = 0"
             "The value of ppq must be a factor of\x{a}" ~
             "              the value of ppq on an ancestor scoreDef."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffDef[@ppq][preceding::mei:scoreDef[@ppq]]"
           "\x{a}" ~
           "               "
           sch:let [ name = "staffPPQ" value = "@ppq" ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "scorePPQ"
             value = "preceding::mei:scoreDef[@ppq][1]/@ppq"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "($scorePPQ mod $staffPPQ) = 0"
             "The value of ppq must be a factor of\x{a}" ~
             "              the value of ppq on a preceding scoreDef."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.basic.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.metadataPointing.attributes,
    att.nInteger.attributes,
    att.responsibility.attributes,
    att.typed.attributes,
    att.staffDef.log.attributes,
    att.staffDef.vis.attributes,
    att.staffDef.ges.attributes,
    att.staffDef.anl.attributes,
    empty
  }
staffGrp =
  
  ## (staff group) – A group of bracketed or braced staves.
  element staffGrp {
    grpSym*,
    model.labelLike*,
    model.instrDefLike*,
    (model.staffGrpLike | model.staffDefLike)+,
    (grpSym*)
    >> sch:pattern [
         id =
           "mei-staffGrp-Check_staffGrp_unique_staff_n_values-constraint-rule-168"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:staffGrp"
           "\x{a}" ~
           "               "
           sch:let [
             name = "countstaves"
             value = "count(descendant::mei:staffDef)"
           ]
           "\x{a}" ~
           "               "
           sch:let [
             name = "countuniqstaves"
             value =
               "count(distinct-values(descendant::mei:staffDef/@n))"
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "$countstaves eq $countuniqstaves"
             "Each staffDef must have a unique value\x{a}" ~
             "            for the n attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.metadataPointing.attributes,
    att.staffGrp.log.attributes,
    att.staffGrp.vis.attributes,
    att.staffGrp.ges.attributes,
    att.staffGrp.anl.attributes,
    empty
  }
syl =
  
  ## (syllable) – Individual lyric syllable.
  element syl {
    (text
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.syl.log.attributes,
    att.syl.vis.attributes,
    att.syl.ges.attributes,
    att.syl.anl.attributes,
    empty
  }
symbol =
  
  ## A reference to a previously defined symbol.
  element symbol {
    empty
    >> sch:pattern [
         id =
           "mei-symbol-symbolDef_symbol_attributes_required-constraint-rule-169"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:symbol[ancestor::mei:symbolDef]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or (@x and @y)"
             "In the symbolDef context, symbol must have\x{a}" ~
             "            either a startid attribute or x and y attributes."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@altsym or @glyph.name or @glyph.num"
             "In the symbolDef context, symbol\x{a}" ~
             "            must have one of the following attributes: altsym, glyph.name, or\x{a}" ~
             "            glyph.num."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.symbol.anl.attributes,
    att.symbol.ges.attributes,
    att.symbol.log.attributes,
    att.symbol.vis.attributes,
    empty
  }
tempo =
  
  ## Text and symbols descriptive of tempo, mood, or style, e.g., "allarg.", "a tempo", "cantabile", "Moderato", "♩=60", "Moderato ♩ =60").
  element tempo {
    ((text
      | model.textPhraseLike.limited
      | model.graphicPrimitiveLike
      | model.editLike
      | model.transcriptionLike)*)
    >> sch:pattern [
         id =
           "mei-tempo-tempo_in_header_disallow_most_attrs-constraint-rule-170"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:tempo[not(ancestor::mei:score or ancestor::mei:part)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "not(@*[name() != 'analog' and name() != 'class' and name() != 'label' and                name() != 'mm' and name() != 'mm.dots' and name() != 'translit' and                name() != 'type' and name() != 'mm.unit' and name() != 'n' and name() != 'xml:base' and                name() != 'xml:id' and name() != 'xml:lang'])"
             "Only analog, class, label, mm, mm.dots, mm.unit, n, translit, type, xml:base, xml:id,\x{a}" ~
             "            and xml:lang attributes are allowed when tempo is not a descendant of a score or\x{a}" ~
             "            part."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ]
    >> sch:pattern [
         id =
           "mei-tempo-tempo_start-type_attributes_required-constraint-rule-171"
         "\x{a}" ~
         "            "
         sch:rule [
           context =
             "mei:tempo[not(ancestor::mei:syllable) and not(ancestor::mei:work) and not(ancestor::mei:expression) and not(count(ancestor::mei:*) = 0)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or @tstamp or @tstamp.ges or @tstamp.real"
             "Must have one of the\x{a}" ~
             "            attributes: startid, tstamp, tstamp.ges or tstamp.real."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.tempo.log.attributes,
    att.tempo.vis.attributes,
    att.tempo.ges.attributes,
    att.tempo.anl.attributes,
    empty
  }
term =
  
  ## Keyword or phrase which describes a resource.
  element term {
    ((text | model.textPhraseLike.limited)*)
    >> sch:pattern [
         id = "mei-term-Check_term_dataTarget-constraint-rule-172"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:term[@data]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "ancestor::mei:classification"
             "The @data attribute may only occur on a\x{a}" ~
             "            term which is a descendant of a classification element."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.bibl.attributes,
    att.dataPointing.attributes,
    att.lang.attributes,
    empty
  }
textLang =
  
  ## (text language) – Identifies the languages and writing systems within the work described by a bibliographic description, not the language of the description.
  element textLang {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## (main language) supplies a code which identifies the chief language used in the bibliographic work.
    attribute lang.main { xsd:language }?,
    
    ## (other languages) one or more codes identifying any other languages used in the bibliographic work.
    attribute lang.other {
      list { xsd:language+ }
    }?,
    empty
  }
title =
  
  ## Title of a bibliographic entity.
  element title {
    (text
     | macro.titlePart
     | model.editLike
     | model.transcriptionLike
     | titlePart)*,
    att.authorized.attributes,
    att.basic.attributes,
    att.bibl.attributes,
    att.classed.attributes,
    att.facsimile.attributes,
    att.filing.attributes,
    att.labelled.attributes,
    att.lang.attributes,
    att.linking.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    
    ## Indicates the bibliographic level of the title.
    attribute level {
      
      ## Analyzed component, such as an article or chapter, within a larger bibliographic entity.
      "a"
      | 
        ## Collection. A group of items that were not originally published, distributed, or produced together.
        "c"
      | 
        ## Subunit of a collection, e.g. item, folder, box, archival series, subgroup, or subcollection.
        "d"
      | 
        ## Integrating resource, such as a continuously updated loose-leaf service or Web site.
        "i"
      | 
        ## Monograph.
        "m"
      | 
        ## Journal.
        "j"
      | 
        ## Series.
        "s"
      | 
        ## Unpublished (including theses and dissertations unless published by a commercial press).
        "u"
    }?,
    
    ## Characterizes the title in some sense, using any convenient classification scheme or typology that employs single-token labels.
    ## Suggested values include: 1] main; 2] subordinate; 3] abbreviated; 4] alternative; 5] translated; 6] uniform; 7] desc
    attribute type {
      
      ## Main title.
      "main"
      | 
        ## Subtitle or title of part.
        "subordinate"
      | 
        ## Abbreviated form of title.
        "abbreviated"
      | 
        ## Alternate title by which the item is also known.
        "alternative"
      | 
        ## Translated form of title.
        "translated"
      | 
        ## Collective title.
        "uniform"
      | 
        ## Descriptive paraphrase of the work.
        "desc"
      | xsd:NMTOKENS
    }?,
    empty
  }
titlePage =
  
  ## Contains a transcription of the title page of a text.
  element titlePage {
    model.headLike*,
    (model.figureLike
     | model.imprintPart
     | model.milestoneLike.text
     | model.textComponentLike
     | model.titlePagePart
     | model.transcriptionLike)+,
    att.common.attributes,
    att.bibl.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
titlePart =
  
  ## Contains a subsection or division of the title of a bibliographic entity.
  element titlePart {
    (text
     | macro.titlePart
     | model.editLike
     | model.titleLike
     | model.transcriptionLike)*,
    att.authorized.attributes,
    att.basic.attributes,
    att.bibl.attributes,
    att.classed.attributes,
    att.facsimile.attributes,
    att.filing.attributes,
    att.labelled.attributes,
    att.lang.attributes,
    att.linking.attributes,
    att.nInteger.attributes,
    att.responsibility.attributes,
    
    ## Characterizes this title component in some sense, using any convenient classification scheme or typology that employs single-token labels.
    ## Suggested values include: 1] alternative; 2] arrangement; 3] carrier; 4] date; 5] desc; 6] form; 7] key; 8] language; 9] main; 10] name; 11] number; 12] perfmedium; 13] subordinate; 14] translated; 15] version
    attribute type {
      
      ## Alternate title by which the item is also known.
      "alternative"
      | 
        ## Arranged statement for music. Analogous to MARC 240 subfield o.
        "arrangement"
      | 
        ## Medium of the carrier. Analogous to MARC 240 subfield h.
        "carrier"
      | 
        ## Publication/creation date(s) of work. Analogous to MARC 240 subfield f.
        "date"
      | 
        ## Descriptive paraphrase of the work.
        "desc"
      | 
        ## Form subheading. Analogous to MARC 240 subfield k.
        "form"
      | 
        ## Key for music. Analogous to MARC 240 subfield r.
        "key"
      | 
        ## Language of a work. Analogous to MARC 240 subfield l (el).
        "language"
      | 
        ## Main title.
        "main"
      | 
        ## Name of a part or section of a work. Analogous to MARC 240 subfield p.
        "name"
      | 
        ## Standard number designation of a work or of a part or section of a work. Analogous to MARC 240 subfield n.
        "number"
      | 
        ## Performance medium. Analogous to MARC 240 subfield m.
        "perfmedium"
      | 
        ## Subtitle.
        "subordinate"
      | 
        ## Translated form of title.
        "translated"
      | 
        ## Version. Analogous to MARC 240 subfield s.
        "version"
      | xsd:NMTOKENS
    }?,
    empty
  }
width =
  
  ## Description of the horizontal size of an object.
  element width {
    (text | model.textPhraseLike.limited)*,
    att.common.attributes,
    att.bibl.attributes,
    att.lang.attributes,
    att.quantity.attributes,
    empty
  }
att.stringtab.attributes =
  att.stringtab.attribute.tab.fing,
  att.stringtab.attribute.tab.fret,
  att.stringtab.attribute.tab.string
att.stringtab.attribute.tab.fing =
  
  ## Indicates which finger, if any, should be used to play an individual string. The index, middle, ring, and little fingers are represented by the values 1-4, while 't' is for the thumb. The values 'x' and 'o' indicate muffled and open strings, respectively.
  attribute tab.fing { data.FINGER.FRET }?
att.stringtab.attribute.tab.fret =
  
  ## Records the location at which a string should be stopped against a fret.
  attribute tab.fret { data.FRETNUMBER }?
att.stringtab.attribute.tab.string =
  
  ## Records which string is to be played.
  attribute tab.string { data.STRINGNUMBER }?
att.stringtab.position.attributes =
  att.stringtab.position.attribute.tab.pos
att.stringtab.position.attribute.tab.pos =
  
  ## Records fret position.
  attribute tab.pos { xsd:positiveInteger }?
att.stringtab.tuning.attributes =
  att.stringtab.tuning.attribute.tab.strings
att.stringtab.tuning.attribute.tab.strings =
  
  ## Provides a *written* pitch and octave for each open string or course of strings.
  attribute tab.strings {
    list {
      xsd:token {
        pattern =
          "[a-g][0-9](s|f|ss|x|ff|xs|sx|ts|tf|n|nf|ns|su|sd|fu|fd|nu|nd|1qf|3qf|1qs|3qs)?([a-g][0-9](s|f|ss|x|ff|xs|sx|ts|tf|n|nf|ns|su|sd|fu|fd|nu|nd|1qf|3qf|1qs|3qs)?)*"
      }+
    }
  }?
barre =
  
  ## A barre in a chord tablature grid.
  element barre {
    empty,
    att.common.attributes,
    att.startEndId.attributes,
    
    ## Records the location at which the strings should be stopped against a fret in a fretboard diagram. This may or may not be the same as the actual location on the fretboard of the instrument in performance.
    attribute fret {
      xsd:positiveInteger { minInclusive = "1" maxInclusive = "5" }
    }?,
    empty
  }
model.backLike = back
model.divLike = \div
model.frontLike = front
model.lgLike = lg
model.lgLike_alternation = lg
model.lgLike_sequence = lg
model.lgLike_sequenceOptional = lg?
model.lgLike_sequenceOptionalRepeatable = lg*
model.lgLike_sequenceRepeatable = lg+
model.listLike = biblList | castList | eventList | \list
model.listLike_alternation = biblList | castList | eventList | \list
model.listLike_sequence = biblList, castList, eventList, \list
model.listLike_sequenceOptional =
  biblList?, castList?, eventList?, \list?
model.listLike_sequenceOptionalRepeatable =
  biblList*, castList*, eventList*, \list*
model.listLike_sequenceRepeatable =
  biblList+, castList+, eventList+, \list+
model.lLike = l
model.qLike = q
model.qLike_alternation = q
model.qLike_sequence = q
model.qLike_sequenceOptional = q?
model.qLike_sequenceOptionalRepeatable = q*
model.qLike_sequenceRepeatable = q+
model.quoteLike = quote
model.quoteLike_alternation = quote
model.quoteLike_sequence = quote
model.quoteLike_sequenceOptional = quote?
model.quoteLike_sequenceOptionalRepeatable = quote*
model.quoteLike_sequenceRepeatable = quote+
argument =
  
  ## Contains a formal list or prose description of topics addressed.
  element argument {
    (model.headLike | model.milestoneLike.text)*,
    ((model.figureLike | model.textComponentLike | sp),
     model.milestoneLike.text*)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.metadataPointing.attributes,
    empty
  }
back =
  
  ## (back matter) – Contains any appendixes, advertisements, indexes, etc. following the main body of a musical text.
  element back {
    (model.divLike
     | model.frontAndBackPart
     | model.milestoneLike.text
     | model.relationLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.metadataPointing.attributes,
    empty
  }
epigraph =
  
  ## Contains a quotation, anonymous or attributed, appearing on a title page.
  element epigraph {
    (text | model.paracontentPart | p)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.metadataPointing.attributes,
    empty
  }
front =
  
  ## (front matter) – Bundles prefatory text found before the start of the musical text.
  element front {
    (model.divLike
     | model.frontAndBackPart
     | model.milestoneLike.text
     | model.relationLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.metadataPointing.attributes,
    empty
  }
imprimatur =
  
  ## Contains a formal statement authorizing the publication of a work, sometimes required to appear on a title page or its verso.
  element imprimatur {
    (text | model.paracontentPart)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.metadataPointing.attributes,
    empty
  }
l =
  
  ## (line of text) – Contains a single line of text within a line group.
  element l {
    (text
     | model.editLike
     | model.sylLike
     | model.textPhraseLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    
    ## Used to specify a rhythm for the lyric syllables that differs from that of the notes on the staff, e.g., '4,4,4,4' when the rhythm of the notes is '4.,8,4.,8'.
    attribute rhythm { xsd:string }?,
    empty
  }
li =
  [
    a:documentation [
      "(list item) – Single item in a "
      ns1:code [ "<list>" ]
      "."
    ]
  ]
  element li {
    (text
     | model.textComponentLike
     | model.textPhraseLike
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
\list =
  
  ## A formatting element that contains a series of items separated from one another and arranged in a linear, often vertical, sequence.
  element list {
    model.headLike*,
    ((label?, li)*)
    >> sch:pattern [
         id = "mei-list-list_type_constraint-constraint-rule-173"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:list[contains(@type,'gloss')]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "count(mei:label) = count(mei:li)"
             'In a list of type "gloss" all items\x{a}' ~
             "            must be immediately preceded by a label."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.basic.attributes,
    att.classed.attributes,
    att.facsimile.attributes,
    att.labelled.attributes,
    att.lang.attributes,
    att.linking.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    att.xy.attributes,
    [
      a:documentation [
        'Used to indicate the format of a list. In a "simple" list, '
        ns1:code [ "<li>" ]
        ' elements are not numbered or bulleted. In a "marked" list, the sequence of the list items is not critical, and a bullet, box, dash, or other character is displayed at the start of each '
        ns1:code [ "<item>" ]
        '. In an "ordered" list, the sequence of the items is important, and each '
        ns1:code [ "<li>" ]
        " is lettered or numbered. Style sheet functions should be used to specify the mark or numeration system for each "
        ns1:code [ "<li>" ]
        "."
      ]
    ]
    attribute form {
      
      ## Items are not numbered or bulleted.
      "simple"
      | 
        ## Bullet, box, dash, or other character is displayed before each item.
        "marked"
      | 
        ## Each item is numbered or lettered.
        "ordered"
    }?,
    
    ## Captures the nature of the content of a list.
    ## Suggested values include: 1] gloss; 2] index; 3] instructions; 4] litany; 5] syllogism
    attribute type {
      
      ## Each list item glosses some term or concept, which is given by a label element preceding the list item.
      "gloss"
      | 
        ## Each list item is an entry in an index such as the alphabetical topical index at the back of a print volume.
        "index"
      | 
        ## Each list item is a step in a sequence of instructions, as in a recipe.
        "instructions"
      | 
        ## Each list item is one of a sequence of petitions, supplications or invocations, typically in a religious ritual.
        "litany"
      | 
        ## Each list item is part of an argument consisting of two or more propositions and a final conclusion derived from them.
        "syllogism"
      | xsd:NMTOKENS
    }?,
    empty
  }
q =
  [
    a:documentation [
      "(quoted) – Contains material which is distinguished from the surrounding phrase-level text using quotation marks or a similar method. Use "
      ns1:code [ "<quote>" ]
      " for block-level quotations."
    ]
  ]
  element q {
    (text | model.textPhraseLike)*,
    att.basic.attributes,
    att.classed.attributes,
    att.labelled.attributes,
    att.lang.attributes,
    att.linking.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    
    ## 
    ## Suggested values include: 1] spoken; 2] thought; 3] written; 4] soCalled; 5] foreign; 6] distinct; 7] term; 8] emph; 9] mentioned
    attribute type {
      list {
        (
         ## Representation of speech.
         "spoken"
         | 
           ## Representation of thought, e.g. internal monologue.
           "thought"
         | 
           ## Quotation from a written source.
           "written"
         | 
           ## Authorial distance.
           "soCalled"
         | 
           ## Linguistically distinct.
           "foreign"
         | 
           ## Linguistically distinct.
           "distinct"
         | 
           ## Technical term.
           "term"
         | 
           ## Rhetorically emphasized.
           "emph"
         | 
           ## Refering to itself, not its normal referent.
           "mentioned"
         | xsd:NMTOKEN)+
      }
    }?,
    empty
  }
quote =
  
  ## (quoted material) – Contains a paragraph-like block of text attributed to an external source, normally set off from the surrounding text by spacing or other typographic distinction.
  element quote {
    (text | model.paracontentPart | model.pLike | sp)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.xy.attributes,
    empty
  }
seg =
  
  ## (arbitrary segment) represents any segmentation of text below the "text component" level.
  element seg {
    (text
     | model.editLike
     | model.sylLike
     | model.textPhraseLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    empty
  }
att.altSym.attributes = att.altSym.attribute.altsym
att.altSym.attribute.altsym =
  [
    a:documentation [
      "Provides a way of pointing to a user-defined symbol. It must contain a reference to an ID of a "
      ns1:code [ "<symbolDef>" ]
      " element elsewhere in the document."
    ]
  ]
  attribute altsym { data.URI }?
sch:pattern [
  id = "mei-att.altSym-altsym-check_altsymTarget-constraint-rule-174"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "@altsym"
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test = "not(normalize-space(.) eq '')"
      "@altsym attribute\x{a}" ~
      "                should have content."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      role = "warning"
      test =
        "every $i in tokenize(., '\s+') satisfies substring($i,2)=//mei:symbolDef/@xml:id"
      "The value in @altsym should correspond to the @xml:id attribute of a symbolDef\x{a}" ~
      "                element."
    ]
    "\x{a}" ~
    "         "
    sch:assert [
      test = "not(substring(., 2) eq ancestor::mei:symbolDef/@xml:id)"
      "The value\x{a}" ~
      "                in @altsym must not correspond to the @xml:id attribute of a symbolDef\x{a}" ~
      "                ancestor."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.anchoredText.log.attributes =
  att.startId.attributes, att.anchoredText.log.attribute.func
att.anchoredText.log.attribute.func =
  
  ## Indicates the function of the text.
  ## Suggested values include: 1] unknown
  attribute func {
    
    ## The function of the text is unknown.
    "unknown"
    | xsd:NMTOKEN
  }?
att.curve.log.attributes =
  att.startEndId.attributes, att.curve.log.attribute.func
att.curve.log.attribute.func =
  
  ## Indicates the function of the curve.
  ## Suggested values include: 1] unknown
  attribute func {
    
    ## The function of the curve is unknown.
    "unknown"
    | xsd:NMTOKEN
  }?
att.line.log.attributes =
  att.controlEvent.attributes,
  att.duration.additive.attributes,
  att.startEndId.attributes,
  att.timestamp2.logical.attributes,
  att.line.log.attribute.func
att.line.log.attribute.func =
  
  ## Indicates the function of the line.
  ## Suggested values include: 1] coloration; 2] ligature; 3] unknown
  attribute func {
    
    ## Indicates coloration in material transcribed from a source originally in mensural notation.
    "coloration"
    | 
      ## Marks a ligature in material transcribed from a source originally in mensural notation.
      "ligature"
    | 
      ## The function of the line is unknown.
      "unknown"
    | xsd:NMTOKEN
  }?
model.graphicPrimitiveLike = anchoredText | curve | line
model.symbolTableLike = symbolTable
anchoredText =
  
  ## Container for text that is fixed to a particular page location, regardless of changes made to the layout of the measures around it.
  element anchoredText {
    (text
     | model.textPhraseLike.limited
     | model.editLike
     | model.transcriptionLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.lang.attributes,
    att.anchoredText.anl.attributes,
    att.anchoredText.ges.attributes,
    att.anchoredText.log.attributes,
    att.anchoredText.vis.attributes,
    empty
  }
curve =
  
  ## A curved line that cannot be represented by a more specific element, such as a slur.
  element curve {
    empty
    >> sch:pattern [
         id =
           "mei-curve-symbolDef_curve_attributes_required-constraint-rule-175"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:curve[ancestor::mei:symbolDef]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or (@x and @y)"
             "In the symbolDef context, curve must have\x{a}" ~
             "            either a startid attribute or x and y attributes."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or (@x2 and @y2)"
             "In the symbolDef context, curve must have\x{a}" ~
             "            either an endid attribute or both x2 and y2 attributes."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@bezier or @bulge"
             "In the symbolDef context, curve must have either a\x{a}" ~
             "            bezier or bulge attribute."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.curve.anl.attributes,
    att.curve.ges.attributes,
    att.curve.log.attributes,
    att.curve.vis.attributes,
    att.facsimile.attributes,
    empty
  }
line =
  
  ## A visual line that cannot be represented by a more specific; i.e., semantic, element.
  element line {
    ((text | model.textPhraseLike.limited)*)
    >> sch:pattern [
         id =
           "mei-line-line_start-_and_end-type_attributes_required-constraint-rule-176"
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:line[ancestor::mei:symbolDef]"
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@startid or (@x and @y)"
             "When used in the symbolDef context, must have\x{a}" ~
             "            either a startid attribute or x and y attributes."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test = "@endid or (@x2 and @y2)"
             "When used in the symbolDef context, must have\x{a}" ~
             "            either an endid attribute or both x2 and y2 attributes."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "            "
         sch:rule [
           context = "mei:line[not(ancestor::mei:symbolDef)]"
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@startid or @tstamp or @tstamp.ges or @tstamp.real or (@x and @y)"
             "When\x{a}" ~
             "            used in the score context, must have a startid, tstamp, tstamp.ges or tstamp.real\x{a}" ~
             "            attribute or both x and y attributes."
           ]
           "\x{a}" ~
           "               "
           sch:assert [
             test =
               "@dur or @dur.ges or @endid or @tstamp2 or (@x2 and @y2)"
             "When used in\x{a}" ~
             "            the score context, must have an endid, dur, dur.ges, or tstamp2 attribute or both x2 and\x{a}" ~
             "            y2 attributes."
           ]
           "\x{a}" ~
           "            "
         ]
         "\x{a}" ~
         "         "
       ],
    att.common.attributes,
    att.facsimile.attributes,
    att.line.anl.attributes,
    att.line.ges.attributes,
    att.line.log.attributes,
    att.line.vis.attributes,
    empty
  }
mapping =
  
  ## One or more characters which are related to the parent symbol in some respect, as specified by the type attribute.
  element mapping { (text)*, att.common.attributes, empty }
propName =
  
  ## (property name) – Name of a property of the symbol.
  element propName {
    text,
    att.basic.attributes,
    att.labelled.attributes,
    att.linking.attributes,
    att.nNumberLike.attributes,
    att.responsibility.attributes,
    
    ## Characterizes the property name.
    attribute type {
      
      ## A registered Unicode normative or informative property name.
      "unicode"
      | 
        ## A locally defined name.
        "local"
    },
    empty
  }
propValue =
  
  ## (property value) – A single property value.
  element propValue { text, att.common.attributes, empty }
symbolDef =
  
  ## (symbol definition) – Declaration of an individual symbol in a symbolTable.
  element symbolDef {
    symName?,
    symProp*,
    mapping*,
    ((model.graphicPrimitiveLike | graphic)*),
    model.annotLike*,
    att.common.attributes,
    att.coordinated.attributes,
    empty
  }
symName =
  
  ## (symbol name) – Contains the name of a symbol, expressed following Unicode conventions.
  element symName { text, att.common.attributes, empty }
symProp =
  
  ## (symbol property) – Provides a name and value for some property of the parent symbol.
  element symProp { propName, propValue, att.common.attributes, empty }
symbolTable =
  
  ## Contains a set of user-defined symbols.
  element symbolTable { symbolDef+, att.common.attributes, empty }
att.accid.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.visualOffset.ho.attributes,
  att.visualOffset.vo.attributes,
  att.xy.attributes
att.ambNote.vis.attributes =
  att.color.attributes,
  att.enclosingChars.attributes,
  att.noteHeads.attributes,
  att.staffLoc.attributes,
  att.stems.attributes,
  att.typography.attributes
att.annot.vis.attributes = att.annot.vis.attribute.place
att.annot.vis.attribute.place =
  
  ## Location of the annotation.
  attribute place {
    list { data.PLACEMENT+ }
  }?
att.arpeg.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes,
  att.arpeg.vis.attribute.arrow,
  att.arpeg.vis.attribute.arrow.shape,
  att.arpeg.vis.attribute.arrow.size,
  att.arpeg.vis.attribute.arrow.color,
  att.arpeg.vis.attribute.arrow.fillcolor,
  att.arpeg.vis.attribute.line.form,
  att.arpeg.vis.attribute.line.width
att.arpeg.vis.attribute.arrow =
  
  ## Indicates if an arrowhead is to be drawn as part of the arpeggiation symbol.
  attribute arrow { data.BOOLEAN }?
att.arpeg.vis.attribute.arrow.shape =
  
  ## Symbol rendered at end of the line.
  attribute arrow.shape { data.LINESTARTENDSYMBOL }?
att.arpeg.vis.attribute.arrow.size =
  
  ## Holds the relative size of the arrow symbol.
  attribute arrow.size { data.FONTSIZESCALE }?
att.arpeg.vis.attribute.arrow.color =
  
  ## Captures the overall color of the arrow.
  attribute arrow.color { data.COLOR }?
att.arpeg.vis.attribute.arrow.fillcolor =
  
  ## Captures the fill color of the arrow if different from the line color.
  attribute arrow.fillcolor { data.COLOR }?
att.arpeg.vis.attribute.line.form =
  
  ## Visual form of the line.
  attribute line.form { data.LINEFORM }?
att.arpeg.vis.attribute.line.width =
  
  ## Width of the line.
  attribute line.width { data.LINEWIDTH }?
att.artic.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.attacca.vis.attributes =
  att.extender.attributes,
  att.placement.attributes,
  att.verticalGroup.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.barLine.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.visibility.attributes,
  att.width.attributes,
  att.barLine.vis.attribute.len,
  att.barLine.vis.attribute.method,
  att.barLine.vis.attribute.place
att.barLine.vis.attribute.len =
  
  ## States the length of barlines in virtual units. The value must be greater than 0 and is typically equal to 2 times (the number of staff lines - 1); e.g., a value of '8' for a 5-line staff.
  attribute len {
    xsd:decimal { minExclusive = "0" }
  }?
att.barLine.vis.attribute.method =
  
  ## Records the method of barring.
  attribute method { data.BARMETHOD }?
att.barLine.vis.attribute.place =
  
  ## Denotes the staff location of the bar line if its length is non-standard.
  attribute place { data.STAFFLOC }?
att.beam.vis.attributes =
  att.color.attributes, att.cue.attributes, att.beamRend.attributes
att.beaming.vis.attributes =
  att.beaming.vis.attribute.beam.color,
  att.beaming.vis.attribute.beam.rend,
  att.beaming.vis.attribute.beam.slope
att.beaming.vis.attribute.beam.color =
  
  ## Color of beams, including those associated with tuplets.
  attribute beam.color { data.COLOR }?
att.beaming.vis.attribute.beam.rend =
  
  ## Encodes whether a beam is "feathered" and in which direction.
  attribute beam.rend {
    
    ## Beam lines grow farther apart from left to right.
    "acc"
    | 
      ## Beam lines grow closer together from left to right.
      "rit"
    | 
      ## Beam lines are equally-spaced over the entire length of the beam.
      "norm"
  }?
att.beaming.vis.attribute.beam.slope =
  
  ## Captures beam slope.
  attribute beam.slope { xsd:decimal }?
att.beamSpan.vis.attributes = att.beam.vis.attributes
att.beatRpt.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.expandable.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.beatRpt.vis.attribute.slash
att.beatRpt.vis.attribute.slash =
  
  ## Indicates the number of slashes required to render the appropriate beat repeat symbol. When a single beat consisting of a single note or chord is repeated, the repetition symbol is a single thick, slanting slash; therefore, the value '1' should be used. When the beat is divided into even notes, the following values should be used: 4ths or 8ths=1, 16ths=2, 32nds=3, 64ths=4, 128ths=5. When the beat is comprised of mixed duration values, the default rendition is 2 slashes and 2 dots.
  attribute slash { data.BEATRPT.REND }
att.bend.vis.attributes =
  att.color.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.curvature.attributes,
  att.curveRend.attributes
att.bracketSpan.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.lineRend.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes
att.breath.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.bTrem.vis.attributes = att.numberPlacement.attributes
att.caesura.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.chord.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.stems.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.visualOffset.to.attributes,
  att.xy.attributes,
  att.chord.vis.cmn.attributes,
  att.chord.vis.attribute.cluster
att.chord.vis.attribute.cluster =
  
  ## Indicates a single, alternative note head should be displayed instead of individual note heads. The highest and lowest notes of the chord usually indicate the upper and lower boundaries of the cluster note head.
  attribute cluster { data.CLUSTER }?
att.chordDef.vis.attributes = empty
att.chordMember.vis.attributes = empty
att.clef.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.visibility.attributes
att.cleffing.vis.attributes =
  att.cleffing.vis.attribute.clef.color,
  att.cleffing.vis.attribute.clef.visible
att.cleffing.vis.attribute.clef.color =
  
  ## Describes the color of the clef.
  attribute clef.color { data.COLOR }?
att.cleffing.vis.attribute.clef.visible =
  
  ## Determines whether the clef is to be displayed.
  attribute clef.visible { data.BOOLEAN }?
att.clefGrp.vis.attributes = empty
att.cpMark.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.curve.vis.attributes =
  att.color.attributes,
  att.curvature.attributes,
  att.curveRend.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes
att.custos.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes
att.mdiv.vis.attributes = empty
att.dir.vis.attributes =
  att.extender.attributes,
  att.placement.attributes,
  att.verticalGroup.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.dot.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.visualOffset.ho.attributes,
  att.visualOffset.vo.attributes,
  att.xy.attributes
att.dynam.vis.attributes =
  att.extender.attributes,
  att.placement.attributes,
  att.verticalGroup.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.ending.vis.attributes = att.lineRend.attributes
att.episema.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes,
  att.episema.vis.attribute.form,
  att.episema.vis.attribute.place
att.episema.vis.attribute.form =
  
  ##
  attribute form {
    
    ## Horizontal stroke.
    "h"
    | 
      ## Vertical stroke.
      "v"
  }?
att.episema.vis.attribute.place =
  
  ## Captures the placement of the episema with respect to the neume or neume component with which it is associated.
  attribute place { data.EVENTREL }?
att.f.vis.attributes =
  att.altSym.attributes,
  att.extender.attributes,
  att.placement.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.fermata.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes,
  att.fermata.vis.attribute.form,
  att.fermata.vis.attribute.shape
att.fermata.vis.attribute.form =
  
  ## Describes the visual appearance of the fermata; that is, whether it occurs as upright or inverted.
  attribute form {
    
    ## Inverted, i.e., curve or bracket below the dot.
    "inv"
    | 
      ## Upright; i.e., curve or bracket above the dot.
      "norm"
  }?
att.fermata.vis.attribute.shape =
  
  ## Describes the visual appearance of the fermata; that is, whether it has a curved, square, or angular shape.
  attribute shape {
    
    ## A curve above or below the dot.
    "curved"
    | 
      ## A bracket above or below the dot.
      "square"
    | 
      ## A triangle above or below the dot.
      "angular"
  }?
att.fing.vis.attributes =
  att.altSym.attributes,
  att.extender.attributes,
  att.placement.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.fingGrp.vis.attributes =
  att.altSym.attributes,
  att.extender.attributes,
  att.placement.attributes,
  att.visualOffset.attributes,
  att.xy.attributes,
  att.fingGrp.vis.attribute.orient
att.fingGrp.vis.attribute.orient =
  
  ##
  attribute orient {
    
    ## Combination expressed horizontally, as for brass instruments.
    "horiz"
    | 
      ## Combination expressed vertically, as for woodwind instruments or piano.
      "vert"
  }?
att.fTrem.vis.attributes =
  att.fTrem.vis.attribute.beams,
  att.fTrem.vis.attribute.beams.float,
  att.fTrem.vis.attribute.float.gap
att.fTrem.vis.attribute.beams =
  
  ## Indicates the number of beams present.
  attribute beams {
    xsd:positiveInteger { minInclusive = "1" maxInclusive = "6" }
  }?
att.fTrem.vis.attribute.beams.float =
  
  ## Captures the number of "floating" beams, i.e., those not attached to stems.
  attribute beams.float { xsd:nonNegativeInteger }?
sch:pattern [
  id =
    "mei-att.fTrem.vis-beams.float-check_beams.floating-constraint-rule-178"
  "\x{a}" ~
  "      "
  sch:rule [
    context = "mei:fTrem[@beams and @beams.float]"
    "\x{a}" ~
    "         "
    sch:assert [
      test = "@beams.float <= @beams"
      "The number of floating beams must be less\x{a}" ~
      "                than or equal to the total number of beams."
    ]
    "\x{a}" ~
    "      "
  ]
  "\x{a}" ~
  "   "
]
att.fTrem.vis.attribute.float.gap =
  
  ## Records the amount of separation between floating beams and stems.
  attribute float.gap { data.MEASUREMENTABS }?
att.gliss.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.lineRend.attributes
att.grpSym.vis.attributes =
  att.altSym.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.hairpin.vis.attributes =
  att.color.attributes,
  att.lineRend.base.attributes,
  att.placement.attributes,
  att.verticalGroup.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.hairpin.vis.attribute.opening
att.hairpin.vis.attribute.opening =
  
  ## Specifies the distance between the lines at the open end of a hairpin dynamic mark.
  attribute opening { data.MEASUREMENTABS }?
att.halfmRpt.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.expandable.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.visualOffset.attributes
att.harm.vis.attributes =
  att.extender.attributes,
  att.placement.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes,
  att.harm.vis.attribute.rendgrid
att.harm.vis.attribute.rendgrid =
  
  ## Describes how the harmonic indication should be rendered.
  attribute rendgrid {
    
    ## Chord tablature grid.
    "grid"
    | 
      ## Chord tablature grid and the element's textual content.
      "gridtext"
    | 
      ## Textual content of the element.
      "text"
  }?
att.harpPedal.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.hispanTick.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes,
  att.hispanTick.vis.attribute.place,
  att.hispanTick.vis.attribute.tilt
att.hispanTick.vis.attribute.place =
  
  ## Captures the placement of the tick mark with respect to the neume or neume component with which it is associated.
  attribute place { data.EVENTREL }?
att.hispanTick.vis.attribute.tilt =
  
  ## Direction toward which the mark points.
  attribute tilt { data.COMPASSDIRECTION }?
att.instrDef.vis.attributes = empty
att.keyAccid.vis.attributes =
  att.altSym.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.xy.attributes
att.keySig.vis.attributes =
  att.visibility.attributes, att.keySig.vis.attribute.sig.showchange
att.keySig.vis.attribute.sig.showchange =
  
  ## Determines whether cautionary accidentals should be displayed at a key change.
  attribute sig.showchange { data.BOOLEAN }?
att.keySigDefault.vis.attributes =
  att.keySigDefault.vis.attribute.keysig.show,
  att.keySigDefault.vis.attribute.keysig.showchange
att.keySigDefault.vis.attribute.keysig.show =
  
  ## Indicates whether the key signature should be displayed.
  attribute keysig.show { data.BOOLEAN }?
att.keySigDefault.vis.attribute.keysig.showchange =
  
  ## Determines whether cautionary accidentals should be displayed at a key change.
  attribute keysig.showchange { data.BOOLEAN }?
att.layer.vis.attributes = att.visibility.attributes
att.layerDef.vis.attributes =
  att.beaming.vis.attributes,
  att.textStyle.attributes,
  att.visibility.attributes
att.ligature.vis.attributes = att.color.attributes
att.line.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.line.vis.attribute.form,
  att.line.vis.attribute.width,
  att.line.vis.attribute.endsym,
  att.line.vis.attribute.endsym.size,
  att.line.vis.attribute.startsym,
  att.line.vis.attribute.startsym.size
att.line.vis.attribute.form =
  
  ## Visual form of the line.
  attribute form { data.LINEFORM }?
att.line.vis.attribute.width =
  
  ## Width of the line.
  attribute width { data.LINEWIDTH }?
att.line.vis.attribute.endsym =
  
  ## Symbol rendered at end of line.
  attribute endsym { data.LINESTARTENDSYMBOL }?
att.line.vis.attribute.endsym.size =
  
  ## Holds the relative size of the line-end symbol.
  attribute endsym.size { data.FONTSIZESCALE }?
att.line.vis.attribute.startsym =
  
  ## Symbol rendered at start of line.
  attribute startsym { data.LINESTARTENDSYMBOL }?
att.line.vis.attribute.startsym.size =
  
  ## Holds the relative size of the line-start symbol.
  attribute startsym.size { data.FONTSIZESCALE }?
att.liquescent.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes,
  att.liquescent.vis.attribute.curve,
  att.liquescent.vis.attribute.looped
att.liquescent.vis.attribute.curve =
  
  ## Records direction of curvature.
  attribute curve {
    
    ## Anti-clockwise curvature.
    "a"
    | 
      ## Clockwise curvature.
      "c"
  }?
att.liquescent.vis.attribute.looped =
  
  ## Indicates whether curve is closed.
  attribute looped { data.BOOLEAN }?
att.lv.vis.attributes =
  att.color.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.curvature.attributes,
  att.curveRend.attributes
att.lyrics.vis.attributes =
  att.placement.attributes, att.typography.attributes
att.measure.vis.attributes =
  att.barring.attributes, att.width.attributes
att.mensur.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.mensur.vis.attribute.form,
  att.mensur.vis.attribute.orient
att.mensur.vis.attribute.form =
  
  ## Indicates whether the base symbol is written vertically or horizontally.
  attribute form {
    
    ## Horizontally oriented.
    "horizontal"
    | 
      ## Vertically oriented.
      "vertical"
  }?
att.mensur.vis.attribute.orient =
  
  ## Describes the rotation or reflection of the base symbol.
  attribute orient { data.ORIENTATION }?
att.mensural.vis.attributes =
  att.mensural.vis.attribute.mensur.color,
  att.mensural.vis.attribute.mensur.form,
  att.mensural.vis.attribute.mensur.loc,
  att.mensural.vis.attribute.mensur.orient,
  att.mensural.vis.attribute.mensur.size
att.mensural.vis.attribute.mensur.color =
  
  ## Records the color of the mensuration sign. Do not confuse this with the musical term 'color' as used in pre-CMN notation.
  attribute mensur.color { data.COLOR }?
att.mensural.vis.attribute.mensur.form =
  
  ## Indicates whether the base symbol is written vertically or horizontally.
  attribute mensur.form {
    
    ## Horizontally oriented.
    "horizontal"
    | 
      ## Vertically oriented.
      "vertical"
  }?
att.mensural.vis.attribute.mensur.loc =
  
  ## Holds the staff location of the mensuration sign.
  attribute mensur.loc { data.STAFFLOC }?
att.mensural.vis.attribute.mensur.orient =
  
  ## Describes the rotation or reflection of the base symbol.
  attribute mensur.orient { data.ORIENTATION }?
att.mensural.vis.attribute.mensur.size =
  
  ## Describes the relative size of the mensuration sign.
  attribute mensur.size { data.FONTSIZE }?
att.meterSig.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.meterSig.vis.attribute.form
att.meterSig.vis.attribute.form =
  
  ## Contains an indication of how the meter signature should be rendered.
  attribute form {
    
    ## Show only the number of beats.
    "num"
    | 
      ## The lower number in the meter signature is replaced by a note symbol.
      "denomsym"
    | 
      ## Meter signature rendered using traditional numeric values.
      "norm"
    | 
      ## Meter signature not rendered.
      "invis"
  }?
att.meterSigDefault.vis.attributes =
  att.meterSigDefault.vis.attribute.meter.form,
  att.meterSigDefault.vis.attribute.meter.showchange
att.meterSigDefault.vis.attribute.meter.form =
  
  ## Contains an indication of how the meter signature should be rendered.
  attribute meter.form {
    
    ## Show only the number of beats.
    "num"
    | 
      ## The lower number in the meter signature is replaced by a note symbol.
      "denomsym"
    | 
      ## Meter signature rendered using traditional numeric values.
      "norm"
    | 
      ## Meter signature not rendered.
      "invis"
  }?
att.meterSigDefault.vis.attribute.meter.showchange =
  
  ## Determines whether the old meter signature should be displayed when the meter signature changes.
  attribute meter.showchange { data.BOOLEAN }?
att.meterSigGrp.vis.attributes = empty
att.midi.vis.attributes = empty
att.mordent.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes
att.mRest.vis.attributes =
  att.altSym.attributes,
  att.cutout.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.visibility.attributes,
  att.xy.attributes
att.mRpt.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.expandable.attributes,
  att.extSym.attributes,
  att.typography.attributes
att.mRpt2.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.expandable.attributes,
  att.extSym.attributes,
  att.typography.attributes
att.mSpace.vis.attributes =
  att.altSym.attributes, att.cutout.attributes, att.xy.attributes
att.multiRest.vis.attributes =
  att.altSym.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.multiRest.vis.attribute.block
att.multiRest.vis.attribute.block =
  
  ## When the block attribute is used, combinations of the 1, 2, and 4 measure rest forms (Read, p. 104) should be rendered instead of the modern form or an alternative symbol.
  attribute block { data.BOOLEAN }?
att.multiRpt.vis.attributes =
  att.altSym.attributes,
  att.expandable.attributes,
  att.extSym.attributes,
  att.typography.attributes
att.nc.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.ncForm.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes
att.ncGrp.vis.attributes =
  att.color.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes
att.neume.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes
att.note.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.noteHeads.attributes,
  att.staffLoc.attributes,
  att.stems.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.visualOffset.to.attributes,
  att.xy.attributes,
  att.note.vis.cmn.attributes
att.octave.vis.attributes =
  att.color.attributes,
  att.extender.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.oriscus.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes
att.ornam.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.placement.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.ossia.vis.attributes = empty
att.pad.vis.attributes = empty
att.part.vis.attributes = empty
att.parts.vis.attributes = empty
att.pb.vis.attributes = att.pb.vis.attribute.folium
att.pb.vis.attribute.folium =
  [
    a:documentation [
      "States the side of a leaf (as in a manuscript) on which the content following the "
      ns1:code [ "<pb>" ]
      " element occurs."
    ]
  ]
  attribute folium {
    
    ## The back of a manuscript page.
    "verso"
    | 
      ## The front of a manuscript page.
      "recto"
  }?
att.pedal.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.lineRend.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes,
  att.pedal.vis.attribute.form
att.pedal.vis.attribute.form =
  
  ## Determines whether piano pedal marks should be rendered as lines or as terms.
  attribute form {
    
    ## Continuous line with start and end positions rendered by vertical bars and bounces shown by upward-pointing "blips".
    "line"
    | 
      ## Pedal down and half pedal rendered with "Ped.", pedal up rendered by "*", pedal "bounce" rendered with "* Ped.".
      "pedstar"
    | 
      ## Pedal up and down indications same as with "pedstar", but bounce is rendered with "Ped." only.
      "altpedstar"
  }?
att.phrase.vis.attributes =
  att.color.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.phrase.vis.cmn.attributes
att.proport.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes
att.quilisma.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes,
  att.quilisma.vis.attribute.waves
att.quilisma.vis.attribute.waves =
  
  ## Number of "crests" of a wavy line.
  attribute waves {
    xsd:positiveInteger { minInclusive = "2" maxInclusive = "4" }
  }?
att.rdg.vis.attributes = empty
att.refrain.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.to.attributes,
  att.visualOffset.vo.attributes,
  att.voltaGroupingSym.attributes,
  att.xy.attributes
att.reh.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.rest.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.rest.vis.cmn.attributes,
  att.rest.vis.mensural.attributes,
  att.staffLoc.attributes,
  att.staffLoc.pitched.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.sb.vis.attributes =
  att.altSym.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.sb.vis.attribute.form
att.sb.vis.attribute.form =
  
  ## Indicates whether hash marks should be rendered between systems. See Read, p. 436, ex. 26-3.
  attribute form {
    
    ## Display hash marks between systems.
    "hash"
  }?
att.score.vis.attributes = empty
att.scoreDef.vis.attributes =
  att.barring.attributes,
  att.cleffing.vis.attributes,
  att.distances.attributes,
  att.endings.attributes,
  att.keySigDefault.vis.attributes,
  att.lyricStyle.attributes,
  att.measureNumbers.attributes,
  att.meterSigDefault.vis.attributes,
  att.multinumMeasures.attributes,
  att.notationStyle.attributes,
  att.oneLineStaff.attributes,
  att.optimization.attributes,
  att.pages.attributes,
  att.spacing.attributes,
  att.staffItems.attributes,
  att.systems.attributes,
  att.textStyle.attributes,
  att.scoreDef.vis.cmn.attributes,
  att.scoreDef.vis.mensural.attributes,
  att.scoreDef.vis.attribute.vu.height
att.scoreDef.vis.attribute.vu.height =
  
  ## Defines the height of a "virtual unit" (vu) in terms of real-world units. A single vu is half the distance between the vertical center point of a staff line and that of an adjacent staff line.
  attribute vu.height {
    xsd:token { pattern = "\d+(\.\d+)?(cm|mm|in|pt|pc)" }
  }?
att.section.vis.attributes = att.section.vis.attribute.restart
att.section.vis.attribute.restart =
  
  ## Indicates that staves begin again with this section.
  attribute restart { data.BOOLEAN }?
att.signifLet.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes,
  att.signifLet.vis.attribute.place
att.signifLet.vis.attribute.place =
  
  ## Captures the placement of the sequence of characters with respect to the neume or neume component with which it is associated.
  attribute place { data.EVENTREL }?
att.slur.vis.attributes =
  att.color.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.curvature.attributes,
  att.curveRend.attributes
att.sp.vis.attributes =
  att.placement.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.space.vis.attributes =
  att.cutout.attributes, att.space.vis.attribute.compressable
att.space.vis.attribute.compressable =
  
  ## Indicates whether a space is 'compressible', i.e., if it may be removed at the discretion of processing software.
  attribute compressable { data.BOOLEAN }?
att.staff.vis.attributes = att.visibility.attributes
att.staffDef.vis.attributes =
  att.barring.attributes,
  att.cleffing.vis.attributes,
  att.distances.attributes,
  att.keySigDefault.vis.attributes,
  att.lyricStyle.attributes,
  att.meterSigDefault.vis.attributes,
  att.multinumMeasures.attributes,
  att.notationStyle.attributes,
  att.oneLineStaff.attributes,
  att.scalable.attributes,
  att.staffItems.attributes,
  att.textStyle.attributes,
  att.visibility.attributes,
  att.staffDef.vis.cmn.attributes,
  att.staffDef.vis.mensural.attributes,
  att.staffDef.vis.attribute.grid.show,
  att.staffDef.vis.attribute.layerscheme,
  att.staffDef.vis.attribute.lines.color,
  att.staffDef.vis.attribute.lines.visible,
  att.staffDef.vis.attribute.spacing
att.staffDef.vis.attribute.grid.show =
  
  ## Determines whether to display guitar chord grids.
  attribute grid.show { data.BOOLEAN }?
att.staffDef.vis.attribute.layerscheme =
  
  ## Indicates the number of layers and their stem directions.
  attribute layerscheme { data.LAYERSCHEME }?
att.staffDef.vis.attribute.lines.color =
  
  ## Captures the colors of the staff lines. The value is structured; that is, it should have the same number of space-separated RGB values as the number of lines indicated by the lines attribute. A line can be made invisible by assigning it the same RGB value as the background, usually white.
  attribute lines.color {
    list { data.COLOR+ }
  }?
att.staffDef.vis.attribute.lines.visible =
  
  ## Records whether all staff lines are visible.
  attribute lines.visible { data.BOOLEAN }?
att.staffDef.vis.attribute.spacing =
  [
    a:documentation [
      "Records the absolute distance (as opposed to the relative distances recorded in "
      ns1:code [ "<scoreDef>" ]
      " elements) between this staff and the preceding one in the same system. This value is meaningless for the first staff in a system since the spacing.system attribute indicates the spacing between systems."
    ]
  ]
  attribute spacing { data.MEASUREMENTREL }?
att.staffGrp.vis.attributes =
  att.barring.attributes,
  att.staffGroupingSym.attributes,
  att.visibility.attributes,
  att.staffGrp.vis.attribute.bar.thru
att.staffGrp.vis.attribute.bar.thru =
  
  ## Indicates whether bar lines go across the space between staves (true) or are only drawn across the lines of each staff (false).
  attribute bar.thru { data.BOOLEAN }?
att.stageDir.vis.attributes =
  att.placement.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.strophicus.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.enclosingChars.attributes,
  att.extSym.attributes,
  att.staffLoc.attributes,
  att.typography.attributes,
  att.visibility.attributes,
  att.visualOffset.ho.attributes,
  att.xy.attributes
att.syl.vis.attributes =
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes,
  att.horizontalAlign.attributes
att.syllable.vis.attributes = empty
att.symbol.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.scalable.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.tempo.vis.attributes =
  att.placement.attributes,
  att.verticalGroup.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.tie.vis.attributes =
  att.color.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.attributes,
  att.xy.attributes,
  att.xy2.attributes,
  att.curvature.attributes,
  att.curveRend.attributes
att.trill.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extender.attributes,
  att.placement.attributes,
  att.extSym.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.visualOffset2.ho.attributes,
  att.visualOffset2.to.attributes,
  att.xy.attributes
att.tuplet.vis.attributes =
  att.color.attributes,
  att.numberPlacement.attributes,
  att.tuplet.vis.attribute.bracket.place,
  att.tuplet.vis.attribute.bracket.visible,
  att.tuplet.vis.attribute.dur.visible,
  att.tuplet.vis.attribute.num.format
att.tuplet.vis.attribute.bracket.place =
  
  ## Used to state where a tuplet bracket will be placed in relation to the note heads.
  attribute bracket.place { data.STAFFREL.basic }?
att.tuplet.vis.attribute.bracket.visible =
  
  ## States whether a bracket should be rendered with a tuplet.
  attribute bracket.visible { data.BOOLEAN }?
att.tuplet.vis.attribute.dur.visible =
  
  ## Determines if the tuplet duration is visible.
  attribute dur.visible { data.BOOLEAN }?
att.tuplet.vis.attribute.num.format =
  
  ## Controls how the num:numbase ratio is to be displayed.
  attribute num.format {
    
    ## Only the num attribute is displayed, e.g., '7'.
    "count"
    | 
      ## Both the num and numbase attributes are displayed, e.g., '7:4'.
      "ratio"
  }?
att.tupletSpan.vis.attributes = att.tuplet.vis.attributes
att.turn.vis.attributes =
  att.altSym.attributes,
  att.color.attributes,
  att.extSym.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.attributes,
  att.xy.attributes
att.verse.vis.attributes =
  att.color.attributes,
  att.placement.attributes,
  att.typography.attributes,
  att.visualOffset.to.attributes,
  att.visualOffset.vo.attributes,
  att.voltaGroupingSym.attributes,
  att.xy.attributes
att.volta.vis.attributes =
  att.color.attributes,
  att.typography.attributes,
  att.visualOffset.to.attributes,
  att.visualOffset.vo.attributes,
  att.xy.attributes
model.perfResPart = perfRes | instrDesc | instrConfig
model.instrdescPart = instrName | courseCount | tuning
instrDesc =
  
  ## (description of an instrument) A detailed and structured description of an instrument.
  element instrDesc {
    (text | model.instrdescPart)*,
    att.common.attributes,
    att.authorized.attributes,
    att.bibl.attributes,
    att.pointing.attributes,
    empty
  }
instrName =
  
  ## (instrument name) The name of an instrument
  element instrName { text, att.common.attributes, empty }
model.instrconfigPart = notAllowed
instrConfig =
  
  ## (instrument configuration) Specifies how an instrument is required to be configured by this score.
  element instrConfig {
    (text | model.instrconfigPart)*, att.common.attributes, empty
  }
att.note.ges.tablature.attributes =
  att.note.ges.tablature.attribute.tab.course,
  att.note.ges.tablature.attribute.tab.muted
att.note.ges.tablature.attribute.tab.course =
  
  ## Records which course is to be played.
  attribute tab.course { data.COURSENUMBER }?
att.note.ges.tablature.attribute.tab.muted =
  
  ## To indicate strings muted with the left hand (to achieve a percussive effect).
  attribute tab.muted { xsd:boolean }?
att.note.ges.tablature.mod.attributes =
  att.note.ges.tablature.mod.attribute.tab.fromFret,
  att.note.ges.tablature.mod.attribute.tab.toFret
att.note.ges.tablature.mod.attribute.tab.fromFret =
  
  ## Indicates a starting fret of a multi-fret gesture.
  attribute tab.fromFret { data.FRETNUMBER }?
att.note.ges.tablature.mod.attribute.tab.toFret =
  
  ## Indicates an ending fret of a multi-fret gesture.
  attribute tab.toFret { data.FRETNUMBER }?
model.fretGlyphLike = fretGlyph
model.fretGlyphLike_alternation = fretGlyph
model.fretGlyphLike_sequence = fretGlyph
model.fretGlyphLike_sequenceOptional = fretGlyph?
model.fretGlyphLike_sequenceOptionalRepeatable = fretGlyph*
model.fretGlyphLike_sequenceRepeatable = fretGlyph+
fretGlyph =
  
  ## (tablature note glyph) Encodes the actual symbol found in the tablature source for a particular note. These are often simple numerals or letters, but may also (in German lute tablature) be characters such as ꝯ or ꝫ or letters with a bar such as ā. They may also be compound glypths that contain articulation symbols such as '/'.
  element fretGlyph {
    text,
    att.facsimile.attributes,
    
    ## The fret symbol.
    attribute symbol { text }?,
    
    ## The fret symbol modifier.
    attribute symbol.mod {
      
      ## strikethrough.
      "strikethrough"
    }?,
    empty
  }
tabDurSym =
  
  ## (tablature rhythm sign) The durational sign associated with a tablature chord. The intended use of <tabDurSym> is to encode the rhythmic sign found in the source (if any) while the actual duration of the associated tablature chord is encoded using the <tabGrp>'s @dur attribute.
  element tabDurSym {
    text,
    att.common.attributes,
    att.facsimile.attributes,
    
    ## The duration symbol.
    attribute symbol { data.DURATION.tablature }?,
    
    ## Indicates whether the rhythm sign has a note head and if so, what shape.
    attribute head { data.HEADSHAPE }?,
    
    ## The number of flags on the rhythm sign.
    attribute flags { xsd:nonNegativeInteger }?,
    
    ## Indicates the direction of the rhythm sign's flag(s)
    attribute flagDir {
      
      ## Left pointing
      "left"
      | 
        ## Right pointing
        "right"
    }?,
    
    ## Indicates that the rhythm sign has a serif
    attribute serif { data.BOOLEAN }?,
    
    ## Indicates the direction of the rhythm sign's serif when @serif is true
    attribute serifDir {
      
      ## Left pointing
      "left"
      | 
        ## Right pointing
        "right"
    }?,
    
    ## The number of dots on the rhythm sign.
    attribute dots { xsd:integer }?,
    empty
  }
abzug =
  
  ## (abzug marking) abzug marking
  element abzug {
    empty, att.common.attributes, att.startEndId.attributes, empty
  }
tabBarre =
  
  ## (barré marking) barré marking
  element tabBarre {
    empty,
    att.common.attributes,
    att.startEndId.attributes,
    
    ## Records the location at which the strings should be stopped against a fret in a fretboard diagram. This may or may not be the same as the actual location on the fretboard of the instrument in performance.
    attribute fret { data.FRETNUMBER }?,
    empty
  }
ensembleLine =
  
  ## (ensemble line) Indicates that two <note>s are to be played simultaneously.
  element ensembleLine {
    empty, att.common.attributes, att.startEndId.attributes, empty
  }
connectingLine =
  
  ## (connecting line) connecting line
  element connectingLine {
    empty, att.common.attributes, att.startEndId.attributes, empty
  }
separee =
  
  ## (separeé marking) Indicates that two <note>s in a single tablature <tabGrp> should be played sequentially (rather than simultaneously).
  element separee {
    empty, att.common.attributes, att.startEndId.attributes, empty
  }
courseCount =
  
  ## (number of courses) The number of courses on a lute.
  element courseCount {
    xsd:positiveInteger, att.common.attributes, empty
  }
tuning =
  
  ## (tuning of courses) Specify a @tuning.standard or child <course> elements or both. Should be used to indicate the tuning of each course. Child <course> elements override or supplement the @tuning.standard. 
  element tuning {
    course*,
    att.common.attributes,
    
    ## Lute or guitar standard tuning.
    attribute tuning.standard { data.COURSETUNING }?,
    empty
  }
course =
  
  ## (course tuning information) Describes the tuning of a course on a lute.
  element course {
    \string*, att.common.attributes, att.pitched.attributes, empty
  }
\string =
  
  ## (a string of a course) Describes the tuning of a single string of a course on a lute.
  element string {
    empty, att.common.attributes, att.pitched.attributes, empty
  }
att.fing.tablature.attributes =
  att.fing.tablature.attribute.playingHand,
  att.fing.tablature.attribute.playingFinger,
  att.fing.tablature.attribute.symbol
att.fing.tablature.attribute.playingHand =
  
  ## The hand (left, right, or both) prescribed by the fingering marking.
  attribute playingHand {
    
    ## Left hand
    "left"
    | 
      ## Right hand
      "right"
    | 
      ## Both left and right hands
      "both"
  }?
att.fing.tablature.attribute.playingFinger =
  
  ## The finger prescribed by the fingering marking.
  attribute playingFinger { data.FINGER.FRET }?
att.fing.tablature.attribute.symbol =
  
  ## The symbol employed in the fingering marking.
  attribute symbol { text }?
tabGrp =
  
  ## (tablature stack of rhythm sign and notes) The primary rhythm and pitch information in guitar and lute tablature is contained in vertically-aligned stacks of symbols. The main components of these stacks are rhythm symbols, which indicate the inter-onset time between the current and the next stack, and fret/course symbols which indicate what, if anything, should be sounded. 
  element tabGrp {
    (model.chordPart
     | model.appLike
     | model.editLike
     | model.sylLike
     | model.transcriptionLike
     | model.verseLike)*,
    att.common.attributes,
    att.facsimile.attributes,
    att.chord.log.attributes,
    att.chord.vis.attributes,
    att.chord.ges.attributes,
    att.chord.anl.attributes,
    empty
  }
att.gliss.tablature.attributes =
  att.gliss.tablature.attribute.slide,
  att.gliss.tablature.attribute.slide.to,
  att.gliss.tablature.attribute.slide.from
att.gliss.tablature.attribute.slide =
  
  ## Slide two notes on the same string.
  attribute slide {
    
    ## Legato slide
    "legato"
    | 
      ## Shift slide
      "shift"
  }?
att.gliss.tablature.attribute.slide.to =
  
  ## A single-note slide where the note is the target note.
  attribute slide.to {
    
    ## Slide ascending
    "upwards"
    | 
      ## Slide descending
      "downwards"
  }?
att.gliss.tablature.attribute.slide.from =
  
  ## A single-note slide where the note is the start note.
  attribute slide.from {
    
    ## Slide ascending
    "upwards"
    | 
      ## Slide descending
      "downwards"
  }?
att.dirmark.tablature.attributes =
  att.dirmark.tablature.attribute.show.dirmark
att.dirmark.tablature.attribute.show.dirmark =
  
  ## Indicates whether the direction mark is shown.
  attribute show.dirmark { xsd:boolean }?
att.technique.tablature.attributes =
  att.technique.tablature.attribute.technique
att.technique.tablature.attribute.technique =
  
  ## 
  ## Suggested values include: 1] artificial-harmonic; 2] bend-neck; 3] feedback; 4] harp-harmonic; 5] left-hand; 6] let-ring; 7] natural-harmonic; 8] palm-muting; 9] rake; 10] tap-fing; 11] tap-harmonic; 12] tap-pick; 13] vibrato-bar
  attribute technique {
    
    ##
    "artificial-harmonic"
    | 
      ##
      "bend-neck"
    | 
      ##
      "feedback"
    | 
      ##
      "harp-harmonic"
    | 
      ##
      "left-hand"
    | 
      ##
      "let-ring"
    | 
      ##
      "natural-harmonic"
    | 
      ##
      "palm-muting"
    | 
      ##
      "rake"
    | 
      ##
      "tap-fing"
    | 
      ##
      "tap-harmonic"
    | 
      ##
      "tap-pick"
    | 
      ##
      "vibrato-bar"
    | xsd:Name
  }?
pitchInflection =
  
  ##
  element pitchInflection {
    text,
    att.common.attributes,
    att.startEndId.attributes,
    
    ##
    attribute prebend { xsd:boolean }?,
    
    ##
    attribute dis { xsd:integer }?,
    
    ##
    attribute show.fret { xsd:boolean }?,
    
    ##
    attribute show.fret.enclose {
      
      ##
      "paren"
    }?,
    
    ##
    attribute vibrato-bar { xsd:boolean }?,
    empty
  }
vibrato =
  
  ##
  element vibrato {
    empty,
    att.common.attributes,
    att.technique.tablature.attributes,
    att.startEndId.attributes,
    att.dirmark.tablature.attributes,
    
    ##
    attribute wide { xsd:boolean }?,
    empty
  }
start = mei | meiHead | meiCorpus | music
